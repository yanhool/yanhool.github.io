<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yanhool的小站</title>
  
  
  <link href="https://yanhool.github.io/atom.xml" rel="self"/>
  
  <link href="https://yanhool.github.io/"/>
  <updated>2023-04-14T13:08:00.000Z</updated>
  <id>https://yanhool.github.io/</id>
  
  <author>
    <name>Yanhool🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang学习笔记</title>
    <link href="https://yanhool.github.io/posts/20230411d.html"/>
    <id>https://yanhool.github.io/posts/20230411d.html</id>
    <published>2023-04-11T01:19:03.000Z</published>
    <updated>2023-04-14T13:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang学习笔记"><a href="#golang学习笔记" class="headerlink" title="golang学习笔记"></a>golang学习笔记</h1><h2 id="1-golang并发"><a href="#1-golang并发" class="headerlink" title="1. golang并发"></a>1. golang并发</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p><strong>进程和线程</strong></p><ul><li>进程就是运行着的程序，它是程序在操作系统的一次执行过程，是一个程序的动态概念，进程是操作系统<strong>分配</strong>资源的基本单位</li><li>线程可以理解为一个进程的执行实体，它是比进程力度更小的执行单元，也是真正运行在cpu上的执行单元，线程是操作系统<strong>调度</strong>资源的基本单位</li></ul><p>进程中可以包含多个线程，需要记住进程和线程一个是操作系统<strong>分配</strong>资源的基本单位(进程)，一个是操作系统<strong>调度</strong>资源的基本单位(线程)</p><p><strong>协程</strong></p><p>协程可以理解为用户态线程，是更微量级的线程。区别于线程（在内核态调度），协程的调度在用户态进行，不需要切换到内核态，所以不由操作系统参与，由用户自己控制。</p><ul><li>协程有独立的栈空间，但是共享堆空间。</li><li>一个进程上可以跑多个线程，一个线程上可以跑多个协程</li></ul><p><strong>并发与并行</strong></p><p>同时运行就是并行</p><p>不能同时运行交叉执行是并发</p><h3 id="1-2-Goroutine"><a href="#1-2-Goroutine" class="headerlink" title="1.2 Goroutine"></a>1.2 Goroutine</h3><p>一个goroutine栈在其生命周期开始时占用空间很小（一般2KB），并且栈大小可以按需增大和缩小，goroutine的栈大小限制可以达到1GB。Go程序会为main()函数创建一个默认的goroutine，我们称之为主协程，我们后来人为的创建的一些goroutine，都是在这个主goroutine的基础上进行的。</p><p>用recover捕获异常时，只能捕获当前goroutine的panic，不能捕获其他goroutine发生的panic。</p><h3 id="1-3-Channel"><a href="#1-3-Channel" class="headerlink" title="1.3 Channel"></a>1.3 Channel</h3><p>channel保证不同的goroutine之间能够通信</p><p>channel的声明方式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> channel_name <span class="keyword">chan</span> channel_type</span><br><span class="line"><span class="keyword">var</span> channel_name [size]<span class="keyword">chan</span> channel_type  <span class="comment">// 声明一个channel，其容量大小为size</span></span><br></pre></td></tr></table></figure><p>声明之后的管道，并没有进行初始化为其分配空间，其值是nil，我们要使用还要配合make函数来对其初始化，之后才可以在程序中使用该管道。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">channel_name = <span class="built_in">make</span>(<span class="keyword">chan</span> channel_type)</span><br><span class="line">channel_name = <span class="built_in">make</span>(<span class="keyword">chan</span> channel_type, size)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接一步完成</span></span><br><span class="line">channel_name := <span class="built_in">make</span>(<span class="keyword">chan</span> channel_type)</span><br><span class="line">channel_name := <span class="built_in">make</span>(<span class="keyword">chan</span> channel_type, size)  <span class="comment">//创建带有缓存的管道，size为缓存大小</span></span><br></pre></td></tr></table></figure><p>传递数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)         <span class="comment">// 创建一个管道ch</span></span><br><span class="line">ch &lt;- v                      <span class="comment">// 向管道ch中发送数据v.</span></span><br><span class="line">v := &lt;-ch                    <span class="comment">// 从管道中读取数据存储到变量v</span></span><br><span class="line"><span class="built_in">close</span>(ch)                    <span class="comment">// 关闭管道ch 管道用完了，需要对其进行关闭，避免程序一直在等待以及资源的浪费。但是关闭的管道，仍然可以从中接收数据，只是接收到的的数据永远是零值。</span></span><br></pre></td></tr></table></figure><p>我们需要往里面写入零值，用另一个goroutine读取，此时我们就无法区分读取到的是正确的零值还是数据已经读去完了而读取到的零值。</p><p>所以我们一般用以下两种常用的读取方式：</p><p>判定读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v,ok := &lt;-ch     <span class="comment">// 判断句式读取</span></span><br></pre></td></tr></table></figure><p>For range读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;v=%d\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>channel根据其功能又可以分为双向channel和单向channel，双向channel即可发送数据又可接收数据，单向channel要么只能发送数据，要么只能接收数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义单向读channel</span></span><br><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">type</span> RChannel= &lt;-<span class="keyword">chan</span> <span class="type">int</span>    <span class="comment">// 定义类型</span></span><br><span class="line"><span class="keyword">var</span> rec RChannel = ch</span><br><span class="line"><span class="comment">// 定义单向写channel</span></span><br><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">type</span> SChannel = <span class="keyword">chan</span>&lt;- <span class="type">int</span>  <span class="comment">// 定义类型</span></span><br><span class="line"><span class="keyword">var</span> send SChannel = ch</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SChannel = <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line"><span class="keyword">type</span> RChannel = &lt;-<span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)  <span class="comment">//  创建channel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> send SChannel = ch</span><br><span class="line">        fmt.Println(<span class="string">&quot;send: 100&quot;</span>)</span><br><span class="line">        send &lt;- <span class="number">100</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> rec RChannel = ch</span><br><span class="line">        num := &lt;- rec </span><br><span class="line">        fmt.Printf(<span class="string">&quot;receive: %d&quot;</span>, num)</span><br><span class="line">    &#125;()</span><br><span class="line">    time.Sleep(<span class="number">2</span>*time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个channel ch，分别定义两个单向channel类型SChannel 和RChannel ，根据别名类型给ch定义两个别名send和rec，一个只用于发送，一个只用于读取</p><p>Golang中有个重要思想：<strong>不以共享内存来通信，而以通信来共享内存</strong>。说得更直接点，协程之间可以利用Channel来传递数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line">c &lt;- sum <span class="comment">// send sum to c</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line"><span class="comment">//time.Sleep(1 * time.Second)</span></span><br><span class="line"><span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">x, y := &lt;-c, &lt;-c <span class="comment">// receive from c</span></span><br><span class="line"></span><br><span class="line">fmt.Println(x, y, x+y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>channel 又分为两类：有缓冲 channel 和无缓冲 channel</p><p>无缓冲 channel 可以理解为同步模式，即写入一个，如果没有消费者在消费，写入就会阻塞。</p><p>有缓冲 channel 可以理解为异步模式。即写入消息之后，即使还没被消费，只要队列没满，就可继续写入。</p><p>当缓冲队列满了以后，继续往channel里面写数据，就会阻塞，那么利用这个特性，我们可以实现一个goroutine之间的锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(ch <span class="keyword">chan</span> <span class="type">bool</span>, num *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">   ch &lt;- <span class="literal">true</span></span><br><span class="line">   *num = *num + <span class="number">1</span></span><br><span class="line">   &lt;-ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 创建一个size为1的channel</span></span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> add(ch, &amp;num)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   time.Sleep(<span class="number">2</span>)</span><br><span class="line">   fmt.Println(<span class="string">&quot;num 的值：&quot;</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于channel的几点总结</strong></p><ul><li>关闭一个未初始化的 channel 会产生 panic</li><li>channel只能被关闭一次，对同一个channel重复关闭会产生 panic</li><li>向一个已关闭的 channel 发送消息会产生 panic</li><li>从一个已关闭的channel读取消息不会发生panic，会一直读取到零值</li><li>channel可以读端和写端都可有多个goroutine操作，在一端关闭channel的时候，该channel读端的所有goroutine 都会收到channel已关闭的消息</li><li>channel是并发安全的，多个goroutine同时读取channel中的数据，不会产生并发安全问题</li></ul><h3 id="1-4-Sync"><a href="#1-4-Sync" class="headerlink" title="1.4 Sync"></a>1.4 Sync</h3><p><strong>sync.WaitGroup</strong>来实现并发任务的同步以及协程任务等待。</p><p>sync.WaitGroup是一个对象，里面维护者一个计数器，并且通过三个方法来配合使用</p><ul><li>(wg * WaitGroup) Add(delta int)       计数器加delta</li><li>(wg *WaitGroup) Done()                    计数器减1</li><li>(wg *WaitGroup) Wait()                     会阻塞代码的运行，直至计数器减为0。<div class="note warning simple"><p>sync.WaitGroup对象的计数器不能为负数，否则会panic，在使用的过程中，我们需要保证add()的参数值，以及执行完Done()之后计数器大于等于零。</p></div></li></ul><p><strong>sync.Once</strong><br>sync.Once最大的作用就是延迟初始化，对于一个使用sync.Once变量我们并不会在程序启动的时候初始化，而是在第一次用的它的时候才会初始化，并且只初始化这一次，初始化之后驻留在内存里</p><p>与init()的区别</p><blockquote><p>有时候我们使用init()方法进行初始化，init()方法是在其所在的package首次加载时执行的，而sync.Onece可以在代码的任意位置初始化和调用，是在第一次用的它的时候才会初始化。</p></blockquote><p><strong>sync.Lock</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lock sync.Mutex <span class="comment">//互斥锁</span></span><br><span class="line"><span class="keyword">var</span> mr sync.RWMutex <span class="comment">//读写锁</span></span><br></pre></td></tr></table></figure><ol><li>同时只能有一个 goroutine 能够获得写锁定。</li><li>同时可以有任意多个 gorouinte 获得读锁定。</li><li>同时只能存在写锁定或读锁定（读和写互斥）。</li></ol><p>如果将带有锁结构的变量赋值给其他变量，锁的状态会复制。所以直接拷贝锁容易发生死锁问题。</p><p><strong>sync.Map</strong></p><p>go语言内置的Map并不是线程安全的，在多个goroutine同时操作map的时候，会有并发问题</p><p>所以用map可以加锁或者使用sync.Map</p><p>sync.Map 不用初始化就可以使用，同时sync.Map内置了诸如Store、Load、LoadOrStore、Delete、Range等操作方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> m sync.Map</span><br><span class="line">   <span class="comment">// 1. 写入</span></span><br><span class="line">   m.Store(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">   m.Store(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">   <span class="comment">// 2. 读取</span></span><br><span class="line">   age, _ := m.Load(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">   fmt.Println(age.(<span class="type">int</span>))</span><br><span class="line">   <span class="comment">// 3. 遍历</span></span><br><span class="line">   m.Range(<span class="function"><span class="keyword">func</span><span class="params">(key, value <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;key is:%v, val is:%v\n&quot;</span>, key, value)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">// 4. 删除</span></span><br><span class="line">   m.Delete(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">   age, ok := m.Load(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">   fmt.Println(age, ok)</span><br><span class="line">   <span class="comment">// 5. 读取或写入</span></span><br><span class="line">   m.LoadOrStore(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">   name, _ := m.Load(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">   fmt.Println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sync.Atomic</strong></p><p>原子操作就是这一系列的操作在cpu上执行是一个不可分割的整体，显然要么全部执行，要么全部不执行，不会受到其他操作的影响，也就不会存在并发问题。</p><p>使用方式：通常mutex用于保护一段执行逻辑，而atomic主要是对变量进行操作</p><p>底层实现：mutex由操作系统调度器实现，而atomic操作有底层硬件指令支持，保证在cpu上执行不中断。所以atomic的性能也能随cpu的个数增加线性提升</p><h3 id="1-5-Select"><a href="#1-5-Select" class="headerlink" title="1.5 Select"></a>1.5 Select</h3><p>select是go语言层面提供的一种多路复用机制，用于检测当前goroutine连接的多个channel是否有数据准备完毕，可用于读或写</p><h4 id="1-5-1-IO多路复用"><a href="#1-5-1-IO多路复用" class="headerlink" title="1.5.1 IO多路复用"></a>1.5.1 IO多路复用</h4><p>看到select，很自然的会联想到linux提供的io多路复用模型，select、poll、epoll，IO复用主要用于提升程序处理io事件的性能。go语言中的select与linux中的select有一定得区别。</p><p>操作系统中的IO多路复用简单理解就就是用一个或者是少量线程处理多个IO事件。</p><p>传统阻塞IO：对于每一个网络IO事件，操作系统都会起一个线程去处理，在IO事件没准备好的时候，当前线程就会一直阻塞。</p><ul><li>优点：逻辑简单，在阻塞等待期间线程会挂起，不会占用 CPU 资源。</li><li>缺点：每个连接需要独立的线程单独处理，当并发请求量大时为了维护程序，内存、线程切换开销较大</li></ul><p>IO多路复用：一个线程处理多个IO事件</p><ul><li>优点：通过复用一个线程处理了多个IO事件，无需对额外过多的线程维护管理，资源和效率上都获得了提升</li><li>缺点：当连接数较少时效率相比多线程+阻塞 I/O 模型效率较低</li></ul><h4 id="1-5-2-select用法"><a href="#1-5-2-select用法" class="headerlink" title="1.5.2 select用法"></a>1.5.2 select用法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;- channel1:     <span class="comment">// 如果从channel1读取数据成功，执行case语句 </span></span><br><span class="line">          do ...   </span><br><span class="line">        <span class="keyword">case</span> channel2 &lt;- <span class="number">1</span>:   <span class="comment">// 如果向channel2写入数据成功，执行case语句 </span></span><br><span class="line">          do ...          </span><br><span class="line">        <span class="keyword">default</span>:              <span class="comment">// 如果上面都没有成功，进入default处理流程</span></span><br><span class="line">          do ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// go语言自带死锁检测机制，发现当前goroutine永远不会被唤醒，会报死锁错误</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">        &#125; <span class="comment">// 当一个select中什么语句都没有，没有任何case，将会永久阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有default且case无法执行的select永久阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">   ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> &lt;-ch1:</span><br><span class="line">      fmt.Printf(<span class="string">&quot;received from ch1&quot;</span>)</span><br><span class="line">   <span class="keyword">case</span> num := &lt;-ch2:</span><br><span class="line">      fmt.Printf(<span class="string">&quot;num is: %d&quot;</span>, num)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning simple"><p>当多个case都准备好了的时候，会随机选择一个执行</p></div><h3 id="1-6-Context"><a href="#1-6-Context" class="headerlink" title="1.6 Context"></a>1.6 Context</h3><p>contex：上下文，任何与它当前场景有关的信息都可以认为是它的上下文相，可以理解为相当于一个map结构，里面放的各种数据，在这里放进去，在别的地方拿出来。这就是context包。</p><p>作用：</p><ul><li>用于并发控制，控制协程的优雅退出</li><li>上下文的信息传递</li></ul><p>简单来说， context是Go 语言在 1.7 版本中引入的一个标准库的接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">   Deadline() (deadline time.Time, ok <span class="type">bool</span>) <span class="comment">// 设置 context.Context 被取消的时间，即截止时间；</span></span><br><span class="line">   Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; <span class="comment">// 返回一个 Channel，当Context被取消或者到达截止时间，这个 Channel 就会被关闭，表示context结束，多次调用 Done 方法会返回同一个 Channel</span></span><br><span class="line">   Err() <span class="type">error</span> <span class="comment">// 返回一个 Channel，当Context被取消或者到达截止时间，这个 Channel 就会被关闭，表示context结束，多次调用 Done 方法会返回同一个 Channel 被取消，返回 Canceled  被取消，返回 Canceled </span></span><br><span class="line">   Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 从 context.Context 中获取键对应的值，类似于map的get方法，对于同一个context，多次调用 Value 并传入相同的 Key 会返回相同的结果，如果没有对应的key,则返回nil，键值对是通过WithValue方法写入的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>context分为1个接口、4个具体实现、6个函数</p><p>主要有以下两种方式创建根context</p><ul><li><code>context.Backgroud()</code></li><li><code>context.TODO()</code></li></ul><p><code>从源代码分析context.Background</code> 和 <code>context.TODO</code>并没有太多的区别，都是用于创建根context，根context是一个空的context，不具备任何功能。但是一般情况下，如果当前函数没有上下文作为入参，我们都会使用 context.Background创建一个根context 作为起始的上下文向下传递。</p><p>根context在创建之后，不具备任何的功能，为了让context在我们的程序中发挥作用，我们要依靠<code>context</code>包提供的<code>With</code>系列函数来进行派生</p><p>主要有以下几个派生函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span></span> (ctx Context, cancel CancelFunc)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, deadline time.Time)</span></span> (Context, CancelFunc)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(parent Context, timeout time.Duration)</span></span> (Context, CancelFunc)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithValue</span><span class="params">(parent Context, key, val <span class="keyword">interface</span>&#123;&#125;)</span></span> Context</span><br></pre></td></tr></table></figure><p>基于当前context，每个with函数都会创建出一个新的context，这样类似于我们熟悉的树结构，当前context称为父context，派生出的新context称为子context。就像下面的context树结构：</p><p><img src="https://s1.vika.cn/space/2023/04/11/3cee243c6d3b48edb40df8f9cbe5e00b" alt=""></p><p><strong>并发控制</strong></p><p>对于一般的服务器而言，都是一致运行着的，等待接收来自客户端或者浏览器的请求做出响应，思考这样一种场景，后台微服务架构中，一般服务器在收到一个请求之后，如果逻辑复杂，不会在一个goroutine中完成，而是会创建出很多的goroutine共同完成这个请求，就像下面这种情况</p><p><img src="https://s1.vika.cn/space/2023/04/11/0de19f096db64c18ab46bf4f58aeb5c8" alt=""></p><p>有一个请求过来之后，先经过第一次rpc调用，然后再到rpc2，后面创建执行两个rpc，rpc4里又有一次rpc调用rpc5，等所有 rpc 调用成功后，返回结果。假如在整个调用过程中，rpc1发生了错误，如果没有context存在的话，我们还是得等所有的rpc都执行完才能返回结果，这样其实浪费了不少时间，因为一旦出错，我们完全可以直接再rpc1这里就返回结果了，不用等到后续的rpc都执行完。假设我们在rpc1直接返回失败，不等后续的rpc继续执行，那么其实后续的rpc执行就是没有意义的，浪费计算和IO资源而已。再引入context之后，就可以很好的处理这个问题，在不需要子goroutine执行的时候，可以通过context通知子goroutine优雅的关闭。</p><p><strong>context.WithCancel</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span></span> (ctx Context, cancel CancelFunc)</span><br></pre></td></tr></table></figure><p>context.WithCancel 函数是一个取消控制函数，只需要一个context作为参数，能够从 context.Context 中衍生出一个新的子context和取消函数CancelFunc，通过将这个子context传递到新的goroutine中来控制这些goroutine的关闭，一旦我们执行返回的取消函数CancelFunc，当前上下文以及它的子上下文都会被取消，所有的 Goroutine 都会同步收到取消信号。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;context&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">   <span class="keyword">go</span> Watch(ctx, <span class="string">&quot;goroutine1&quot;</span>)</span><br><span class="line">   <span class="keyword">go</span> Watch(ctx, <span class="string">&quot;goroutine2&quot;</span>)</span><br><span class="line"></span><br><span class="line">   time.Sleep(<span class="number">6</span> * time.Second)   <span class="comment">// 让goroutine1和goroutine2执行6s</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;end watching!!!&quot;</span>)</span><br><span class="line">   cancel()  <span class="comment">// 通知goroutine1和goroutine2关闭</span></span><br><span class="line">   time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Watch</span><span class="params">(ctx context.Context, name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">         fmt.Printf(<span class="string">&quot;%s exit!\n&quot;</span>, name) <span class="comment">// 主goroutine调用cancel后，会发送一个信号到ctx.Done()这个channel，这里就会收到信息</span></span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;%s watching...\n&quot;</span>, name)</span><br><span class="line">         time.Sleep(time.Second)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>context.WithDeadline</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, d time.Time)</span></span> (Context, CancelFunc)</span><br></pre></td></tr></table></figure><p>方法有两个参数，第一个参数是一个context，第二个参数是截止时间，同样会返回一个子context和一个取消函数CancelFunc。在使用的时候，没有到截止时间，我们可以通过手动调用CancelFunc来取消子context，控制子goroutine的退出，如果到了截止时间，我们都没有调用CancelFunc，子context的Done()管道也会收到一个取消信号，用来控制子goroutine退出。</p><p><strong>context.WithTimeout</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(parent Context, timeout time.Duration)</span></span> (Context, CancelFunc)</span><br></pre></td></tr></table></figure><p>context.WithTimeout和context.WithDeadline的作用类似，都是用于超时取消子context，只是传递的第二个参数有所不同，context.WithTimeout传递的第二个参数不是具体时间，而是时间长度。</p><p><strong>context.WithValue</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithValue</span><span class="params">(parent Context, key, val <span class="keyword">interface</span>&#123;&#125;)</span></span> Context</span><br></pre></td></tr></table></figure><p>context.WithValue 函数从父context中创建一个子context用于传值，函数参数是父context，key，val键值对。返回一个context。</p><p>项目中这个方法一般用于上下文信息的传递，比如请求唯一id，以及trace_id等，用于链路追踪以及配置透传。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;context&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;name is: %s&quot;</span>, ctx.Value(<span class="string">&quot;name&quot;</span>).(<span class="type">string</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ctx := context.WithValue(context.Background(), <span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">   <span class="keyword">go</span> func1(ctx)</span><br><span class="line">   time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-定时器"><a href="#1-7-定时器" class="headerlink" title="1.7 定时器"></a>1.7 定时器</h3><p>场景：比如到了未来某一时刻，需要某个逻辑或者某个任务执行一次，或者是周期性的的执行多次，有点类似定时任务。这种场景就需要用到定时器，golang中也内置了定时器的实现，timer和ticker。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Timer <span class="keyword">struct</span> &#123;</span><br><span class="line">    C &lt;-<span class="keyword">chan</span> Time</span><br><span class="line">    r runtimeTimer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   timer := time.NewTimer(<span class="number">2</span> * time.Second) <span class="comment">//设置超时时间2s</span></span><br><span class="line">   &lt;-timer.C <span class="comment">// 执行&lt;-timer.C会一直阻塞，知道2s后，程序继续执行。</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;after 2s Time out!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Ticker <span class="keyword">struct</span> &#123;</span><br><span class="line">   C &lt;-<span class="keyword">chan</span> Time <span class="comment">// The channel on which the ticks are delivered.</span></span><br><span class="line">   r runtimeTimer <span class="comment">// 会每隔时间段 d 就向该通道发送当时的时间，根据这个管道消息来触发事件，但是ticker只要定义完成，就从当前时间开始计时，每隔固定时间都会触发，只有关闭Ticker对象才不会继续发送时间消息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Watch</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; &#123;</span><br><span class="line">   ticker := time.NewTicker(<span class="number">1</span> * time.Second)</span><br><span class="line"></span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ticker *time.Ticker)</span></span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> ticker.Stop()</span><br><span class="line">      <span class="keyword">for</span> &#123;</span><br><span class="line">         <span class="keyword">select</span> &#123;</span><br><span class="line">         <span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">            fmt.Println(<span class="string">&quot;watch!!!&quot;</span>)</span><br><span class="line">         <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Ticker Stop!!!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;(ticker)</span><br><span class="line">   <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := Watch()</span><br><span class="line">   time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">   ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">   <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning simple"><p>调用ticker.Stop()只会停止ticker，但并不会关闭ticker.C这个管道，所以我们需要用这个channel来控制watch函数中的goroutine能够退出。</p></div><h3 id="1-8-协程池"><a href="#1-8-协程池" class="headerlink" title="1.8 协程池"></a>1.8 协程池</h3><p>go语言虽然有着高效的GMP调度模型，理论上支持成千上万的goroutine，但是goroutine过多，对调度，gc以及系统内存都会造成压力，这样会使我们的服务性能不升反降。常用做法可以用池化技术，构造一个协程池，把进程中的协程控制在一定的数量，防止系统中goroutine过多，影响服务性能。</p><p>协程池有三个角色Worker，Task，Pool。</p><p>Worker：用于执行任务的goroutine</p><p>Task: 具体的任务</p><p>Pool: 池子</p><p><strong>Task</strong>：有一个函数成员，表示这个task具体的执行逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">    f <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>  <span class="comment">// 具体的执行逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Pool</strong>：有两个成员，num表示池子里的worker的数量，即工作的goroutine的数量，JobCh 表示任务队列用于存放任务，goroutine从这个JobCh 获取任务执行任务列逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> &#123;</span><br><span class="line">   WorkerNum <span class="type">int</span>        <span class="comment">// goroutine数量</span></span><br><span class="line">   JobCh     <span class="keyword">chan</span> *Task <span class="comment">// 用于worker取任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>worker</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p为Pool对象指针</span></span><br><span class="line"><span class="keyword">for</span> task := <span class="keyword">range</span> p.JobCh&#123;</span><br><span class="line">    do ...      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行任务单元，简单理解就是干活的goroutine，这个worker其实只做一件事情，就是不断的从任务队列里面取任务执行，而worker的数量就是协程池里协程的数量，由Pool的参数WorkerNum 指定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">package main</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;fmt&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;time&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">type Task <span class="keyword">struct</span> </span>&#123;</span><br><span class="line"><span class="function">f <span class="title">func</span><span class="params">()</span> error</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">func <span class="title">newTask</span><span class="params">(funcArg func() error)</span> *Task </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Task&#123;f: funcArg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Pool <span class="keyword">struct</span> &#123;</span><br><span class="line">workerNum <span class="type">int</span></span><br><span class="line">jobCh     chan *Task</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="built_in">newPool</span>(workerNum <span class="type">int</span>, taskNum <span class="type">int</span>) *Pool &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Pool&#123;workerNum: workerNum,</span><br><span class="line">jobCh: <span class="built_in">make</span>(chan *Task, taskNum),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span> (p *Pool) <span class="built_in">size</span>() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.workerNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span> (p *Pool) <span class="built_in">worker</span>(i <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> task := range p.jobCh &#123;</span><br><span class="line"><span class="keyword">if</span> err := task.<span class="built_in">f</span>(); err != nil &#123;</span><br><span class="line">fmt.<span class="built_in">Printf</span>(<span class="string">&quot;worker %d handle fail: %v\n&quot;</span>, i, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.<span class="built_in">Printf</span>(<span class="string">&quot;worker %d handle success\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddTask 往协程池里面添加任务</span></span><br><span class="line"><span class="built_in">func</span> (p *Pool) <span class="built_in">AddTask</span>(task *Task) &#123;</span><br><span class="line">p.jobCh &lt;- task</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 协程池跑起来，需要指定数量的worker干活</span></span><br><span class="line"><span class="built_in">func</span> (p *Pool) <span class="built_in">Run</span>() &#123;</span><br><span class="line"><span class="comment">// 这里只创建指定数量的worker来干活</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; p.<span class="built_in">size</span>(); i++ &#123;</span><br><span class="line">go p.<span class="built_in">worker</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p := <span class="built_in">newPool</span>(<span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">p.<span class="built_in">Run</span>()</span><br><span class="line">task := <span class="built_in">newTask</span>(<span class="built_in">func</span>() error &#123;</span><br><span class="line">fmt.<span class="built_in">Printf</span>(<span class="string">&quot;I am Task\n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">p.<span class="built_in">AddTask</span>(task)</span><br><span class="line">&#125;</span><br><span class="line">time.<span class="built_in">Sleep</span>(<span class="number">3</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-原理分析"><a href="#2-原理分析" class="headerlink" title="2. 原理分析"></a>2. 原理分析</h2><h3 id="2-1-程序初始化"><a href="#2-1-程序初始化" class="headerlink" title="2.1 程序初始化"></a>2.1 程序初始化</h3><p><code>Go</code>应用程序的初始化是在单一的<code>goroutine</code>中执行的。对于包这一级别的初始化来说，<strong>在一个包里会先进行包级别变量的初始化。一个包下可以有多个<code>init</code>函数，每个文件也可以有多个<code>init</code>函数，多个<code>init</code>函数按照它们的文件名顺序逐个初始化。</strong>但是程序不可能把所有代码都放在一个包里，通常都是会引入很多包。如果<code>main</code>包引入了<code>pkg1</code>包，<code>pkg1</code>包本身又导入了包<code>pkg2</code>，那么应用程序的初始化会按照什么顺序来执行呢？</p><p><img src="https://s1.vika.cn/space/2023/04/11/615930ad312d4f5ead00d1f1d62e72d6" alt=""></p><p>图的上半部分表示了<code>main</code>包导入了<code>pkg1</code>包，<code>pkg1</code>包又导入了<code>pkg2</code>包这样一个包之间的依赖关系。图的下半部分表示了，这个应用初始化工作的执行时间顺序是从被导入的最深层包开始进行初始化，层层递出最后到<code>main</code>包，每个包内部的初始化程序依然是先执行包变量初始化再进行<code>init</code>函数的执行。</p><p>最先被依赖的包最先被初始化，且初始化的顺序是先初始化包变量，再说初始化init函数。初始化过程总结如下：</p><ul><li>包级别变量的初始化先于包内init函数的执行。</li><li>一个包下可以有多个init函数，每个文件也可以有多个init 函数。</li><li>多个 init 函数按照它们的文件名顺序逐个初始化。</li><li>应用初始化时初始化工作的顺序是，从被导入的最深层包开始进行初始化，层层递出最后到main包。</li><li>不管包被导入多少次，包内的init函数只会执行一次。</li><li>应用在所有初始化工作完成后才会执行main函数。</li></ul><h3 id="2-2-逃逸分析"><a href="#2-2-逃逸分析" class="headerlink" title="2.2 逃逸分析"></a>2.2 逃逸分析</h3><p><strong>什么是逃逸</strong></p><blockquote><p><strong><code>逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</code></strong></p></blockquote><p>函数的运行都是在栈上面运行的，在栈上面声明临时变量，分配内存，函数运行完毕之后，回收内存，每个函数的栈空间都是独立的，其他函数是无法进行访问，但是在某些情况下栈上面的数据需要在函数结束之后还能被访问，这时候就会设计到内存逃逸了，什么是逃逸，就是抓不住</p><p>如果数据从栈上面逃逸，会跑到堆上面，栈上面的数据在函数结束的时候回自动回收，回收代价比较小，栈的内存分配和使用一般只需要两个CPU指令“PUSH”和“RELEASE”，分配和释放，而堆分配内存，则是首先需要找到一块大小合适的内存，之后通过GC回收才能释放，对于这种情况，频繁的使用垃圾回收，则会占用比较大的系统开销，所以尽量分配内存到栈上面，减少gc的压力，提高程序运行速度</p><p><strong>逃逸分析过程</strong><br>Go语言最基本的逃逸分析原则：如果一个函数返回一个对变量的引用，那么它就会发生逃逸。</p><p>在任何情况下，如果一个值被分配到了栈之外的地方，那么一定是到了堆上面。简而概之：编译器会分析代码的特征和代码生命周期，Go中的变量只有在编译器可以证明在函数返回后不会再被引用的，才分配到栈上，其他情况下都是分配到堆上<br>Go语言里面没有一个关键字或者函数可以直接让变量被编译器分配到堆上，相反，编译器是通过分析代码来决定将变量分配到何处。<br>简单来说，<strong>编译器会根据变量是否被外部引用来决定是否逃逸</strong>：<br>如果函数外部没有引用，则优先放到栈中；<br>如果函数外部存在引用，则必定放到堆中；</p><p><strong>指针逃逸</strong><br>我们知道传递指针可以减少底层值的拷贝，可以提高效率，但是如果拷贝的数据量小，由于指针传递会产生逃逸，可能会使用堆，也可能会增加GC的负担，所以传递指针不一定是高效的。</p><p><strong>动态类型逃逸</strong><br>很多函数参数为interface类型。比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintf</span><span class="params">(format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>编译期间很难确定其参数的具体类型，也能产生逃逸。</p><p><strong>逃逸常见情况</strong></p><ol><li>发送指针的指针或包含指针的值发送到 channel 中，由于在编译阶段无法确定其作用域与传递的路径，所以一般都会逃逸到堆上分配。</li><li>slices 中的值是指针的指针或包含指针字段。一个例子是类似[] *string 的类型。这总是导致 slice 的逃逸。即使切片的底层存储数组仍可能位于堆栈上，数据的引用也会转移到堆中。</li><li>slice 由于 append 操作超出其容量，因此会导致 slice 重新分配。这种情况下，由于在编译时 slice 的初始大小的已知情况下，将会在栈上分配。如果 slice 的底层存储必须基于仅在运行时数据进行扩展，则它将分配在堆上。</li><li>调用接口类型的方法。接口类型的方法调用是动态调度 - 实际使用的具体实现只能在运行时确定。考虑一个接口类型为 io.Reader 的变量 r。对 r.Read(b) 的调用将导致 r 的值和字节片b的后续转义并因此分配到堆上。</li><li>尽管能够符合分配到栈的场景，但是其大小不能够在在编译时候确定的情况，也会分配到堆上</li></ol><p><strong>如何避免</strong></p><ol><li>go 中的接口类型的方法调用是动态调度，因此不能够在编译阶段确定，所有类型结构转换成接口的过程会涉及到内存逃逸的情况发生。如果对于性能要求比较高且访问频次比较高的函数调用，应该尽量避免使用接口类型</li><li>由于切片一般都是使用在函数传递的场景下，而且切片在 append 的时候可能会涉及到重新分配内存，如果切片在编译期间的大小不能够确认或者大小超出栈的限制，多数情况下都会分配到堆上</li></ol><p><strong>总结</strong></p><ol><li>堆上动态分配内存比栈上静态分配内存，开销大很多。</li><li>变量分配在栈上需要能在编译期确定它的作用域，否则会分配到堆上。</li><li>Go编译器会在编译期对考察变量的作用域，并作一系列检查，如果它的作用域在运行期间对编译器一直是可知的，那么就会分配到栈上。简单来说，编译器会根据变量是否被外部引用来决定是否逃逸。</li><li>对于Go程序员来说，编译器的这些逃逸分析规则不需要掌握，我们只需通过go build -gcflags ‘-m’命令来观察变量逃逸情况就行了</li><li>不要盲目使用变量的指针作为函数参数，虽然它会减少复制操作。但其实当参数为变量自身的时候，复制是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。</li></ol><h2 id="3-golang数据结构实现原理"><a href="#3-golang数据结构实现原理" class="headerlink" title="3. golang数据结构实现原理"></a>3. golang数据结构实现原理</h2><h3 id="3-1-string"><a href="#3-1-string" class="headerlink" title="3.1 string"></a>3.1 string</h3><ul><li>字符串是所有8 比特字节的集合，但不一定是 UTF-8 编码的文本</li><li>字符串可以为empty，但不能为 <code>nil</code> ，empty字符串就是一个没有任何字符的空串””</li><li>字符串不可以被修改，所以字符串类型的值是不可变的</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> stringStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">   str unsafe.Pointer    <span class="comment">//  指向一个byte类型的切片指针</span></span><br><span class="line">   <span class="built_in">len</span> <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>str指向字符串的首地址</strong></li><li><strong>len表示字符串的长度</strong></li></ul><p>len字段存储的是实际的字节数，而不是字符数，所以对于非单字节编码的字符，其结果可能多于字符个数，比如存储”你好世界”，len的长度是12字节而不是4个字符，一个汉字占3个字节。</p><p>结构定义我们可以发现，其定义中并没有一个表示容量(Cap)的字段，所以意味着字符串类型并不能被扩容，字符换上的写操作包括拼接，追加等等都是通过拷贝来实现的。</p><p>字符串结构是由一个指向byte类型的切片指针和一个表示字节数组长度的整形变量构成，针指向的一个切片才是真正的字符串值。这就比较好理解了，既然字符串的值是一个[] byte 类型的切片，那我们使用下标的方式去修改值的时候，是将一个字符内容赋值给 byte 类型，这是不允许的。</p><p>这样一分析，那么可不可以将字符串转化为字节数组，然后通过下标修改字节数组，再转化回字符串呢，答案是可行的。</p><p>byte 切片转化为string，大致过程分为两步：</p><ol><li><p>新申请切片内存空间，构建内存地址为addr，长度为len</p></li><li><p>构建 string对象，指针地址为addr，len字段赋值为len（string.str = addr；string.len = len；）</p></li><li><p>将原切片中数据拷贝到新申请的string中指针指向的内存空间</p><p><img src="https://s1.vika.cn/space/2023/04/12/14a9834fec804038b6d662bb98284b2e" alt=""></p></li></ol><p>string转化为byte数组同样简单，大致分为两步：</p><ol><li>新申请切片内存空间</li><li>将string中指针执行内存区域的内容拷贝到新切片</li></ol><p><img src="https://s1.vika.cn/space/2023/04/12/8bc2d0a93b8243b2a9b46b61d6246dc0" alt=""></p><p>很多场景中会用到[]byte转化为string，但是并不是每一次转化，都会想上述过程一样，发生一次内存拷贝。在什么情况下不会发生拷贝呢？</p><p>转化为的字符串被用于临时场景</p><p>举几个例子：</p><ol><li>字符串比较：string(ss) == “Hello”</li><li>字符串拼接：“Hello” + sting(ss) + “world”</li><li>用作查找，比如map的key，val := map[string(ss)]</li></ol><p>这几种情况下，[]byte转化成的字符串并不会被后面程序用到，只是在当前场景下被临时用到，所以并不会拷贝内存，而是直接返回一个 string，这个 string 的指针 (string.str) 指向切片的内存。</p><p><strong>字符串拼接</strong></p><p>采用testing包下benchmark测试其性能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;bytes&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;strings&quot;</span></span><br><span class="line">   <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">   str = <span class="string">&quot;efwaefnurgnrehgepbnrebewnbgblasjfnowbgwooihfunw&quot;</span></span><br><span class="line">   cnt = <span class="number">10000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// BenchmarkPlusConcat + 拼接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkPlusConcat</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">      ss := <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">         ss += str</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BenchmarkSprintfConcat sprintf拼接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSprintfConcat</span><span class="params">(b *testing.B)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">      ss := <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">         ss = fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, ss, str)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BenchmarkBuilderConcat stringbuilder 拼接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBuilderConcat</span><span class="params">(b *testing.B)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">      <span class="keyword">var</span> builder strings.Builder</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">         builder.WriteString(str)</span><br><span class="line">      &#125;</span><br><span class="line">      builder.String()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BenchmarkBufferConcat stringbuilder 拼接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBufferConcat</span><span class="params">(b *testing.B)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">      buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">         buf.WriteString(str)</span><br><span class="line">      &#125;</span><br><span class="line">      buf.String()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BenchmarkAppendConcat append 拼接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAppendConcat</span><span class="params">(b *testing.B)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">      buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cnt; i++ &#123;</span><br><span class="line">         buf = <span class="built_in">append</span>(buf, str...)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td><code>+</code> 拼接 2 个字符串时，会生成一个新的字符串，开辟一段新的内存空间，新空间的大小是原来两个字符串的大小之和，所以没拼接一次买就要开辟一段空间，性能很差</td></tr><tr><td>Sprintf</td><td>Sprintf 会从临时对象池中获取一个 对象，然后格式化操作，最后转化为string，释放对象，实现很复杂，性能也很差</td></tr><tr><td>strings.Builder</td><td>底层存储使用[] byte，转化为字符串时可复用，每次分配内存的时候，支持预分配内存并且自动扩容，所以总体来说，开辟内存的次数就少，性能相对就高</td></tr><tr><td>bytes.Buffer</td><td>底层存储使用[] byte，转化为字符串时不可复用，底层实现和strings.Builder差不多，性能比strings.Builder略差一点，区别是<code>bytes.Buffer</code>转化为字符串时重新申请了一块空间，存放生成的字符串变量，而 <code>strings.Builder</code> 直接将底层的 <code>[]byte</code> 转换成了字符串类型返回了回来，</td></tr><tr><td>append</td><td>直接使用[]byte扩容机制，可复用，支持预分配内存和自动扩容，性能最好</td></tr></tbody></table></div><h3 id="3-2-slice"><a href="#3-2-slice" class="headerlink" title="3.2 slice"></a>3.2 slice</h3><p>go语言中slice可以理解为动态数组，区别于数组，其长度不是固定的，在使用时，我们不必担心其容量大小不够。当需要往切片追加元素时，如果切片容量大小不足，会自动扩容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">   array unsafe.Pointer</span><br><span class="line">   <span class="built_in">len</span>   <span class="type">int</span></span><br><span class="line">   <span class="built_in">cap</span>   <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>array：是一个指针变量，指向一块连续的内存空间，即底层数组结构</strong></li><li><strong>len：当前切片中数据长度</strong></li><li><strong>cap：切片的容量</strong></li></ul><div class="note warning simple"><p>cap是大于等于len的，当cap大于len的时候，说明切片未满，它们之间的元素并不属于当前切片。</p></div><p>切片的初始化有三种方式：</p><ol><li>通过已有切片初始化</li><li>通过字面量初始化</li><li>通过make关键字初始化</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slice := slice1[<span class="number">1</span>:<span class="number">5</span>]          <span class="comment">// 从切片slice1初始化一个新的切片slice，slice的元素为slice1中的下标为1到下标为4的元素</span></span><br><span class="line">slice := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>&#123;&#125;, <span class="number">3</span>)     <span class="comment">// 第一个参数为类型，第二个参数为len</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>&#123;&#125;, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment">// 第一个参数为类型，第二个参数为len，第三个参数为cap</span></span><br></pre></td></tr></table></figure><p>注意这里两种make创建的方式，当传递了容量参数时，若传递的参数比前面len的参数值大，那么实际创建的切片大小是多余元素个数的，说明预留了空间。如果不指定cap，则默认创建cap和len大小相同的切片。</p><div class="note warning simple"><p>被截取出来的新切片底层仍然指向原切片的底层数据，复制后的切片也和原切片指向同一块内存区域，会互相影响（可以通过copy函数解决）。但是数组的复制却不会出现这种情况，说明数组的复制会在底层会连同复制一块内存区域，与原数组互不影响</p></div><p>slice是动态数组，大小不固定，可以往后追加元素，追加的方法是通过append函数来实现，看一个有意思的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   arr1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">   arr1 = <span class="built_in">append</span>(arr1, <span class="number">1</span>)</span><br><span class="line">   arr2 := <span class="built_in">append</span>(arr1, <span class="number">2</span>)</span><br><span class="line">   arr3 := <span class="built_in">append</span>(arr1, <span class="number">3</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;arr1=%v, addr1=%p\n&quot;</span>, arr1, &amp;arr1)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;arr2=%v, addr2=%p\n&quot;</span>, arr2, &amp;arr2)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;arr3=%v, addr3=%p\n&quot;</span>, arr3, &amp;arr3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr1=[<span class="number">1</span>], addr1=<span class="number">0xc000098060</span></span><br><span class="line">arr2=[<span class="number">1</span> <span class="number">3</span>], addr2=<span class="number">0xc000098078</span></span><br><span class="line">arr3=[<span class="number">1</span> <span class="number">3</span>], addr3=<span class="number">0xc000098090</span></span><br></pre></td></tr></table></figure><p>这里为什么arr2和arr3的结果是一样都是<code>[1,3]</code>呢，为什么arr2不是<code>[1,2]</code>？</p><p>原理是这样的，在前面的分析中我们知道了切片的结构定义，<code>type slice struct &#123;...&#125;</code>, Go 语言内置函数 append 参数是值传递，所以 append 函数在追加新元素到切片时，append 会生成一个新切片，并且将原切片的值拷贝到新切片。注意这里的新切片并不是指底层的数据结构，而是指<code>slice</code>这个结构体。所以我们<strong>每调用一次append函数，都会产生一个新的slice结构体，但是他们底层都指向同一块连续的内存区域</strong>，即共享底层数组，所以执行<code>arr3 := append(arr1, 3)</code>将<code>arr2</code>底层的数据<code>1，2</code>给覆盖了。</p><p>slice扩容</p><p><img src="https://s1.vika.cn/space/2023/04/12/c7a9f7a6586b47d5b2506e46f2908108" alt=""></p><p>扩容公示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newcap = oldcap+(oldcap+<span class="number">3</span>*<span class="number">256</span>)/<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="3-3-map"><a href="#3-3-map" class="headerlink" title="3.3 map"></a>3.3 map</h3><p>map就是一个key/value键值对集合，可以根据key在o(1)时间内取到value。</p><p>在go语言中，map的底层采用hash表，用变种拉链法来解决hash冲突问题。</p><p>go语言中的map其实就是一个指向<code>hmap</code>的指针，占用8个字节。所以map底层结构就是<code>hmap</code>，<code>hmap</code>包含多个结构为<code>bmap</code>的<code>bucket</code>数组，<code>bucket</code>底层采用链表结构讲这些<code>bmap</code>连接起来，处理冲突其实是采用了优化的拉链法，链表中每个节点存储的不是一个键值对，而是8个键值对。其整体的结构如下图：</p><p><img src="C:\Users\hyz\AppData\Roaming\Typora\typora-user-images\image-20230412104120305.png" alt="image-20230412104120305"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A header for a Go map.</span></span><br><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.</span></span><br><span class="line">   <span class="comment">// Make sure this stays in sync with the compiler&#x27;s definition.</span></span><br><span class="line">   count     <span class="type">int</span> <span class="comment">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class="line">   flags     <span class="type">uint8</span></span><br><span class="line">   B         <span class="type">uint8</span>  <span class="comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class="line">   noverflow <span class="type">uint16</span> <span class="comment">// approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class="line">   hash0     <span class="type">uint32</span> <span class="comment">// hash seed</span></span><br><span class="line"></span><br><span class="line">   buckets    unsafe.Pointer <span class="comment">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class="line">   oldbuckets unsafe.Pointer <span class="comment">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class="line">   nevacuate  <span class="type">uintptr</span>        <span class="comment">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class="line"></span><br><span class="line">   extra *mapextra <span class="comment">// optional fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>字段</th><th>释义</th></tr></thead><tbody><tr><td>count</td><td>map中元素个数，对应于len(map)的值</td></tr><tr><td>flags</td><td>状态标志位，标记map的一些状态</td></tr><tr><td>B</td><td>桶数以2为底的对数，即B=log_2(len(buckets))，比如B=3，那么桶数为2^3=8</td></tr><tr><td>noverflow</td><td>溢出桶数量近似值</td></tr><tr><td>hash0</td><td>哈希种子</td></tr><tr><td>buckets</td><td>指向buckets数组的指针，buckets数组的元素为bmap，如果数组元素个数为0，其值为nil</td></tr><tr><td>oldbuckets</td><td>是一个指向buckets数组的指针，在扩容时，oldbuckets 指向老的buckets数组(大小为新buckets数组的一半)，非扩容时，oldbuckets 为空</td></tr><tr><td>nevacuate</td><td>表示扩容进度的一个计数器，小于该值的桶已经完成迁移</td></tr><tr><td>extra</td><td>指向mapextra 结构的指针，mapextra 存储map中的溢出桶</td></tr></tbody></table></div><p>mapextra 结构定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mapextra holds fields that are not present on all maps.</span></span><br><span class="line"><span class="keyword">type</span> mapextra <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">// If both key and elem do not contain pointers and are inline, then we mark bucket</span></span><br><span class="line">   <span class="comment">// type as containing no pointers. This avoids scanning such maps.</span></span><br><span class="line">   <span class="comment">// However, bmap.overflow is a pointer. In order to keep overflow buckets</span></span><br><span class="line">   <span class="comment">// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.</span></span><br><span class="line">   <span class="comment">// overflow and oldoverflow are only used if key and elem do not contain pointers.</span></span><br><span class="line">   <span class="comment">// overflow contains overflow buckets for hmap.buckets.</span></span><br><span class="line">   <span class="comment">// oldoverflow contains overflow buckets for hmap.oldbuckets.</span></span><br><span class="line">   <span class="comment">// The indirection allows to store a pointer to the slice in hiter.</span></span><br><span class="line">   overflow    *[]*bmap</span><br><span class="line">   oldoverflow *[]*bmap</span><br><span class="line"></span><br><span class="line">   <span class="comment">// nextOverflow holds a pointer to a free overflow bucket.</span></span><br><span class="line">   nextOverflow *bmap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>字段</th><th>释义</th></tr></thead><tbody><tr><td>overflow</td><td>溢出桶链表地址</td></tr><tr><td>oldoverflow</td><td>老的溢出桶链表地址</td></tr><tr><td>nextOverflow</td><td>下一个空闲溢出桶地址</td></tr></tbody></table></div><p><code>hmap</code>中真正用于存储数据的是<code>buckets</code>指向的这个<code>bmap</code>(桶)数组，每一个 <code>bmap</code> 都能存储 8 个键值对，当map中的数据过多，<code>bmap</code>数组存不下的时候就会存储到extra指向的溢出bucket(桶)里面，并且这两种桶在内存里面是连续的。</p><p>下面看一下bmap的结构定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    topbits  [<span class="number">8</span>]<span class="type">uint8</span></span><br><span class="line">    keys     [<span class="number">8</span>]keytype</span><br><span class="line">    values   [<span class="number">8</span>]valuetype</span><br><span class="line">    pad      <span class="type">uintptr</span></span><br><span class="line">    overflow <span class="type">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>字段</th><th>释义</th></tr></thead><tbody><tr><td>topbits</td><td>存储了bmap里8个key/value键值对的每个key根据哈希函数计算出的hash值的高 8 位</td></tr><tr><td>keys</td><td>存储了bmap里8个key/value键值对的key</td></tr><tr><td>values</td><td>存储了bmap里8个key/value键值对的value</td></tr><tr><td>overflow</td><td>指向溢出桶的指针</td></tr></tbody></table></div><p>再解释一下这个<code>tophash</code>，go语言的<code>map</code>会根据每一个key计算出一个<code>hash</code>值，有意思的是，对这个<code>hash</code>值的使用，go语言并不是一次性使用的，而是分开使用的，在使用中，把求得的这个<code>hash</code>值按照用途一分为二：高位和低位</p><p><img src="C:\Users\hyz\AppData\Roaming\Typora\typora-user-images\image-20230412104343061.png" alt="image-20230412104343061"></p><p>假设我们对一个<code>key</code>做<code>hash</code>计算得到了一个hash值如图所示，蓝色就是这个hash值的高8位，红色就是这个hash值的低8位。而每个bmap中其实存储的就是8个这个蓝色的数字。bmap显示存储了8个<code>tohash</code>值，然后存储了8个键值对，注意，这8个键值对并不是按照<code>key/value</code>这样<code>key</code>和<code>value</code>放在一起存储的，而是先连续存完8个<code>key</code>，之后再连续存储8个<code>value</code>这样，当键值对不够8个时，对应位置就留空。这样存储的好处是可以消除字节对齐带来的空间浪费。</p><p><strong>map的访问原理</strong></p><p>对map的访问有两种方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v     := <span class="keyword">map</span>[key]    <span class="comment">// 当map中没有对应的key时，会返回value对应类型的零值</span></span><br><span class="line">v, ok := <span class="keyword">map</span>[key]    <span class="comment">// 当map中没有对应的key时，除了会返回value对应类型的零值,还会返回一个值存不存在的布尔值</span></span><br></pre></td></tr></table></figure><p>虽然这两种方法在返回值上很接近，后者只是多出了一个key存不存在的布尔值，但是在运行时调用的方法却不一样。</p><p>对于<code>v:=map[key]</code>这种访问方式，在运行时其实时调用的<code>runtime.mapaccess1</code>方法，源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mapaccess1 returns a pointer to h[key].  Never returns nil, instead</span></span><br><span class="line"><span class="comment">// it will return a reference to the zero object for the elem type if</span></span><br><span class="line"><span class="comment">// the key is not in the map.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> The returned pointer may keep the whole map live, so don&#x27;t</span></span><br><span class="line"><span class="comment">// hold onto it for very long.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapaccess1</span><span class="params">(t *maptype, h *hmap, key unsafe.Pointer)</span></span> unsafe.Pointer &#123;</span><br><span class="line">   <span class="keyword">if</span> raceenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">      callerpc := getcallerpc()</span><br><span class="line">      pc := abi.FuncPCABIInternal(mapaccess1)</span><br><span class="line">      racereadpc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">      raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> msanenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">      msanread(key, t.key.size)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> asanenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">      asanread(key, t.key.size)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> h == <span class="literal">nil</span> || h.count == <span class="number">0</span> &#123;  <span class="comment">// hmap为空或者没有数据</span></span><br><span class="line">      <span class="keyword">if</span> t.hashMightPanic() &#123;</span><br><span class="line">         t.hasher(key, <span class="number">0</span>) <span class="comment">// see issue 23734</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="number">0</span>])   <span class="comment">// 返回零值</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// map正在被写操作，不允许读取，会有并发问题，发生panic</span></span><br><span class="line">   <span class="keyword">if</span> h.flags&amp;hashWriting != <span class="number">0</span> &#123;</span><br><span class="line">      throw(<span class="string">&quot;concurrent map read and map write&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   hash := t.hasher(key, <span class="type">uintptr</span>(h.hash0))   <span class="comment">// 根据key和hash种子计算出hash值</span></span><br><span class="line">   m := bucketMask(h.B)    <span class="comment">// 根据B计算除mask</span></span><br><span class="line">   b := (*bmap)(add(h.buckets, (hash&amp;m)*<span class="type">uintptr</span>(t.bucketsize)))  <span class="comment">// 根据hash的低B位计算出key在哪个bucket中，找到对应的bucket</span></span><br><span class="line">   <span class="keyword">if</span> c := h.oldbuckets; c != <span class="literal">nil</span> &#123;    <span class="comment">//  在扩容</span></span><br><span class="line">      <span class="keyword">if</span> !h.sameSizeGrow() &#123;  <span class="comment">// 不是等量扩容，说明是双倍扩容，使用旧桶的掩码查找</span></span><br><span class="line">         <span class="comment">// There used to be half as many buckets; mask down one more power of two.</span></span><br><span class="line">         m &gt;&gt;= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      oldb := (*bmap)(add(c, (hash&amp;m)*<span class="type">uintptr</span>(t.bucketsize))) <span class="comment">// 根据掩码和hash值找到这个key对应的桶</span></span><br><span class="line">      <span class="keyword">if</span> !evacuated(oldb) &#123;  <span class="comment">// 根据tophash[0]的状态为来判断当前桶是否还没有被迁移，还在旧桶中</span></span><br><span class="line">         b = oldb</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   top := tophash(hash)  <span class="comment">// 根据hash值计算出tophash</span></span><br><span class="line">bucketloop:    <span class="comment">// 遍历当前桶和其指向的溢出桶</span></span><br><span class="line">   <span class="keyword">for</span> ; b != <span class="literal">nil</span>; b = b.overflow(t) &#123;</span><br><span class="line">      <span class="keyword">for</span> i := <span class="type">uintptr</span>(<span class="number">0</span>); i &lt; bucketCnt; i++ &#123;  <span class="comment">// 遍历桶内的8个槽位</span></span><br><span class="line">         <span class="comment">// 该槽位的tophash和当前key的tophash不相等，判断该槽位的tophash状态位</span></span><br><span class="line">         <span class="comment">// 若状态位是&quot;后继空状态&quot;，则说明后继没有数据了，可以提前退出发，返回零值，否则就继续遍历下一个槽位</span></span><br><span class="line">         <span class="keyword">if</span> b.tophash[i] != top &#123;</span><br><span class="line">            <span class="keyword">if</span> b.tophash[i] == emptyRest &#123;</span><br><span class="line">               <span class="keyword">break</span> bucketloop</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 该槽位的tophash和当前key的tophash相等</span></span><br><span class="line">         k := add(unsafe.Pointer(b), dataOffset+i*<span class="type">uintptr</span>(t.keysize))</span><br><span class="line">         <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">            k = *((*unsafe.Pointer)(k))</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 继续判断当前槽位的对应的key于当前key是否相同了相同就根据指针偏移查找到对应的value返回，不相同就继续便利下一个槽位</span></span><br><span class="line">         <span class="keyword">if</span> t.key.equal(key, k) &#123;</span><br><span class="line">            e := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="type">uintptr</span>(t.keysize)+i*<span class="type">uintptr</span>(t.elemsize))</span><br><span class="line">            <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">               e = *((*unsafe.Pointer)(e))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\hyz\AppData\Roaming\Typora\typora-user-images\image-20230412110401761.png" alt="image-20230412110401761"></p><ol><li>判断map是否为空或者无数据，若为空或者无数据返回对应的空值</li><li>map写检测，如果正处于写状态，表示此时不能进行读取，报panic</li><li>计算出hash值和掩码</li><li>判断当前map是否处于扩容状态，如果在扩容执行下面步骤：<ol><li>根据状态位算判断当前桶是否被迁移</li><li>被迁移，在新桶中查找</li><li>未被迁移，在旧桶中查找</li><li>根据掩码找到的位置</li></ol></li><li>依次遍历桶以及溢出桶来查找key<ol><li>遍历桶内的8个槽位</li><li>比较该槽位的tophash和当前key的tophash是否相等<ul><li>相同，继续比较key是否相同，相同则直接返回对应value</li><li>不相同，查看这个槽位的状态位是否为”后继空状态”<ul><li>是，key在以后的槽中也没有，这个key不存在，直接返回零值</li><li>否，遍历下一个槽位</li></ul></li></ul></li></ol></li><li>当前桶没有找到，则遍历溢出桶，用同样的方式查找</li></ol><p>map的赋值操作在运行时，其实是调用了runtime.mapassign函数，源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapassign</span><span class="params">(t *maptype, h *hmap, key unsafe.Pointer)</span></span> unsafe.Pointer &#123;</span><br><span class="line">   <span class="keyword">if</span> h == <span class="literal">nil</span> &#123;    <span class="comment">// map为空，不可写，直接返回</span></span><br><span class="line">      <span class="built_in">panic</span>(plainError(<span class="string">&quot;assignment to entry in nil map&quot;</span>))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> raceenabled &#123;  </span><br><span class="line">      callerpc := getcallerpc()</span><br><span class="line">      pc := abi.FuncPCABIInternal(mapassign)</span><br><span class="line">      racewritepc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">      raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">      msanread(key, t.key.size)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> asanenabled &#123;</span><br><span class="line">      asanread(key, t.key.size)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> h.flags&amp;hashWriting != <span class="number">0</span> &#123;   <span class="comment">// 并发问题，map正在被写，panic</span></span><br><span class="line">      throw(<span class="string">&quot;concurrent map writes&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   hash := t.hasher(key, <span class="type">uintptr</span>(h.hash0))  <span class="comment">// 根据key和hash种子计算hash值</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Set hashWriting after calling t.hasher, since t.hasher may panic,</span></span><br><span class="line">   <span class="comment">// in which case we have not actually done a write.</span></span><br><span class="line">   h.flags ^= hashWriting   <span class="comment">// 将map的状态置为写</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> h.buckets == <span class="literal">nil</span> &#123;  <span class="comment">// 如果正常的桶数组为空，初始化桶数组</span></span><br><span class="line">      h.buckets = newobject(t.bucket) <span class="comment">// newarray(t.bucket, 1)</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">again:</span><br><span class="line">   bucket := hash &amp; bucketMask(h.B)  <span class="comment">// 根据hash值找到桶的位置</span></span><br><span class="line">   <span class="keyword">if</span> h.growing() &#123;  <span class="comment">// map正在扩容，将自己要使用的通的数量迁移到新桶</span></span><br><span class="line">      growWork(t, h, bucket)</span><br><span class="line">   &#125;</span><br><span class="line">   b := (*bmap)(add(h.buckets, bucket*<span class="type">uintptr</span>(t.bucketsize))) <span class="comment">// 跟访问时一样，这一步是获得目标桶指针，如果发生了扩容，则这个桶指针是新桶指针</span></span><br><span class="line">   top := tophash(hash)  <span class="comment">// 计算tophash</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> inserti *<span class="type">uint8</span>                 <span class="comment">// 待赋值的tophash指针</span></span><br><span class="line">   <span class="keyword">var</span> insertk unsafe.Pointer         <span class="comment">// 待赋值的key指针</span></span><br><span class="line">   <span class="keyword">var</span> elem unsafe.Pointer            <span class="comment">// 待赋值的value指针</span></span><br><span class="line">bucketloop:    <span class="comment">// 循环遍历map中是否已经存在这个key</span></span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i := <span class="type">uintptr</span>(<span class="number">0</span>); i &lt; bucketCnt; i++ &#123;   <span class="comment">// 遍历一个桶中的8个槽位</span></span><br><span class="line">         <span class="keyword">if</span> b.tophash[i] != top &#123;   <span class="comment">// 槽位tophash与目标tophash不相等</span></span><br><span class="line">            <span class="comment">// 判断该槽位的tophash是否为空，如果该槽位的tophash为空说明该槽位可能就是我们要找的插入目标键值对的位置</span></span><br><span class="line">            <span class="keyword">if</span> isEmpty(b.tophash[i]) &amp;&amp; inserti == <span class="literal">nil</span> &#123;</span><br><span class="line">               inserti = &amp;b.tophash[i]</span><br><span class="line">               insertk = add(unsafe.Pointer(b), dataOffset+i*<span class="type">uintptr</span>(t.keysize))</span><br><span class="line">               elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="type">uintptr</span>(t.keysize)+i*<span class="type">uintptr</span>(t.elemsize))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果该槽位的态位为“后继空状态”，说明key之前没有被插入过，这个位置就是真实的插入位置，找到了，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> b.tophash[i] == emptyRest &#123;</span><br><span class="line">               <span class="keyword">break</span> bucketloop</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找的槽位不满足，遍历下一个槽位</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 槽位的tophash与目标tophash相同，接着获取该槽位的key进行对比</span></span><br><span class="line">         k := add(unsafe.Pointer(b), dataOffset+i*<span class="type">uintptr</span>(t.keysize))</span><br><span class="line">         <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">            k = *((*unsafe.Pointer)(k))</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// tophash相同，但是key不同，继续遍历下一个槽</span></span><br><span class="line">         <span class="keyword">if</span> !t.key.equal(key, k) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// already have a mapping for key. Update it.</span></span><br><span class="line">         <span class="comment">// 找到Key了,更新这个槽位中的value为新的value</span></span><br><span class="line">         <span class="keyword">if</span> t.needkeyupdate() &#123;</span><br><span class="line">            typedmemmove(t.key, k, key)</span><br><span class="line">         &#125;</span><br><span class="line">         elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="type">uintptr</span>(t.keysize)+i*<span class="type">uintptr</span>(t.elemsize))</span><br><span class="line">         <span class="keyword">goto</span> done   <span class="comment">// 跳到结尾</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 遍历下一个溢出桶</span></span><br><span class="line">      ovf := b.overflow(t)</span><br><span class="line">      <span class="keyword">if</span> ovf == <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      b = ovf</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 走到这里，说明map中没有待赋值的key，需要新增键值对key/value</span></span><br><span class="line">   <span class="comment">// 判断是否满足扩容条件</span></span><br><span class="line">   <span class="comment">// 如果满足，先做好扩容准备，返回again再检查一次</span></span><br><span class="line">   <span class="keyword">if</span> !h.growing() &amp;&amp; (overLoadFactor(h.count+<span class="number">1</span>, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) &#123;</span><br><span class="line">      hashGrow(t, h)</span><br><span class="line">      <span class="keyword">goto</span> again <span class="comment">// Growing the table invalidates everything, so try again</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 到这一步，map中既没有找到key，根据这个key找到的桶及其这个桶的溢出桶中没有空的槽位了，要申请一个新的溢出桶</span></span><br><span class="line">   <span class="keyword">if</span> inserti == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// The current bucket and all the overflow buckets connected to it are full, allocate a new one.</span></span><br><span class="line">      newb := h.newoverflow(t, b) <span class="comment">// 申请一个新的溢出桶,下面三个操作将inserti，insertk，elem全部指向新的溢出桶的第一个槽</span></span><br><span class="line">      inserti = &amp;newb.tophash[<span class="number">0</span>]   </span><br><span class="line">      insertk = add(unsafe.Pointer(newb), dataOffset)</span><br><span class="line">      elem = add(insertk, bucketCnt*<span class="type">uintptr</span>(t.keysize))</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// store new key/elem at insert position</span></span><br><span class="line">   <span class="comment">// 在插入的位置存储key/value键值对</span></span><br><span class="line">   <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">      kmem := newobject(t.key)</span><br><span class="line">      *(*unsafe.Pointer)(insertk) = kmem</span><br><span class="line">      insertk = kmem</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">      vmem := newobject(t.elem)</span><br><span class="line">      *(*unsafe.Pointer)(elem) = vmem</span><br><span class="line">   &#125;</span><br><span class="line">   typedmemmove(t.key, insertk, key)</span><br><span class="line">   *inserti = top</span><br><span class="line">   h.count++  <span class="comment">// map元素数量+1</span></span><br><span class="line"></span><br><span class="line">done:   <span class="comment">// 收尾工作</span></span><br><span class="line">   <span class="keyword">if</span> h.flags&amp;hashWriting == <span class="number">0</span> &#123;  <span class="comment">// 再次判断map是否正在被写入，这里应该是正在被写入，如果得到非，说明状态被改了，发生了并发写，报panic，相当于乐观锁</span></span><br><span class="line">      throw(<span class="string">&quot;concurrent map writes&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   h.flags &amp;^= hashWriting  <span class="comment">// 清除map的写状态</span></span><br><span class="line">   <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">      elem = *((*unsafe.Pointer)(elem))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致流程：</p><ol><li>map写检测，如果正处于写状态，表示此时不能进行读取，报panic</li><li>计算出hash值，将map置为写状态</li><li>判断桶数组是否为空，若为空，初始化桶数组</li><li>目标桶查找<ol><li>根据hash值找到桶的位置</li><li>判断该当前是否处于扩容：<ol><li>若正在扩容：迁移这个桶，并且还另外帮忙多迁移一个桶以及它的溢出桶</li></ol></li><li>获取目标桶的指针，计算出tophash，开始后面的key查找过程</li></ol></li><li>key查找<ol><li>遍历桶和它的溢出桶的每个槽位，按下述方式查找</li><li>判断槽位的tophash和目标tophash<ol><li>不相等<ol><li>槽位tophash为空，标记这个位置为侯选位置</li><li>槽位tophash的标志位为“后继空状态”，说明这个key之前没有被插入过，插入key/value</li><li>tophash标志位不为空，说明存储着其他key，说明当前槽的tophash不符合，继续遍历下一个槽</li></ol></li><li>相等<ol><li>判断当前槽位的key与目标key是否相等<ol><li>不相等，继续遍历下一个槽位</li><li>相等，找到了目标key的位置，原来已存在键值对，则修改key对应的value，然后执行收尾程</li></ol></li></ol></li></ol></li></ol></li><li>key插入<ol><li>若map中既没有找到key，且根据这个key找到的桶及其这个桶的溢出桶中没有空的槽位了，要申请一个新的溢出桶，在新申请的桶里插入</li><li>否则在找到的位置插入</li></ol></li><li>收尾程序<ol><li>再次判断map的写状态</li><li>清除map的写状态</li></ol></li></ol><p>这里需要注意一点：申请一个新的溢出桶的时候并不会一开始就创建一个溢出桶，因为map在初始化的时候会提前创建好一些溢出桶存储在extra*mapextra字段，样当出现溢出现象时候，这些下溢出桶会优先被使用，只有预分配的溢出桶使用完了，才会新建溢出桶。</p><p><strong>map的扩容</strong></p><p>可以看到map会在两种情况下触发扩容：</p><ul><li><strong>map的负载因子已经超过 6.5 </strong>  双倍扩容</li><li><strong>溢出桶的数量过多</strong>   等量扩容(一般认为溢出桶数量接近数组同数量时)</li></ul><p><strong>负载因子 = 哈希表中的元素数量 / 桶的数量</strong></p><p><strong>为什么负载因子是6.5？</strong></p><p>源码里对负载因子的定义是6.5，是经过测试后取出的一个比较合理的值，</p><p>每个 bucket 有 8 个空位，假设map里所有的数组桶都装满元素，没有一个数组桶有溢出桶，那么这时的负载因子刚好是8。而负载因子是6.5的时候，说明数组同快要用完了，存在溢出的情况下，查找一个key很可能要去遍历溢出桶，会造成查找性能下降，所以有必要扩容了</p><p><strong>溢出桶的数量过多？</strong></p><p>可以想象一下这种情况，先往一个map插入很多元素，然后再删除很多元素？在插入很多元素。会造成什么问题？</p><p>由于插入了很多元素，在不是完全理想的情况下，肯定会创建一些溢出桶，但是，又由于没有达到负载因子的临界值，所以不会触发扩容，在删除很多元素，这个时候负载因子又会减小，再插入很多元素，会继续创建更多的溢出桶，导致查找元素的时候要去遍历很差过的溢出桶链表，性能下降，所以在这种情况下要进行扩容，新建一个桶数组，把原来的数据拷贝到里面，这样数据排列更紧密，查找性能更快。</p><p><strong>扩容过程</strong></p><p>扩容过程中大概需要用到两个函数，<strong>hashGrow()和growWork()。</strong></p><p>扩容函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hashGrow</span><span class="params">(t *maptype, h *hmap)</span></span> &#123;</span><br><span class="line">   <span class="comment">// If we&#x27;ve hit the load factor, get bigger.</span></span><br><span class="line">   <span class="comment">// Otherwise, there are too many overflow buckets,</span></span><br><span class="line">   <span class="comment">// so keep the same number of buckets and &quot;grow&quot; laterally.</span></span><br><span class="line">   bigger := <span class="type">uint8</span>(<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">if</span> !overLoadFactor(h.count+<span class="number">1</span>, h.B) &#123;</span><br><span class="line">      bigger = <span class="number">0</span></span><br><span class="line">      h.flags |= sameSizeGrow</span><br><span class="line">   &#125;</span><br><span class="line">   oldbuckets := h.buckets</span><br><span class="line">   newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">   flags := h.flags &amp;^ (iterator | oldIterator)</span><br><span class="line">   <span class="keyword">if</span> h.flags&amp;iterator != <span class="number">0</span> &#123;</span><br><span class="line">      flags |= oldIterator</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// commit the grow (atomic wrt gc)</span></span><br><span class="line">   h.B += bigger</span><br><span class="line">   h.flags = flags</span><br><span class="line">   h.oldbuckets = oldbuckets</span><br><span class="line">   h.buckets = newbuckets</span><br><span class="line">   h.nevacuate = <span class="number">0</span></span><br><span class="line">   h.noverflow = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> h.extra != <span class="literal">nil</span> &amp;&amp; h.extra.overflow != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// Promote current overflow buckets to the old generation.</span></span><br><span class="line">      <span class="keyword">if</span> h.extra.oldoverflow != <span class="literal">nil</span> &#123;</span><br><span class="line">         throw(<span class="string">&quot;oldoverflow is not nil&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      h.extra.oldoverflow = h.extra.overflow</span><br><span class="line">      h.extra.overflow = <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> nextOverflow != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> h.extra == <span class="literal">nil</span> &#123;</span><br><span class="line">         h.extra = <span class="built_in">new</span>(mapextra)</span><br><span class="line">      &#125;</span><br><span class="line">      h.extra.nextOverflow = nextOverflow</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// the actual copying of the hash table data is done incrementally</span></span><br><span class="line">   <span class="comment">// by growWork() and evacuate().</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go语言在对map进行过扩容的时候，并不是一次性将map的所有数据从旧的桶搬到新的桶，如果map的数据量很大，会非常影响性能，而是采用一种“渐进式”的数据转移技术，遵循写时复制（copy on write）的规则，每次只对使用到的数据做迁移。</p><p>简单分析一下扩容过程：</p><p>通过代码分析，<code>hashGrow()</code>函数是在mapassign函数中被调用，所以，扩容过程会发生在map的赋值操作，在满足上述两个扩容条件时触发。</p><p>扩容过程中大概需要用到两个函数，<strong><code>hashGrow()</code>**</strong>和<strong><strong><code>growWork()</code></strong></strong>。**其中hashGrow()函数只是分配新的 buckets，并将老的 buckets 挂到了 oldbuckets 字段上，并未参与真正的数据迁移，而数据迁移的功能是由growWork()函数完成的。</p><p><strong>map的删除原理</strong></p><p>如果在找到了目标key，则把当前桶该槽位对应的key和value删除，将该槽位的tophash置为emptyOne，如果发现当前槽位后面没有元素，则将tophash设置为emptyReset，并循环向前检查前一个元素，若前一个元素也为空，槽位状态为emptyOne，则将前一个元素的tophash也设置为emptyReset。这样做的目的是将emptyReset状态尽可能地向前面的槽推进，这样做是为了增加效率，因为在查找的时候发现了emptyReset状态就不用继续往后找了，因为后面没有元素了。</p><p><strong>map的遍历</strong></p><p>go语言中map的遍历尤其要引起注意，<strong>因为每次遍历的数据顺序都是不同的</strong>。这是因为go在每次开始遍历前，都会随机一个桶下标，一个桶内遍历的起点槽下标，遍历的时候从这个桶开始，在遍历每个桶的时候，都从这个槽下标开始</p><p>go语言为什么要用这种随机开始的位置开始遍历呢？</p><p>一方面：因为go的扩容不是一个原子操作，是渐进式的，所以在遍历map的时候，可能发生扩容，一旦发生扩容，key 的位置就发生了重大的变化，下次遍历map的时候结果就不可能按原来的顺序了。</p><p>另一方面：hash 表中数据每次插入的位置是变化的，同一个 map 变量内，数据删除再添加的位置也有可能变化，因为在同一个桶及溢出链表中数据的位置不分先后</p><p>所以理论上，map的遍历结果就是不同的，所以Go防止用户错误的依赖于每次迭代的顺序，索性每次遍历时，搜是随机选取的一个遍历开始位置。</p><p><strong>迭代器</strong></p><p>运行时，map的遍历是依靠一个迭代器来完成的，迭代器的代码定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hiter <span class="keyword">struct</span> &#123;</span><br><span class="line">   key         unsafe.Pointer <span class="comment">// Must be in first position.  Write nil to indicate iteration end (see cmd/compile/internal/walk/range.go).</span></span><br><span class="line">   elem        unsafe.Pointer <span class="comment">// Must be in second position (see cmd/compile/internal/walk/range.go).</span></span><br><span class="line">   t           *maptype</span><br><span class="line">   h           *hmap</span><br><span class="line">   buckets     unsafe.Pointer <span class="comment">// bucket ptr at hash_iter initialization time</span></span><br><span class="line">   bptr        *bmap          <span class="comment">// current bucket</span></span><br><span class="line">   overflow    *[]*bmap       <span class="comment">// keeps overflow buckets of hmap.buckets alive</span></span><br><span class="line">   oldoverflow *[]*bmap       <span class="comment">// keeps overflow buckets of hmap.oldbuckets alive</span></span><br><span class="line">   startBucket <span class="type">uintptr</span>        <span class="comment">// bucket iteration started at</span></span><br><span class="line">   offset      <span class="type">uint8</span>          <span class="comment">// intra-bucket offset to start from during iteration (should be big enough to hold bucketCnt-1)</span></span><br><span class="line">   wrapped     <span class="type">bool</span>           <span class="comment">// already wrapped around from end of bucket array to beginning</span></span><br><span class="line">   B           <span class="type">uint8</span></span><br><span class="line">   i           <span class="type">uint8</span></span><br><span class="line">   bucket      <span class="type">uintptr</span></span><br><span class="line">   checkBucket <span class="type">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字段释义：</p><div class="table-container"><table><thead><tr><th>字段</th><th>释义</th></tr></thead><tbody><tr><td>key</td><td>键值对的键，键必须放置在第一个字段，key为空指针nil说明遍历结束</td></tr><tr><td>elem</td><td>键值对的值，值放置在第二个字段</td></tr><tr><td>buckets</td><td>桶数组指针，指向迭代器初始化之后要遍历的桶数组</td></tr><tr><td>h</td><td>map的地址</td></tr><tr><td>t</td><td>map的类型信息</td></tr><tr><td>bptr</td><td>指向当前遍历到的桶的指针</td></tr><tr><td>overflow</td><td>hmap中正常桶的溢出桶指针</td></tr><tr><td>oldoverflow</td><td>发生扩容时，hmap中旧桶的溢出桶指针</td></tr><tr><td>startBucket</td><td>开始遍历时，初始化的桶下标</td></tr><tr><td>offset</td><td>开始遍历时，初始化的槽位下标</td></tr><tr><td>wrapped</td><td>表示是否遍历完了，true表示遍历完了</td></tr><tr><td>B</td><td>初始化迭代器时，h.B</td></tr><tr><td>i</td><td>当前桶已经遍历的键值对数量，i=0时，开始遍历当前桶的第一个槽位，i=8时，当前桶已经遍历完，将 it.bptr指向下一个桶</td></tr><tr><td>bucket</td><td>当前遍历桶的偏移量</td></tr><tr><td>checkBucket</td><td>桶状桶状态标记位，如果不是noCheck，则表明当前桶还没有迁移，</td></tr></tbody></table></div><p>整个遍历的过程大致可以分为两步</p><ol><li>初始化迭代器</li><li>开始一轮遍历</li></ol><p>初始化迭代器的工作主要在函数<code>mapiterinit(t</code><em><code>maptype, h</code></em><code>hmap, it *hiter)</code>中完成，源代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mapiterinit initializes the hiter struct used for ranging over maps.</span></span><br><span class="line"><span class="comment">// The hiter struct pointed to by &#x27;it&#x27; is allocated on the stack</span></span><br><span class="line"><span class="comment">// by the compilers order pass or on the heap by reflect_mapiterinit.</span></span><br><span class="line"><span class="comment">// Both need to have zeroed hiter since the struct contains pointers.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapiterinit</span><span class="params">(t *maptype, h *hmap, it *hiter)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> raceenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">      callerpc := getcallerpc()</span><br><span class="line">      racereadpc(unsafe.Pointer(h), callerpc, abi.FuncPCABIInternal(mapiterinit))</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   it.t = t</span><br><span class="line">   <span class="keyword">if</span> h == <span class="literal">nil</span> || h.count == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> unsafe.Sizeof(hiter&#123;&#125;)/goarch.PtrSize != <span class="number">12</span> &#123;</span><br><span class="line">      throw(<span class="string">&quot;hash_iter size incorrect&quot;</span>) <span class="comment">// see cmd/compile/internal/reflectdata/reflect.go</span></span><br><span class="line">   &#125;</span><br><span class="line">   it.h = h</span><br><span class="line"></span><br><span class="line">   <span class="comment">// grab snapshot of bucket state</span></span><br><span class="line">   it.B = h.B</span><br><span class="line">   it.buckets = h.buckets</span><br><span class="line">   <span class="keyword">if</span> t.bucket.ptrdata == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="comment">// Allocate the current slice and remember pointers to both current and old.</span></span><br><span class="line">      <span class="comment">// This preserves all relevant overflow buckets alive even if</span></span><br><span class="line">      <span class="comment">// the table grows and/or overflow buckets are added to the table</span></span><br><span class="line">      <span class="comment">// while we are iterating.</span></span><br><span class="line">      h.createOverflow()</span><br><span class="line">      it.overflow = h.extra.overflow</span><br><span class="line">      it.oldoverflow = h.extra.oldoverflow</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// decide where to start</span></span><br><span class="line">   r := <span class="type">uintptr</span>(fastrand())</span><br><span class="line">   <span class="keyword">if</span> h.B &gt; <span class="number">31</span>-bucketCntBits &#123;</span><br><span class="line">      r += <span class="type">uintptr</span>(fastrand()) &lt;&lt; <span class="number">31</span></span><br><span class="line">   &#125;</span><br><span class="line">   it.startBucket = r &amp; bucketMask(h.B)</span><br><span class="line">   it.offset = <span class="type">uint8</span>(r &gt;&gt; h.B &amp; (bucketCnt - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">   <span class="comment">// iterator state</span></span><br><span class="line">   it.bucket = it.startBucket</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Remember we have an iterator.</span></span><br><span class="line">   <span class="comment">// Can run concurrently with another mapiterinit().</span></span><br><span class="line">   <span class="keyword">if</span> old := h.flags; old&amp;(iterator|oldIterator) != iterator|oldIterator &#123;</span><br><span class="line">      atomic.Or8(&amp;h.flags, iterator|oldIterator)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   mapiternext(it)  <span class="comment">// 进行单次遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要工作分为以下几步：</p><ol><li>判断map是否为空</li><li>保存map的B值和当前桶指针，即保存遍历开始时map的数据快照，避免扩容时map的B值和桶指针发生改变</li><li>随机一个开始遍历的起始桶下标</li><li>随机一个槽位下标，后续每个桶内的遍历都从这个槽位开始</li><li>把map置为遍历状态</li><li>开始执行一次遍历过程</li></ol><p>单次遍历的工作主要在<code>mapiternext(it *hiter)</code>函数中完成，源代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapiternext</span><span class="params">(it *hiter)</span></span> &#123;</span><br><span class="line">   h := it.h</span><br><span class="line">   <span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">      callerpc := getcallerpc()</span><br><span class="line">      racereadpc(unsafe.Pointer(h), callerpc, abi.FuncPCABIInternal(mapiternext))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> h.flags&amp;hashWriting != <span class="number">0</span> &#123; <span class="comment">// map的并发写判断</span></span><br><span class="line">      throw(<span class="string">&quot;concurrent map iteration and map write&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   t := it.t  <span class="comment">// 获取上次迭代进度</span></span><br><span class="line">   bucket := it.bucket</span><br><span class="line">   b := it.bptr</span><br><span class="line">   i := it.i</span><br><span class="line">   checkBucket := it.checkBucket</span><br><span class="line"></span><br><span class="line">next:  <span class="comment">// 开始一次迭代</span></span><br><span class="line">   <span class="keyword">if</span> b == <span class="literal">nil</span> &#123; <span class="comment">// 遍历未开始或者当前正常桶(桶数组中的桶)的溢出桶（同数组的溢出表链表中的桶）经遍历完了，开始遍历下一个正常桶</span></span><br><span class="line">      <span class="keyword">if</span> bucket == it.startBucket &amp;&amp; it.wrapped &#123; <span class="comment">// 遍历位置是起始桶，并且wrapped为true，说明遍历完了，直接返回</span></span><br><span class="line">         <span class="comment">// end of iteration</span></span><br><span class="line">         it.key = <span class="literal">nil</span></span><br><span class="line">         it.elem = <span class="literal">nil</span></span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果map正在扩容，判断当前遍历的桶数据是否已经迁移完，迁移完了则使用新桶，否则使用旧桶</span></span><br><span class="line">      <span class="keyword">if</span> h.growing() &amp;&amp; it.B == h.B &#123;</span><br><span class="line">         <span class="comment">// Iterator was started in the middle of a grow, and the grow isn&#x27;t done yet.</span></span><br><span class="line">         <span class="comment">// If the bucket we&#x27;re looking at hasn&#x27;t been filled in yet (i.e. the old</span></span><br><span class="line">         <span class="comment">// bucket hasn&#x27;t been evacuated) then we need to iterate through the old</span></span><br><span class="line">         <span class="comment">// bucket and only return the ones that will be migrated to this bucket.</span></span><br><span class="line">         oldbucket := bucket &amp; it.h.oldbucketmask()</span><br><span class="line">         b = (*bmap)(add(h.oldbuckets, oldbucket*<span class="type">uintptr</span>(t.bucketsize)))</span><br><span class="line">         <span class="keyword">if</span> !evacuated(b) &#123;</span><br><span class="line">            checkBucket = bucket</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            b = (*bmap)(add(it.buckets, bucket*<span class="type">uintptr</span>(t.bucketsize)))</span><br><span class="line">            checkBucket = noCheck</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         b = (*bmap)(add(it.buckets, bucket*<span class="type">uintptr</span>(t.bucketsize)))</span><br><span class="line">         checkBucket = noCheck</span><br><span class="line">      &#125;</span><br><span class="line">      bucket++</span><br><span class="line">      <span class="keyword">if</span> bucket == bucketShift(it.B) &#123;  <span class="comment">// 遍历到了数组最后，从头开始继续遍历</span></span><br><span class="line">         bucket = <span class="number">0</span></span><br><span class="line">         it.wrapped = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      i = <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> ; i &lt; bucketCnt; i++ &#123;  <span class="comment">// 遍历当前桶和当前桶的溢出桶里的数据</span></span><br><span class="line">      offi := (i + it.offset) &amp; (bucketCnt - <span class="number">1</span>)  <span class="comment">// 通过初始化的槽位下表确定将要遍历的槽位的tophash</span></span><br><span class="line">      <span class="keyword">if</span> isEmpty(b.tophash[offi]) || b.tophash[offi] == evacuatedEmpty &#123;</span><br><span class="line">         <span class="comment">// <span class="doctag">TODO:</span> emptyRest is hard to use here, as we start iterating</span></span><br><span class="line">         <span class="comment">// in the middle of a bucket. It&#x27;s feasible, just tricky.</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      k := add(unsafe.Pointer(b), dataOffset+<span class="type">uintptr</span>(offi)*<span class="type">uintptr</span>(t.keysize)) <span class="comment">// 根据偏移量i确定key和value的地址</span></span><br><span class="line">      <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">         k = *((*unsafe.Pointer)(k))</span><br><span class="line">      &#125;</span><br><span class="line">      e := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="type">uintptr</span>(t.keysize)+<span class="type">uintptr</span>(offi)*<span class="type">uintptr</span>(t.elemsize))</span><br><span class="line">      <span class="keyword">if</span> checkBucket != noCheck &amp;&amp; !h.sameSizeGrow() &#123;</span><br><span class="line">         <span class="comment">// Special case: iterator was started during a grow to a larger size</span></span><br><span class="line">         <span class="comment">// and the grow is not done yet. We&#x27;re working on a bucket whose</span></span><br><span class="line">         <span class="comment">// oldbucket has not been evacuated yet. Or at least, it wasn&#x27;t</span></span><br><span class="line">         <span class="comment">// evacuated when we started the bucket. So we&#x27;re iterating</span></span><br><span class="line">         <span class="comment">// through the oldbucket, skipping any keys that will go</span></span><br><span class="line">         <span class="comment">// to the other new bucket (each oldbucket expands to two</span></span><br><span class="line">         <span class="comment">// buckets during a grow).</span></span><br><span class="line">         <span class="comment">// 这里处于增量扩容，需要进一步判断</span></span><br><span class="line">         <span class="comment">// 如果数据还没偶从旧桶迁移到新桶，需要计算这个key重新hash计算后是否与oldbucket的索引一致，不一致则跳过</span></span><br><span class="line">         <span class="keyword">if</span> t.reflexivekey() || t.key.equal(k, k) &#123;</span><br><span class="line">            <span class="comment">// If the item in the oldbucket is not destined for</span></span><br><span class="line">            <span class="comment">// the current new bucket in the iteration, skip it.</span></span><br><span class="line">            hash := t.hasher(k, <span class="type">uintptr</span>(h.hash0))</span><br><span class="line">            <span class="keyword">if</span> hash&amp;bucketMask(it.B) != checkBucket &#123;</span><br><span class="line">               <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Hash isn&#x27;t repeatable if k != k (NaNs).  We need a</span></span><br><span class="line">            <span class="comment">// repeatable and randomish choice of which direction</span></span><br><span class="line">            <span class="comment">// to send NaNs during evacuation. We&#x27;ll use the low</span></span><br><span class="line">            <span class="comment">// bit of tophash to decide which way NaNs go.</span></span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> this case is why we need two evacuate tophash</span></span><br><span class="line">            <span class="comment">// values, evacuatedX and evacuatedY, that differ in</span></span><br><span class="line">            <span class="comment">// their low bit.</span></span><br><span class="line">            <span class="keyword">if</span> checkBucket&gt;&gt;(it.B<span class="number">-1</span>) != <span class="type">uintptr</span>(b.tophash[offi]&amp;<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (b.tophash[offi] != evacuatedX &amp;&amp; b.tophash[offi] != evacuatedY) ||</span><br><span class="line">         !(t.reflexivekey() || t.key.equal(k, k)) &#123;  <span class="comment">// 这里的数据没有处在扩容中，直接使用</span></span><br><span class="line">         <span class="comment">// This is the golden data, we can return it.</span></span><br><span class="line">         <span class="comment">// OR</span></span><br><span class="line">         <span class="comment">// key!=key, so the entry can&#x27;t be deleted or updated, so we can just return it.</span></span><br><span class="line">         <span class="comment">// That&#x27;s lucky for us because when key!=key we can&#x27;t look it up successfully.</span></span><br><span class="line">         it.key = k</span><br><span class="line">         <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">            e = *((*unsafe.Pointer)(e))</span><br><span class="line">         &#125;</span><br><span class="line">         it.elem = e</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// The hash table has grown since the iterator was started.</span></span><br><span class="line">         <span class="comment">// The golden data for this key is now somewhere else.</span></span><br><span class="line">         <span class="comment">// Check the current hash table for the data.</span></span><br><span class="line">         <span class="comment">// This code handles the case where the key</span></span><br><span class="line">         <span class="comment">// has been deleted, updated, or deleted and reinserted.</span></span><br><span class="line">         <span class="comment">// <span class="doctag">NOTE:</span> we need to regrab the key as it has potentially been</span></span><br><span class="line">         <span class="comment">// updated to an equal() but not identical key (e.g. +0.0 vs -0.0).</span></span><br><span class="line">         rk, re := mapaccessK(t, h, k)   <span class="comment">// 走到这里，表明这条数据已经被迁移或者删除，使用mapaccessK去找回这部分的数据</span></span><br><span class="line">         <span class="keyword">if</span> rk == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span> <span class="comment">// key has been deleted 数据没找到，说明已经删除</span></span><br><span class="line">         &#125;</span><br><span class="line">         it.key = rk</span><br><span class="line">         it.elem = re</span><br><span class="line">      &#125;</span><br><span class="line">      it.bucket = bucket  <span class="comment">// 记录本次遍历进度</span></span><br><span class="line">      <span class="keyword">if</span> it.bptr != b &#123; <span class="comment">// avoid unnecessary write barrier; see issue 14921</span></span><br><span class="line">         it.bptr = b</span><br><span class="line">      &#125;</span><br><span class="line">      it.i = i + <span class="number">1</span></span><br><span class="line">      it.checkBucket = checkBucket</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   b = b.overflow(t)   <span class="comment">// 遍历溢出桶链表：继续遍历下一个溢出桶</span></span><br><span class="line">   i = <span class="number">0</span></span><br><span class="line">   <span class="keyword">goto</span> next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历的流程大致是以下几个步骤：</p><ol><li>map的并发写检测，判断map是否处于并发写状态，是则panic</li><li>判断是否已经遍历完了，遍历完了直接退出</li><li>开始遍历</li><li>首选确定一个随机开始遍历的起始桶下标作为startBucket，然后确定一个随机的槽位下标作为offset</li><li>根据startBucket和offset开始遍历当前桶和当前桶的溢出桶，如果当前桶正在扩容，则进行步骤6，否则进行步骤7</li><li>在遍历处于扩容状态的bucket的时候，因为当前bucket正在扩容，我们并不会遍历这个桶，而是会找到这个桶的旧桶old_bucket，遍历旧桶中的一部分key，这些key重新hash计算后能够散列到bucket中，对那些key经过重新hash计算不散列到bucket中的key，则跳过</li><li>根据遍历初始化的时候选定的随机槽位开始遍历桶内的各个key/value</li><li>继续遍历bucket溢出指针指向的溢出链表中的溢出桶</li><li>假如遍历到了起始桶startBucket，则说明遍历完了，结束遍历</li></ol><h3 id="3-4-sync-map"><a href="#3-4-sync-map" class="headerlink" title="3.4 sync.map"></a>3.4 sync.map</h3><p>sync.map是go语言在sync包下提供的一个可以提供并发访问的map。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> &#123;</span><br><span class="line">   mu Mutex             <span class="comment">//  用于保护dirty字段的锁</span></span><br><span class="line">   read atomic.Value    <span class="comment">// 只读字段，其实际的数据类型是一个readOnly结构</span></span><br><span class="line">   dirty <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry  <span class="comment">//需要加锁才能访问的map，其中包含在read中除了被expunged(删除)以外的所有元素以及新加入的元素</span></span><br><span class="line">   misses <span class="type">int</span> <span class="comment">// 计数器，记录在从read中读取数据的时候，没有命中的次数，当misses值等于dirty长度时，dirty提升为read</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readOnly is an immutable struct stored atomically in the Map.read field.</span></span><br><span class="line"><span class="keyword">type</span> readOnly <span class="keyword">struct</span> &#123;</span><br><span class="line">   m       <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry   <span class="comment">// key为任意可比较类型，value位为entry指针的一个map</span></span><br><span class="line">   amended <span class="type">bool</span> <span class="comment">// amended位true，表明dirty中包含read中没有的数据，为false表明dirty中的数据在read中都存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面看一下entry这个结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> entry <span class="keyword">struct</span> &#123;</span><br><span class="line">    p unsafe.Pointer  <span class="comment">// p指向真正的value所在的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个p有三种取值：</p><ul><li>p为nil，标记删除状态，代表这个key被删除了，此时dirty要么为nil，要么也存在这个key</li><li>p为expunged：标记删除状态，此时dirty非空(dirty未空的情况是，原先的dirty被提升未read，此时dirty为空，只有当再次追加数据的时候才会重建dirty)，p存在于read，但不存在于dirty</li><li>p为正常值：entry表示正常的value</li></ul><p><img src="https://s1.vika.cn/space/2023/04/12/6e93f8002c384c32b5b3f8253a000bcd" alt=""></p><p><strong>expunged</strong>这个字段的作用是用来标识map中的某个key是否被删除，注意，这里只是标记删除，并没有真正的删除，所以<strong>expunged</strong>是map中用来对某个key做假删除动作的，当从sync.Map删除某个key的时候，将这个key对应的value标记为nil或者<strong>expunged，</strong>后面在对这个key进行删除。单说expunged是read独有的，而nil则是read和dirty共有的</p><p><img src="https://s1.vika.cn/space/2023/04/12/e545cf5a7bb946cf9e1fc2fb74dac147" alt=""></p><p>sync.map跟map一样，提供了数据的增删改查功能，这里我们对照map从源代码来分析一下sync.map各个功能的具体实现</p><ul><li><code>Store()</code>：更新/插入一个键值对</li><li><code>Load()</code>：返回一个key对应的value</li><li><code>Delete()</code>：删除一个键值对</li><li><p><code>Range()</code>：对sync.Map进行遍历</p><p><strong><code>Store</code></strong></p></li></ul><p>sync.map.Store()方法既可以用来新增键值对，也可用用来更新键值对。</p><ul><li>更新键值对：<ul><li>key存在于read中，那么这时key对应的p有三种情况<ul><li>p==expunged，当前key存在于read，但是key不存在于dirty，dirty也不为空，read包含dirty中不存在的key，dirty也包含read中不存在的key，这种情况下p的值为expunged，形式如下图。在这种情况下，不能单单只操作read，还要加锁同步更新dirty，将这个key加入到dirty中，将e.p的保存新传入的value</li><li>p==nil，key存在于read，此时dirty的p也为空，这种情况可以用原子操作直接更新read里p的值</li><li>p==&amp;value，key存在于read，也存在于dirty，且指向的是一个正常值，这种情况也是可以直接更新read里p的值，</li></ul></li></ul></li><li>新增键值对（只操作dirty）<ul><li>dirty为nil，由于read的misses次数达到了dirty的长度，dirty刚刚提升为read，还没有被插入过新的key，此时为nil。此时要插入新的key，则要根据read重建dirty，在重建的时候，原来被标记删除为nil的键值对过滤掉，不复制到dirty，剩余的键值对都copy到dirty。并且还要改一下read里被标记删除的key的状态，由原来的nil改为expunged。</li><li>dirty不为nil，直接在dirty中插入新的键值对</li></ul></li></ul><p>其源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Store 用于保存或者事更新一个键值对</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span></span> Store(key, value any) &#123;</span><br><span class="line">   read, _ := m.read.Load().(readOnly)  <span class="comment">// 判断key是否存在于read中</span></span><br><span class="line">   <span class="comment">/*****</span></span><br><span class="line"><span class="comment">   假设key存在于read中，此时p有三种情况，这里先记住，后面会图解分析这三种情况</span></span><br><span class="line"><span class="comment">   1. p == nil, key被标记删除了，此时dirty为空:dirty==nil，这个dirty中没有任何数据元素</span></span><br><span class="line"><span class="comment">   2. p == expunged, key被标记删除，但此时dirty不为空，且dirty中存在一些key，这些key不再read中</span></span><br><span class="line"><span class="comment">   3. p == &amp;value，p指针指向一个正常的value，</span></span><br><span class="line"><span class="comment">   ******/</span></span><br><span class="line">   <span class="comment">// key存在与read中，且此时read中m这个map的key对应的entry的p指针不满足p == expunged，这里走tryStore逻辑，直接使用cas原子操作修改value</span></span><br><span class="line">   <span class="keyword">if</span> e, ok := read.m[key]; ok &amp;&amp; e.tryStore(&amp;value) &#123;  </span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   m.mu.Lock()   <span class="comment">// 加锁</span></span><br><span class="line">   read, _ = m.read.Load().(readOnly)     <span class="comment">//双重检查，怕执行后续逻辑的时候，read已被其他goroutine修改</span></span><br><span class="line">   <span class="keyword">if</span> e, ok := read.m[key]; ok &#123;</span><br><span class="line">      <span class="keyword">if</span> e.unexpungeLocked() &#123;</span><br><span class="line">         <span class="comment">// key被标记删除，p处于expunged状态，表明这个key在read中，但不再dirty中</span></span><br><span class="line">         <span class="comment">// 并且此时dirty非空，所以要保证dirty中包含map所有的key，就要把这个key加入到dirty中，并且修改e.p指向新的value</span></span><br><span class="line">         m.dirty[key] = e    <span class="comment">// 把这个key加入到dirty中</span></span><br><span class="line">      &#125;</span><br><span class="line">      e.storeLocked(&amp;value)    <span class="comment">// 修改e.p指向新的value</span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> e, ok := m.dirty[key]; ok &#123;  <span class="comment">// key不再read中，但存在于dirty中</span></span><br><span class="line">      e.storeLocked(&amp;value)    <span class="comment">// 直接修改e.p指向新的value</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;                    <span class="comment">// key既不在read中，也不再dirty中，是一个新的key，</span></span><br><span class="line">      <span class="keyword">if</span> !read.amended &#123;  <span class="comment">// amended为false，表明dirty中的keu在read中都存在</span></span><br><span class="line">         <span class="comment">// 先判断dirty是否为空，因为有一种情况，当read的未命中次数几misses达到dirty长度的时候，会拷贝整个dirty到read，即重塑过程</span></span><br><span class="line">         <span class="comment">// 发生重塑的时候，dirty中的所有key都会存在于read中，但是dirty在重塑完之后，会被立马置为nil，所以这里要做一个判断</span></span><br><span class="line">         m.dirtyLocked() <span class="comment">// 根据read重建dirty对象，将read中的key/value全部复制到dirty中，保证dirty中包含map中所有的key</span></span><br><span class="line">         m.read.Store(readOnly&#123;m: read.m, amended: <span class="literal">true</span>&#125;) <span class="comment">// 更改read的amended为true，因为接下来要在dirty中插入一个新的keu，这个keu存在与dirty，但不存在于read</span></span><br><span class="line">      &#125;</span><br><span class="line">      m.dirty[key] = newEntry(value)   <span class="comment">// 在dirty中加入新key/value</span></span><br><span class="line">   &#125;</span><br><span class="line">   m.mu.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tryStore()</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将entry中的p指针，e.p指向value，即尝试将value的值存在e的p指针中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span></span> tryStore(i *<span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">      p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line">      <span class="comment">// 上面解释过，出现这种情况，说明dirty不为空，且dirty中存在一些key，这些key不再read中，不能仅仅只更新read，还要加锁更新dirty，所以直接返回false</span></span><br><span class="line">      <span class="keyword">if</span> p == expunged &#123;   </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 原子操作更新value的值</span></span><br><span class="line">      <span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, p, unsafe.Pointer(i)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>unexpungeLocked()</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span></span> unexpungeLocked() (wasExpunged <span class="type">bool</span>) &#123;</span><br><span class="line">   <span class="comment">// e.p从expunged修改为nil，操作成功返回true</span></span><br><span class="line">   <span class="comment">// 这里为什么要改为nil，通过上面的调用逻辑可以知道，后续会将这个key加入到dirty中，这样这个key就既存在与read，又存在与dirty，所以状态要改一下</span></span><br><span class="line">   <span class="keyword">return</span> atomic.CompareAndSwapPointer(&amp;e.p, expunged, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>storeLocked()</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原子操作，将i存储到e.p中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span></span> storeLocked(i *<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">   atomic.StorePointer(&amp;e.p, unsafe.Pointer(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dirtyLocked()</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span></span> dirtyLocked() &#123;</span><br><span class="line">   <span class="keyword">if</span> m.dirty != <span class="literal">nil</span> &#123; <span class="comment">// 如果dirty对象已经存在，则不需要再创建了，直接返回</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 根据read重新创建一个dirty对象</span></span><br><span class="line">   read, _ := m.read.Load().(readOnly) </span><br><span class="line">   m.dirty = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry, <span class="built_in">len</span>(read.m)) <span class="comment">// 新建一个dirty对象</span></span><br><span class="line">   <span class="comment">// 遍历read中的key/value，复制到dirty中</span></span><br><span class="line">   <span class="keyword">for</span> k, e := <span class="keyword">range</span> read.m &#123;</span><br><span class="line">      <span class="keyword">if</span> !e.tryExpungeLocked() &#123;</span><br><span class="line">         m.dirty[k] = e</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tryExpungeLocked()</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span></span> tryExpungeLocked() (isExpunged <span class="type">bool</span>) &#123;</span><br><span class="line">   p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line">   <span class="keyword">for</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// 如果p被标记删除为nil，在进行重塑的时候，即copy dirty到read的时候</span></span><br><span class="line">      <span class="comment">// 将nil的值改为expunged，这样做是为了表明在对dirty重新构建之前，这个key只存在于read，不存在于dirty</span></span><br><span class="line">      <span class="comment">// 后续访问这个key的时候就不用加锁，加快了访问速度</span></span><br><span class="line">      <span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, <span class="literal">nil</span>, expunged) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      p = atomic.LoadPointer(&amp;e.p)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> p == expunged</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/04/12/f34ad0276a05482f95ac61805cdd8917" alt=""></p><p> <strong><code>Load</code></strong></p><p>Load()方法很简单，就是返回一个key对应的value，value不存在就返回nil。读取的时候，先从read中读取，读到了key，就直接返回结果，没有读取到，就加锁从dirty中读取，所以读取不在read中的key会因为加锁而导致性能下降。</p><p>在读取的过程中，可能发生read被重构的过程，即将dirty提升为read的过程，比如当读取某个key的时候，这个key存在与dirty中，但不存在与read中，所以，misses会加1，当misses刚好达到dirty的长度时，就会重塑read，拷贝dirty的数据到read中，将dirty提升为read，并将dirty只为nil。</p><p>load()方法源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load返回keu对应的value值，ok表示key是否存在与map中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span></span> Load(key <span class="keyword">interface</span>&#123;&#125;) (value <span class="keyword">interface</span>&#123;&#125;, ok <span class="type">bool</span>) &#123;</span><br><span class="line">   read, _ := m.read.Load().(readOnly) </span><br><span class="line">   e, ok := read.m[key]    <span class="comment">// 先从read中读取</span></span><br><span class="line">   <span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;   <span class="comment">// read中不存在，并且dirty中存在read中不存在可key</span></span><br><span class="line">      m.mu.Lock()     <span class="comment">// 加锁到dirty中读取</span></span><br><span class="line">      <span class="comment">// 双重检查，原理跟store的时候相同</span></span><br><span class="line">      <span class="comment">// 可能存在一个 goroutine 在执行完 if !ok &amp;&amp; read.amended 但还没有加锁完成时，另一个 goroutine 将 dirty 提升成了 read 的情况，</span></span><br><span class="line">      <span class="comment">// 修改了read这种的key集合，导致keu发生变化，所以在加锁之后还需要再从 read 中检查一遍</span></span><br><span class="line">      read, _ = m.read.Load().(readOnly)</span><br><span class="line">      e, ok = read.m[key]</span><br><span class="line">      <span class="keyword">if</span> !ok &amp;&amp; read.amended &#123; <span class="comment">// key不存在与read中，且dirty中存在read中不存在可key</span></span><br><span class="line">         e, ok = m.dirty[key]  <span class="comment">// 直接从dirty读取</span></span><br><span class="line">         <span class="comment">// 不管key在不在dirty中，命中记录数misses都会加1</span></span><br><span class="line">         <span class="comment">// 当misses大于等于dirty的长度时，发生重塑，将dirty提升为read</span></span><br><span class="line">         <span class="comment">// 将misses清0</span></span><br><span class="line">         m.missLocked()        </span><br><span class="line">      &#125;</span><br><span class="line">      m.mu.Unlock()            <span class="comment">// 解锁</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> !ok &#123;                    <span class="comment">// 没有读取到，key既不存在于read，也不存在与dirty                </span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 读取到了，返回value</span></span><br><span class="line">   <span class="comment">// 走到这里，因为ok会在dirty中再做一次赋值，既可能是直接从read读取到，也可能是从dirty读取到</span></span><br><span class="line">   <span class="keyword">return</span> e.load()              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>missLocked()</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span></span> missLocked() &#123;</span><br><span class="line">   m.misses++ <span class="comment">// read未命中次数加1</span></span><br><span class="line">   <span class="keyword">if</span> m.misses &lt; <span class="built_in">len</span>(m.dirty) &#123;   <span class="comment">// misses未达到dirty长度，直接返回</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// misses达到dirty长度</span></span><br><span class="line">   m.read.Store(readOnly&#123;m: m.dirty&#125;)  <span class="comment">// 将dirty的内容存储到read中，提升dirty未read</span></span><br><span class="line">   m.dirty = <span class="literal">nil</span>     <span class="comment">// 将dirty置为nil，因未dirty为一个map类型，置为nil后，会被垃圾回收</span></span><br><span class="line">   m.misses = <span class="number">0</span>      <span class="comment">// misses清0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\hyz\AppData\Roaming\Typora\typora-user-images\image-20230412195258520.png" alt="image-20230412195258520"></p><p> <strong><code>Delete</code></strong></p><p><code>Delete</code>方法是从sync.Map中删除一个元素，delete方法也很简单，还是优先检查read，若key在read中存在，则只会操作read。若在read中不存在，回去dirty中删除这个键值对<code>delete(m.dirty, key)</code>。所以分两种情况讨论：</p><ol><li>key存在于read中<ul><li>key只存在read，不存在于dirty。直接将key对应的e的e.p设置为nil，这种情况dirty中根本就没有这个key，所以不用管</li><li>key既存在于read，也存在于dirt。也是直接将key对应的e的e.p设置为nil，这种情况下read中m的e和dirty中的e指向同一个，将read中e的e.p设置为nil，其实dirty中的p也指向了nil</li></ul></li></ol><p>​    但是这两种方式删除键值对的时候其实都没有像从dirty中删除那样调用delete函数从map中删除这个key/value，所以这里并没有真的删除，只是标记删除了，真正删除要等到read中的misses大于等于dirty的时候，dirty提升为read的时候，这些key才回被垃圾回收掉。</p><ol><li>key不存在于read</li></ol><p>这种情况很简单，直接去dirty中这个map删除这个键值对就行了，这里是直接删除</p><p>所以：从read中删除是延迟删除，从dirty中删除是直接删除</p><p><img src="https://s1.vika.cn/space/2023/04/12/9216d805d72d48efba1a98aa16537499" alt=""></p><p> <strong><code>Range</code></strong></p><p>Range方法是对sync.Map进行遍历，其参数是一个<code>func(key, value interface&#123;&#125;) bool</code>类型的函数f，f的作用是对sync.Map中遍历到的每一个key/value键值对进行处理，当f返回false的时候，遍历停止。</p><p>在sync.Map中当dirty不为nil时，dirty会包含map中所有非删除的key。在遍历的时候会先看read的amended字段，当amended为true时，表示dirty中有read中没有的字段，将dirty提升为read，再遍历read即可，这样就避免了访问dirty会加锁导致性能低下，如果amended为false时，表示read和dirty中的key一致，这时直接遍历read即可。</p><p>其源代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span></span> Range(f <span class="function"><span class="keyword">func</span><span class="params">(key, value <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">bool</span>) &#123;</span><br><span class="line">   read, _ := m.read.Load().(readOnly)</span><br><span class="line">   <span class="keyword">if</span> read.amended &#123;</span><br><span class="line">      m.mu.Lock()</span><br><span class="line">      <span class="comment">// 跟前面方法的原理一样，同样是对read进行双检查</span></span><br><span class="line">      read, _ = m.read.Load().(readOnly)</span><br><span class="line">      <span class="keyword">if</span> read.amended &#123;  <span class="comment">// dirty中包含read中不存在的key</span></span><br><span class="line">         <span class="comment">// 将dirty提升为read，因为dirty中包含map中的所有key，所以直接便利dirty即可，</span></span><br><span class="line">         <span class="comment">// 将ready提升了read之后，就不用加锁访问了，提升了效率</span></span><br><span class="line">         read = readOnly&#123;m: m.dirty&#125; </span><br><span class="line">         m.read.Store(read)</span><br><span class="line">         m.dirty = <span class="literal">nil</span>  <span class="comment">// dirty置为nil</span></span><br><span class="line">         m.misses = <span class="number">0</span>   <span class="comment">// read的未命中数置为0</span></span><br><span class="line">      &#125;</span><br><span class="line">      m.mu.Unlock()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> k, e := <span class="keyword">range</span> read.m &#123;</span><br><span class="line">      v, ok := e.load()</span><br><span class="line">      <span class="keyword">if</span> !ok &#123;</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> !f(k, v) &#123;</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-channel"><a href="#3-5-channel" class="headerlink" title="3.5 channel"></a>3.5 channel</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">   qcount   uint           <span class="comment">// 循环队列中的数据总数</span></span><br><span class="line">   dataqsiz uint           <span class="comment">// 循环队列大小</span></span><br><span class="line">   buf      unsafe.Pointer <span class="comment">// 指向循环队列的指针</span></span><br><span class="line">   elemsize uint16         <span class="comment">// 循环队列中的每个元素的大小</span></span><br><span class="line">   closed   uint32         <span class="comment">// 标记位，标记channel是否关闭</span></span><br><span class="line">   elemtype *_type         <span class="comment">// 循环队列中的元素类型</span></span><br><span class="line">   sendx    uint           <span class="comment">// 已发送元素在循环队列中的索引位置</span></span><br><span class="line">   recvx    uint           <span class="comment">// 已接收元素在循环队列中的索引位置</span></span><br><span class="line">   recvq    waitq          <span class="comment">// 等待从channel接收消息的sudog队列</span></span><br><span class="line">   sendq    waitq          <span class="comment">// 等待向channel写入消息的sudog队列</span></span><br><span class="line">   lock mutex              <span class="comment">// 互斥锁，对channel的数据读写操作加锁，保证并发安全</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hchan 中的sendq 和 recvq 字段存储了当前 channel 由于缓冲区空间(buf)不足而阻塞的要读取或者写入当前channel的goroutine 列表，这些等待队列使用双向链表 waitq 表示，waitq是对一个sudog链表进行封装之后的一个结构，其字段为这个sudog队列的首位指针，链表中所有的元素都是 sudog 结构，看一下waitq这个数据类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> waitq <span class="keyword">struct</span> &#123;</span><br><span class="line">    first *sudog              <span class="comment">// sudog队列的队头指针</span></span><br><span class="line">    last  *sudog              <span class="comment">// sudog队列的队尾指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sudog</p><p>我们知道channel是用于两个不同的goroutine之间传递消息的，但是这里的recvq和sendq却是sudog列表，sudog和goroutine之间是不是又某种关系呢？goroutine其实是绑定正在sudog这个结构上，所以recvq可以简单理解为读操作阻塞在 channel 的 goroutine 列表，sendq 是写操作阻塞在 channel 的 goroutine 列表</p><p>下面看一下sudog结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> sudog <span class="keyword">struct</span> &#123;</span><br><span class="line">   g *g                  <span class="comment">// 绑定的goroutine</span></span><br><span class="line">   next *sudog           <span class="comment">// 指向sudog链表中的下一个节点</span></span><br><span class="line">   prev *sudog           <span class="comment">// 指向sudog链表中的下一个节点</span></span><br><span class="line">   elem unsafe.Pointer   <span class="comment">// 数据对象</span></span><br><span class="line">   acquiretime <span class="type">int64</span>     </span><br><span class="line">   releasetime <span class="type">int64</span></span><br><span class="line">   ticket      <span class="type">uint32</span></span><br><span class="line">   isSelect <span class="type">bool</span></span><br><span class="line">   success <span class="type">bool</span></span><br><span class="line">   parent   *sudog <span class="comment">// semaRoot binary tree</span></span><br><span class="line">   waitlink *sudog <span class="comment">// g.waiting list or semaRoot</span></span><br><span class="line">   waittail *sudog <span class="comment">// semaRoot</span></span><br><span class="line">   c        *hchan <span class="comment">// channel</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>直接发送：</strong>当前 channel 有正在阻塞等待接收数据的goroutine，那么直接发送数据，直接从一个goroutine操作另一个goroutine的栈，将待发送数据直接copy到接收处</p><p><strong>缓冲发送：</strong>会判定缓冲区的剩余空间，如果有剩余空间，则将数据拷贝到channel中<strong>，</strong>sendx 索引自行自增 1(若sendx 等于 dataqsiz ，则将sendx 置0，原因是buf是一个环形数组)，自增完成之后，队列总数自增 1</p><p><strong>阻塞发送：</strong>当前 channel 没有正在阻塞等待接收数据的goroutine并且是channel的缓冲区满了之后，发送goroutine就就会阻塞，首先获取<code>sudog</code> ，将发松平的goroutine绑定到sudog上，加入到当前channel的发送阻塞队列，调用 <code>gopark</code> 方法挂起当前 goroutine，等待被唤醒</p><p>针对不同的 channel 状态，进行读、写、关闭操作时的行为如下：</p><ol><li>对于 <code>nil</code> channel，任何读、写、关闭操作都会导致程序 panic。</li><li>对于已经关闭的 channel，继续进行写操作会导致程序 panic，而读操作会返回 channel 中还未读取的元素直到 channel 中的所有元素都被读取完毕，此时继续读取操作会返回 channel 元素类型的零值。</li><li>对于有数据的 channel，进行读操作会读取 channel 中的数据，如果 channel 中没有数据则会阻塞等待，直到 channel 中有数据可读为止。进行写操作会将数据写入 channel 中，如果 channel 已满则会阻塞等待，直到 channel 有空间可写为止。对于已经关闭的 channel，读操作的行为同上述第 2 点。</li></ol><h3 id="3-6-context"><a href="#3-6-context" class="headerlink" title="3.6 context"></a>3.6 context</h3><p>context在项目中主要是用于上下与下层goroutine的取消控制以及数据共享，也是go语言中goroutine之间通信的一种方式，其底层是借助channl与snyc.Mutex实现的。</p><p>context在底层实现上其实用到了2个接口，对这个接口的4种实现，以及提供了6个方法</p><p><strong>接口：</strong></p><div class="table-container"><table><thead><tr><th>接口名</th><th>说明</th></tr></thead><tbody><tr><td>Context</td><td>context的接口定义，规定context的实现必须包含的四个基本方法</td></tr><tr><td>canceler</td><td>context的取消接口，其中定义了两个方法</td></tr></tbody></table></div><p><strong>实现：</strong></p><p>context接口的四种实现</p><div class="table-container"><table><thead><tr><th>结构名</th><th>说明</th></tr></thead><tbody><tr><td>emptyCtx</td><td>一个空的context，用作根context</td></tr><tr><td>cancelCtx</td><td>可以通过取消函数来取消context</td></tr><tr><td>timerCtx</td><td>可以通过定时器和deadline来定时取消contextvalueCtx</td></tr><tr><td>valueCtx</td><td>类似于map，可以用来存储key/valuez键值对</td></tr></tbody></table></div><p><strong>方法：</strong></p><div class="table-container"><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>Background</td><td>返回一个根context即emptyCtx</td></tr><tr><td>TODO</td><td>也是返回一个根context即emptyCtx</td></tr><tr><td>WithCancel</td><td>派生出一个cancelCtx</td></tr><tr><td>WithDeadline</td><td>派生出一个cancelCtx</td></tr><tr><td>WithTimeout</td><td>派生出一个cancelCtx</td></tr><tr><td>WithValue</td><td>派生出一个cancelCtx</td></tr></tbody></table></div><p><strong>context接口</strong></p><p>首先还是回顾一下context接口，context的接口定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">   Deadline() (deadline time.Time, ok <span class="type">bool</span>)</span><br><span class="line">   Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">   Err() <span class="type">error</span></span><br><span class="line">   Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口提供了四个方法</p><ul><li><code>Deadline</code>： 设置 context.Context 被取消的时间，即截止时间；</li><li><code>Done</code>： 返回一个 Channel，当Context被取消或者到达截止时间，这个 Channel 就会被关闭，表示context结束，多次调用 Done 方法返回的channel是同一个</li><li><code>Err</code>： 返回 context.Context 结束的原因</li><li>4.<code>Value</code> ：从 context.Context 中获取键对应的值，类似于map的get方法，对于同一个context，多次调用 Value 并传入相同的 Key 会返回相同的结果，如果没有对应的<code>key</code>,则返回<code>nil</code>，键值对是通过WithValue方法写入</li></ul><p><strong>canceler接口</strong></p><p><strong>canceler接口的源码定义如下</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> canceler <span class="keyword">interface</span> &#123;</span><br><span class="line">   cancel(removeFromParent <span class="type">bool</span>, err <span class="type">error</span>)  <span class="comment">// 创建cancel接口实例的goroutine 调用cancel方法通知被创建的goroutine退出</span></span><br><span class="line">   Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  <span class="comment">// 返回一个channel，后续被创建的goroutine通过监听这个channel的信号来完成退出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>canceler接口主要用于取消方法的实现，如果一个示例既实现了context接口又实现了canceler接口，那么这个context就是可以本取消的，比如cancelCtx 和timerCtx。如果仅仅只是实现了context接口，而没有实现canceler，就是不可取消的，比如emptyCtx 和valueCtx。</p><p><strong>cancelCtx</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> cancelCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">   Context                         <span class="comment">// 组合了一个Context ，所以cancelCtx 一定是context接口的一个实现</span></span><br><span class="line">   mu       sync.Mutex             <span class="comment">// 互斥锁，用于保护以下三个字段</span></span><br><span class="line">  <span class="comment">// value是一个chan struct&#123;&#125;类型，原子操作做锁优化</span></span><br><span class="line">   done     atomic.Value          </span><br><span class="line">   <span class="comment">// key是一个取消接口的实现，map其实存储的是当前canceler接口的子节点，当前context被取消时，会遍历子节点发送取消信号</span></span><br><span class="line">   children <span class="keyword">map</span>[canceler]<span class="keyword">struct</span>&#123;&#125;  </span><br><span class="line">   err      <span class="type">error</span>                  <span class="comment">// context被取消的原因</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WithCancel函数在派生可取消的子context的过程中，通过propagateCancel函数关联父子context可能遇到的几种情形：</p><ol><li>父context的通信管道done为空或者已经被取消，就不用关联了，直接取消当前子context即可</li><li>父context可以被取消，但是还未被取消，并且父context可以提取出标准的cancelCtx结构，则创建父context的children map，将当前子context加入到这个map中</li><li>父context可以被取消，但是还未被取消，父context不能提取出标准的cancelCtx结构，新起一个goroutine监控父子context的通信管道有没有取消信号</li></ol><p><strong>timerCtx</strong></p><p>父context未取消的情况下，在创建timerCtx的时候有两种情况：</p><p>设置的截止时间晚于父context的截止时间，则不会创建timerCtx，会直接创建一个可取消的context，因为父context的截止时间更早，会先被取消，父context被取消的时候会级联取消这个子context</p><p>设置的截止时间早于父context的截止时间，会创建一个正常的timerCtx</p><p><strong>valueCtx</strong></p><p>他不是用于父子context之间的取消的，而是用于数据共享。作用类似于一个map，不过数据的存储和读取是在两个context，用于goroutine之间的数据传递。</p><p>valueCtx的结构定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> valueCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">    Context</span><br><span class="line">    key, val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>valueCtx内置了Context，所以他也是一个context接口的实现，但是其没有实现canceler接口，所以他不能用作context的取消，valueCtx实现了<code>String()</code>方法和<code>Value</code>方法，<code>String()</code>比较简单，就不细看了，下面看一下</p><p><code>Value</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *valueCtx)</span></span> Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">   <span class="keyword">if</span> c.key == key &#123;</span><br><span class="line">      <span class="keyword">return</span> c.val</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> c.Context.Value(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，就是向上递归的查找key所对应的value，如果找到则直接返回 value，否则查找该context的父context，一直顺着 context 向上，最终找到根节点（一般是 emptyCtx），直接返回一个 nil。</p><h3 id="3-7-defer"><a href="#3-7-defer" class="headerlink" title="3.7 defer"></a>3.7 defer</h3><p>协程记录defer信息，函数退出时调用<br>将defer代码直接编译进函数尾</p><p>进行defer 函数调用的时候其实会生成一个_defer结构，一个函数中可能有多次defer调用，所以会生成多个这样的_defer结构，这些_defer结构链式存储构成一个_defer链表，当前goroutine的_defer指向这个链表的头节点，</p><p>_defer 的结构定义在src/src/runtime/runtime2.go中，源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> _defer <span class="keyword">struct</span> &#123;</span><br><span class="line">   started <span class="type">bool</span>   <span class="comment">// 标志位，标识defer函数是否已经开始执行,默认为false</span></span><br><span class="line">   heap    <span class="type">bool</span>   <span class="comment">// 标记位，标志当前defer结构是否是分配在堆上</span></span><br><span class="line">   openDefer <span class="type">bool</span>  <span class="comment">// 标记位，标识当前defer是否以开放编码的方式实现</span></span><br><span class="line">   sp        <span class="type">uintptr</span> <span class="comment">// 调用方的sp寄存器指针，即栈指针</span></span><br><span class="line">   pc        <span class="type">uintptr</span> <span class="comment">// 调用方的程序计数器指针</span></span><br><span class="line">   fn        <span class="function"><span class="keyword">func</span><span class="params">()</span></span>  <span class="comment">// defer注册的延迟执行的函数</span></span><br><span class="line">   _panic    *_panic <span class="comment">// 标识是否panic时触发，非panic触发时，为nil</span></span><br><span class="line">   link      *_defer <span class="comment">// defer链表</span></span><br><span class="line">   fd   unsafe.Pointer <span class="comment">// defer调用的相关参数</span></span><br><span class="line">   varp <span class="type">uintptr</span>        <span class="comment">// value of varp for the stack frame</span></span><br><span class="line">   framepc <span class="type">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defer有三种实现方式，在在栈上分配内存，在堆上分配内存以及使用开放编码的方式。会优先使用内联方式，当内联不满足，且没有发生内存逃逸的情况下，使用栈分配的方式，这两种情况都不符合的情况下在使用对分配，这样做的好处是提升性能。</p><p><strong>堆上defer的创建</strong>思想借助了内存复用，用到了内存池的思想，创建defer的过程是：优先在p的本地和全局的defer缓存池里找到一个可用的defer结构返回，找不到在去堆上创建</p><p>在g1.14之后，go会优先采用内联的方式处理defer函数调用（开放编码法），但是需要满足以下几个条件：</p><ul><li>build编译的时候没有设置-N</li><li>defer 函数个数没有超过 8 个</li><li>defer所在函数返回值个数和defer函数个数乘积不超过15</li><li>defer没有出现在循环语句中时</li></ul><p><strong>defer函数执行</strong></p><p>总结：</p><ol><li>遇到defer关键字，编译器会在编译阶段注册defer函数的时候插入<code>deferproc()</code>函数或者<code>deferprocStack</code>函数，在return之前插入deferreturn()函数</li><li>defer函数的执行顺序是LIFO的，因为每次创建的defer结构都是插入到goroutine的defer链表表头</li><li>defer结构的有三种实现方式，堆上分配，栈上分配还有内联实现</li></ol><h3 id="3-8-interface"><a href="#3-8-interface" class="headerlink" title="3.8 interface"></a>3.8 interface</h3><h2 id="4-协程调度"><a href="#4-协程调度" class="headerlink" title="4. 协程调度"></a>4. 协程调度</h2><p>传统多线程的问题</p><p>线程需要在内核态运行，线程的切换会频繁的造成内核态和用户态的切换，造成性能浪费。</p><p>GMP模型</p><p>为了解决传统内核级的线程的创建、切换、销毁开销较大的问题，Go 语言将线程分为了两种类型：内核级线程 M （Machine），轻量级的用户态的协程 Goroutine：</p><p><strong>M</strong>： Machine的缩写，代表了内核线程 OS Thread，CPU调度的基本单元；</p><p><strong>G</strong>： Goroutine的缩写，用户态、轻量级的协程，一个 G 代表了对一段需要被执行的 Go 语言程序的封装；每个 Goroutine 都有自己独立的栈存放自己程序的运行状态；分配的栈大小 2KB，可以按需扩缩容；</p><p> <strong>P</strong>：Processor的缩写，代表一个虚拟的处理器，它维护一个局部的可运行的 G 队列，可以通过 CAS 的方式无锁访问，工作线程 M 优先使用自己的局部运行队列中的 G，只有必要时才会去访问全局运行队列，这大大减少了锁冲突，提高了大量 G 的并发性。每个 G 要想真正运行起来，首先需要被分配一个 P。</p><p><img src="https://s1.vika.cn/space/2023/04/13/13fa19fc71534492b2be543b3bbef704" alt=""></p><p>为什么不直接将本地队列放在 M 上、而是要放在 P 上呢？ 这是因为当一个线程 M 阻塞（可能执行系统调用或 IO请求）的时候，可以将和它绑定的 P 上的 G 转移到其他线程 M 去执行，如果直接把可运行 G 组成的本地队列绑定到 M，则万一当前 M 阻塞，它拥有的 G 就不能给到其他 M 去执行了。</p><p>基于 GMP 模型的 Go 调度器的核心思想是：</p><ol><li><strong>尽可能复用线程 M</strong>：避免频繁的线程创建和销毁；</li><li><strong>利用多核并行能力</strong>：限制同时运行（不包含阻塞）的 M 线程数为 N，N 等于 CPU 的核心数目，这里通过设置 P 处理器的个数为 GOMAXPROCS 来保证，GOMAXPROCS 一般为 CPU 核数，因为 M 和 P 是一一绑定的，没有找到 P 的 M 会放入空闲 M 列表，没有找到 M 的 P 也会放入空闲 P 列表；</li><li><strong>Work Stealing 任务窃取机制</strong>：M 优先执行其所绑定的 P 的本地队列的 G，如果本地队列为空，可以从全局队列获取 G 运行，也可以从其他 M 偷取 G 来运行；为了提高并发执行的效率，M 可以从其他 M 绑定的 P 的运行队列偷取 G 执行，这种 GMP 调度模型也叫<strong>任务窃取调度模型，</strong>这里，任务就是指 G；</li><li><strong>Hand Off 交接机制</strong>：M 阻塞，会将 M 上 P 的运行队列交给其他 M 执行，交接效率要高，才能提高 Go 程序整体的并发度；</li><li><strong>基于协作的抢占机制</strong>：每个真正运行的G，如果不被打断，将会一直运行下去，为了保证公平，防止新创建的 G 一直获取不到 M 执行造成饥饿问题，Go 程序会保证每个 G 运行10ms 就要让出 M，交给其他 G 去执行；</li><li><strong>基于信号的真抢占机制</strong>：尽管基于协作的抢占机制能够缓解长时间 GC 导致整个程序无法工作和大多数 Goroutine 饥饿问题，但是还是有部分情况下，Go调度器有无法被抢占的情况，例如，for 循环或者垃圾回收长时间占用线程，为了解决这些问题， Go1.14 引入了基于信号的抢占式调度机制，能够解决 GC 垃圾回收和栈扫描时存在的问题。</li></ol><p>其中G主要的六种状态是：</p><p>​        Gidle：G 被创建但还未完全被初始化；</p><p>​        Grunnable：当前 G 为可运行的，正在等待被运行；</p><p>​        Grunning：当前 G 正在被运行；</p><p>​        Gsyscall：当前 G 正在被系统调用；</p><p>​        Gwaiting：当前 G 正在因某个原因而等待；</p><p>​        Gdead：当前 G 完成了运行；</p><p><img src="https://s1.vika.cn/space/2023/04/13/f53c0b007bb8419197f073081ed7d405" alt=""></p><p>M 并没有像 G 和 P 一样的状态标记, 但可以认为一个 M 有以下的状态:</p><p>​        <strong>自旋中(spinning)</strong>: M 正在从运行队列获取 G, 这时候 M 会拥有一个 P；</p><p>​        <strong>执行go代码中</strong>: M 正在执行go代码, 这时候 M 会拥有一个 P；</p><p>​        <strong>执行原生代码中</strong>: M 正在执行原生代码或者阻塞的syscall, 这时M并不拥有P；</p><p>​        <strong>休眠中</strong>: M 发现无待运行的 G 时会进入休眠, 并添加到空闲 M 链表中, 这时 M 并不拥有 P。</p><p>P 结构体中的状态 status 字段会是以下五种中的一种：</p><p>​        _Pidle：P 没有运行用户代码或者调度器，被空闲队列或者改变其状态的结构持有，运行队列为空；</p><p>​        _Prunning：被线程 M 持有，并且正在执行用户代码或者调度器；</p><p>​        _Psyscall：没有执行用户代码，当前线程陷入系统调用；</p><p>​        _Pgcstop：被线程 M 持有，当前处理器由于垃圾回收被停止；</p><p>​        _Pdead：当前 P 已经不被使用；</p><p><img src="https://s1.vika.cn/space/2023/04/13/5b3d6a9698dd4a1fb925585dfa1c5921" alt=""></p><p><strong>schedt</strong></p><p>调度器的schedt结构体存储了全局的 G 队列，空闲的 M 列表和 P 列表</p><h2 id="5-垃圾回收"><a href="#5-垃圾回收" class="headerlink" title="5. 垃圾回收"></a>5. 垃圾回收</h2><p><strong>gc触发</strong></p><ul><li>基于时间的GC触发：Golang的GC会周期性地进行自动垃圾回收，这是基于时间的触发方式。在Golang 1.18中，GC的默认周期为2分钟，可以通过<code>debug.SetGCPercent()</code>函数修改触发条件。</li><li>基于内存分配量的GC触发：Golang的GC还可以基于内存分配量进行触发。在Golang 1.18中，当程序分配的内存量超过一定阈值时，会自动触发垃圾回收。阈值的大小可以通过<code>debug.SetGCPercent()</code>函数进行调整。</li><li>手动触发GC：Golang还提供了手动触发GC的方式，可以通过<code>runtime.GC()</code>函数强制进行垃圾回收。这种方式一般用于需要严格控制内存使用情况的场景。</li></ul><p><strong>三色标记法介绍</strong></p><p>程序中的对象分为白色、灰色和黑色三类：</p><ul><li>白色：潜在的垃圾，未被垃圾收集器访问到的对象，在回收开始阶段，所有对象都被标记为白色；回收结束后，白色对象均不可达，内存会被释放</li><li>灰色：活跃的对象，已被垃圾收集器访问到，但存在指向白色对象的外部指针，垃圾收集器需要继续扫描其子对象</li><li>黑色：活跃的对象，已被垃圾收集器访问到，其所有字段都已被扫描</li></ul><p>在不执行STW时，满足下面两个条件下会破坏垃圾收集器的正确性：</p><ul><li>条件1：某个黑色对象引用白色对象</li><li>条件2：从灰色对象出发，到达白色对象的、未经访问过的路径遭到破坏</li></ul><p><strong>强三色不变性和弱三色不变性</strong></p><ul><li>强三色不变性：黑色对象不会指向白色对象，只会指向灰色对象或黑色对象</li><li>弱三色不变性：黑色对象指向的白色对象，必须包含一条从灰色对象经由多个白色对象的可达路径</li></ul><p>强三色不变性和弱三色不变性就是为了破坏上面的条件1、2</p><p><strong>屏障技术</strong></p><p><strong>插入写屏障</strong></p><blockquote><p>在黑色对象引用一个白色对象时，将白色对象改为灰色</p></blockquote><p>在对象A引用对象B时，对象B被标记为灰色，满足强三色不变性。</p><p>对象在内存槽中有两种位置：栈和堆。栈空间的特点是容量小，但要求响应速度快，所以Go语言没有选择启用栈上的写屏障机制。</p><p>为了避免性能开销，栈没有启用插入写屏障机制，此时可能存在白色对象被引用的情况。为了避免对象被“误删”，需要对栈重新扫描。考虑到重新扫描时，可能会一直产生新的白色对象被引用，所以启动STW直到栈空间的三色标记结束，且重新扫描时会把栈上的对象全部置白。</p><p><strong>删除写屏障</strong></p><blockquote><p>在灰色对象引用白色对象时，用户将这个引用关系删除，触发写屏障仍然标记被删除的对象为灰色</p></blockquote><p>被删除的对象，如果自身为灰色或白色，那么被标记为灰色，满足弱三色不变性。</p><p>删除写屏障的优势在于标记阶段结束后能够准确回收不需要的内存，不需要重新扫描。但是它的回收精度低，一个对象的最后一个引用指针即使被删除了，该对象仍能够在本轮垃圾回收存在，需要等到下一轮GC才能被清除。</p><p><strong>混合写屏障</strong> </p><blockquote><p>go v1.8采用的就是三色标记+混合写屏障</p></blockquote><p>1、GC开始将栈上的对象全部扫描，可达对象全部并标记为黑色（之后不再进行第二次重复扫描，无需STW)<br>2、GC期间，任何在栈上创建的新对象，均为黑色<br>3、被删除的对象标记为灰色<br>4、被添加的对象标记为灰色</p><p>混合写屏障就是延迟到第二次GC删除</p><p>既然Go语言具有垃圾收集器，是不是就不会发生内存泄露了？</p><p>其实，在具有GC的语言中，内存泄露，用更严谨的话来说应该是：预期能够很快被释放的内存，由于附着在长期存活的内存、或生命期被意外延长，导致长时间得不到回收。比如：</p><p>（1）预期能被快速释放的内存因被根对象引用而没有得到迅速的释放</p><p>当有一个全局对象时，可能不经意间将某个变量附着在其上，且忽略释放该变量，则其内存永远不会得到释放。</p><p>（2）Goroutine泄露</p><p>Goroutine作为一种逻辑上理解的轻量级线程，需要维护执行用户代码的上下文信息。在运行过程中也需要消耗一定的内存来保存这些信息，而这些内存在目前版本的Go语言是不会被释放的。因此，当一个程序持续不断地产生新的Goroutine、且不结束已创建的Goroutine并复用这部分内存，就会造成内存泄露的现象。</p><p>垃圾回收器中的几个阶段和赋值器状态的描述，具体的含义如下：</p><ol><li>SweepTermination（清除终止阶段）：这个阶段是垃圾回收器进行一些准备工作的阶段，比如清除上一次垃圾回收器遗留下来的标记，为下一阶段的并发标记做准备工作。在这个阶段，垃圾回收器会启动写屏障，并使用 STW 的方式进行操作。</li><li>Mark（扫描标记阶段）：在这个阶段中，垃圾回收器会扫描堆中的对象，并对其进行标记，标记为存活对象或垃圾对象。这个阶段是并发执行的，意味着赋值器可以同时进行工作。写屏障会一直开启，以记录对象之间的引用关系。</li><li>MarkTermination（标记终止阶段）：这个阶段是标记任务完成后的阶段。在这个阶段中，垃圾回收器会重新扫描全局变量、扫描系统栈等，保证一个周期内标记任务完成，并停止写屏障的记录工作。这个阶段是使用 STW 的方式进行操作的。</li><li>GCoff（内存清除阶段）：在这个阶段中，垃圾回收器会将需要回收的内存归还到堆中，这个阶段是并发执行的。在这个阶段中，写屏障被关闭。</li><li>GCoff（内存归还阶段）：这个阶段是将过多的内存归还给操作系统的阶段，这个阶段也是并发执行的，写屏障也会被关闭。</li></ol><h2 id="6-内存管理"><a href="#6-内存管理" class="headerlink" title="6. 内存管理"></a>6. 内存管理</h2><p><img src="https://s1.vika.cn/space/2023/04/14/bfd397f2bdd648edb4db7558aa3dafb4" alt=""></p><p>golang内存中的对象分为Tiny、small、large，Tiny对象指大小在1Byte到16Byte之间并且不包含指针的对象。小对象和大对象只用大小划定，无其他区分，其中小对象大小在16Byte到32KB之间，大对象大小大于32KB。</p><p><img src="https://s1.vika.cn/space/2023/04/14/fd99c4e3d2664967b9ee439203942e66" alt=""></p><p><strong>为对象寻找span</strong> 寻找span的流程如下：</p><ol><li>计算对象所需内存大小size</li><li>根据size到size class映射，计算出所需的size class</li><li>根据size class和对象是否包含指针计算出span class</li><li>获取该span class指向的span</li></ol><p>以分配一个包含指针大小为20Byte的对象为例，根据映射表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class  bytes/obj  bytes/span  objects  tail waste  max waste</span></span><br><span class="line"><span class="comment">//     1          8        8192     1024           0     87.50%</span></span><br><span class="line"><span class="comment">//     2         16        8192      512           0     43.75%</span></span><br><span class="line"><span class="comment">//     3         32        8192      256           0     46.88%</span></span><br></pre></td></tr></table></figure><p>size class 3，它的对象大小范围是(16,32]Byte，20Byte刚好在此区间，所以此对象的size class为3，Size class到span class的计算如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// noscan为false代表对象包含指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSpanClass</span><span class="params">(sizeclass <span class="type">uint8</span>, noscan <span class="type">bool</span>)</span></span> spanClass &#123;</span><br><span class="line">    <span class="keyword">return</span> spanClass(sizeclass&lt;&lt;<span class="number">1</span>) | spanClass(bool2int(noscan))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，对应的span class为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">span class = <span class="number">3</span> &lt;&lt; <span class="number">1</span> | <span class="number">0</span> = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>所以该对象需要的是span class 7指向的span，自此，小对象内存分配完成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//from runtime.gomalloc.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sizeclass <span class="type">uint8</span></span><br><span class="line"><span class="comment">//step1: 确定规格sizeClass</span></span><br><span class="line"><span class="keyword">if</span> size &lt;= smallSizeMax<span class="number">-8</span> &#123;</span><br><span class="line">    sizeclass = size_to_class8[divRoundUp(size, smallSizeDiv)]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sizeclass = size_to_class128[divRoundUp(size-smallSizeMax, largeSizeDiv)]</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="type">uintptr</span>(class_to_size[sizeclass])</span><br><span class="line"><span class="comment">// size class到span class</span></span><br><span class="line">spc := makeSpanClass(sizeclass, noscan)</span><br><span class="line"><span class="comment">//step2: 分配对应spanClass 的 span</span></span><br><span class="line">span = c.alloc[spc]</span><br><span class="line">v := nextFreeFast(span)</span><br><span class="line"><span class="keyword">if</span> v == <span class="number">0</span> &#123;</span><br><span class="line">    v, span, shouldhelpgc = c.nextFree(spc)</span><br><span class="line">&#125;</span><br><span class="line">x = unsafe.Pointer(v)</span><br><span class="line"><span class="keyword">if</span> needzero &amp;amp;&amp;amp; span.needzero != <span class="number">0</span> &#123;</span><br><span class="line">    memclrNoHeapPointers(unsafe.Pointer(v), size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大对象(&gt;32KB)的分配则简单多了，直接在 mheap 上进行分配，首先计算出需要的内存页数和span class级别，然后优先从 <code>free</code> 中搜索可用的span，如果没有找到，会从 <code>scav</code> 中搜索可用的span，如果还没有找到，则向OS申请内存，再重新搜索2棵树，必然能找到span。如果找到的span比需求的span大，则把span进行分割成2个span，其中1个刚好是需求大小，把剩下的span再加入到 <code>free</code> 中去。</p>]]></content>
    
    
    <summary type="html">🥧本文讲述golang基础知识点</summary>
    
    
    
    <category term="golang" scheme="https://yanhool.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://yanhool.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>redis学习笔记</title>
    <link href="https://yanhool.github.io/posts/20230410d.html"/>
    <id>https://yanhool.github.io/posts/20230410d.html</id>
    <published>2023-04-10T01:19:03.000Z</published>
    <updated>2023-04-10T06:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="0-分布式理论"><a href="#0-分布式理论" class="headerlink" title="0.分布式理论"></a>0.分布式理论</h2><p><strong>什么是 CAP ?</strong></p><p>CAP 理论作为分布式系统的基础理论,它描述的是一个分布式系统在以下三个特性中：</p><ul><li>一致性(Consistency)</li><li>可用性(Availability)</li><li>分区容错性(Partition Tolerance)</li></ul><p>最多满足其中的两个特性，也就是下图所描述的：分布式系统要么满足 CA，要么 CP，要么 AP，而无法同时满足 CAP。</p><p><img src="https://s1.vika.cn/space/2023/04/17/13613aa10a7c45f4ad9a6635388cc520" style="zoom:40%;" /></p><p>分区容错性：指分布式系统中的某个节点或网络分区出现了故障时，整个系统仍然能对外提供满足一致性和可用性的服务，也就是说部分故障不影响整体使用。</p><p>可用性：系统一直可以正常地做读写操作，简单而言就是客户端一直可以正常访问并得到系统的正常响应，从用户角度来看是不会出现系统操作失败或者访问超时等问题。</p><p>一致性：在分布式系统完成某写操作后任何读操作，都应该获取到该写操作写入的那个最新的值。相当于要求分布式系统中的各节点时时刻刻保持数据的一致性。</p><p>BASE理论是CAP中一致性的妥协。和传统事务的ACID截然不同，BASE不追求强一致性，而是允许数据在一<br>段时间内是不一致的，但最终达到一致状态，从而获得更高的可用性和性能。</p><p><img src="https://s1.vika.cn/space/2023/04/17/1ac4ad06427948eea044fa46d6314e94" style="zoom:40%;" /></p><p><strong>Basically Available(基本可用)</strong><br>基本可用就是假设系统某个模块出现了不可预知的故障，但其他模块依旧可用，例如商城双十一活动时，评论模块出现故障，但不会影响交易、商品等核心模块的流程使用。</p><p><strong>Soft State(软状态)</strong><br>软状态指的是允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。</p><p><strong>Eventually Consistent(最终一致性)</strong><br>上面讲到的软状态不可能一直是软状态，必须有时间期限。在期限过后，应当保证所有副本保持数据一致性，从而达到数据的最终一致性，因此所有客户端对系统的数据访问最终都能够获取到最新的值，而这个时间期限取决于网络延时，系统负载，数据复制方案等因素。</p><h2 id="1-redis的基础数据结构"><a href="#1-redis的基础数据结构" class="headerlink" title="1.redis的基础数据结构"></a>1.redis的基础数据结构</h2><h3 id="1-1-redis-object"><a href="#1-1-redis-object" class="headerlink" title="1.1 redis object"></a>1.1 redis object</h3><p>Redis是key-value存储，key和value在Redist中都被抽象为对象，key只能是String对象，而Value支持丰富的对象种类，包括String、List、Set、HSet、Sorted、Stream等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//from Redis 5.0.5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LRU BITS 24</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisobject</span>&#123;</span></span><br><span class="line"><span class="type">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line"><span class="type">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line"><span class="type">unsigned</span> lru:LRU_BITS;<span class="comment">/*LRU time or</span></span><br><span class="line"><span class="comment">LFU data */</span></span><br><span class="line"><span class="type">int</span> refcount;</span><br><span class="line"><span class="type">void</span> *ptr;</span><br><span class="line">&#125;robj;</span><br></pre></td></tr></table></figure><p>type:是哪种Redis对象<br>encoding:表示用哪种底层编码，用OBJECT ENCODING[key]可以看到对应的编码方式<br>u:记录对象访问信息，用于内存淘汰<br>refcount:引用计数，用来描述有多少个指针，指向该对象<br>ptr:内容指针，指向实际内容</p><h3 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h3><blockquote><p>一般可以用来存字节数据、文本数据、序列化后的对象数据等。</p></blockquote><h4 id="1-2-1-基础数据结构"><a href="#1-2-1-基础数据结构" class="headerlink" title="1.2.1 基础数据结构"></a>1.2.1 基础数据结构</h4><p>Redis没有直接使用C语言传统的字符串表示（以空字符结尾的字符数组，以下简称C字符串)，而是自己构建了一种名为简单动态字符串(simple dynamic string,SDS)的抽象类型，并将SDS用作Redis的默认字符串表示，最大位512MB。</p><p>在Redis里面，C字符串只会作为字符串字面量（string literal)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sdshdr</span>&#123;</span><br><span class="line"><span class="comment">//记录buf数组中已使用字节的数量</span></span><br><span class="line"><span class="comment">//等于SDS所保存字符串的长度</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="comment">//记录buE数组中未使用字节的数量</span></span><br><span class="line"><span class="type">int</span> free;</span><br><span class="line"><span class="comment">//字节数组，用于保存字符串</span></span><br><span class="line"><span class="type">char</span> buf [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/04/10/07d3bbc315604c4097bc2cfb680be640" alt=""></p><p><code>free</code>属性的值为0，表示这个SDS没有分配任何未使用空间。<br><code>len</code>属性的值为5，表示这个SDS保存了一个五字节长的字符串。<br><code>buf</code>属性是一个<code>char</code>类型的数组，数组的前五个字节分别保存了’R’、’e’、’d’、’i’、’s’五个字符，而最后一个字节则保存了空字符 ‘\0’。</p><p>优点：</p><ol><li>常数复杂度获取字符串长度 <code>len</code></li><li>杜绝缓冲区溢出 <code>free</code></li><li>减少修改字符串时带来的内存重分配次数 <code>free</code>  buf大小=len+free+1(‘\0’)<ol><li>​    &lt; 1mb len = free</li><li>​    &gt; 1mb free = 1mb</li></ol></li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">作用</th><th style="text-align:left">时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left"><code>sdsnew</code></td><td style="text-align:left">创建一个包含给定 C 字符串的 SDS 。</td><td style="text-align:left">O(N) ， <code>N</code> 为给定 C 字符串的长度。</td></tr><tr><td style="text-align:left"><code>sdsempty</code></td><td style="text-align:left">创建一个不包含任何内容的空 SDS 。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>sdsfree</code></td><td style="text-align:left">释放给定的 SDS 。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>sdslen</code></td><td style="text-align:left">返回 SDS 的已使用空间字节数。</td><td style="text-align:left">这个值可以通过读取 SDS 的 <code>len</code> 属性来直接获得， 复杂度为 O(1) 。</td></tr><tr><td style="text-align:left"><code>sdsavail</code></td><td style="text-align:left">返回 SDS 的未使用空间字节数。</td><td style="text-align:left">这个值可以通过读取 SDS 的 <code>free</code> 属性来直接获得， 复杂度为 O(1) 。</td></tr><tr><td style="text-align:left"><code>sdsdup</code></td><td style="text-align:left">创建一个给定 SDS 的副本（copy）。</td><td style="text-align:left">O(N) ， <code>N</code> 为给定 SDS 的长度。</td></tr><tr><td style="text-align:left"><code>sdsclear</code></td><td style="text-align:left">清空 SDS 保存的字符串内容。</td><td style="text-align:left">因为惰性空间释放策略，复杂度为 O(1) 。</td></tr><tr><td style="text-align:left"><code>sdscat</code></td><td style="text-align:left">将给定 C 字符串拼接到 SDS 字符串的末尾。</td><td style="text-align:left">O(N) ， <code>N</code> 为被拼接 C 字符串的长度。</td></tr><tr><td style="text-align:left"><code>sdscatsds</code></td><td style="text-align:left">将给定 SDS 字符串拼接到另一个 SDS 字符串的末尾。</td><td style="text-align:left">O(N) ， <code>N</code> 为被拼接 SDS 字符串的长度。</td></tr><tr><td style="text-align:left"><code>sdscpy</code></td><td style="text-align:left">将给定的 C 字符串复制到 SDS 里面， 覆盖 SDS 原有的字符串。</td><td style="text-align:left">O(N) ， <code>N</code> 为被复制 C 字符串的长度。</td></tr><tr><td style="text-align:left"><code>sdsgrowzero</code></td><td style="text-align:left">用空字符将 SDS 扩展至给定长度。</td><td style="text-align:left">O(N) ， <code>N</code> 为扩展新增的字节数。</td></tr><tr><td style="text-align:left"><code>sdsrange</code></td><td style="text-align:left">保留 SDS 给定区间内的数据， 不在区间内的数据会被覆盖或清除。</td><td style="text-align:left">O(N) ， <code>N</code> 为被保留数据的字节数。</td></tr><tr><td style="text-align:left"><code>sdstrim</code></td><td style="text-align:left">接受一个 SDS 和一个 C 字符串作为参数， 从 SDS 左右两端分别移除所有在 C 字符串中出现过的字符。</td><td style="text-align:left">O(M*N) ， <code>M</code> 为 SDS 的长度， <code>N</code> 为给定 C 字符串的长度。</td></tr><tr><td style="text-align:left"><code>sdscmp</code></td><td style="text-align:left">对比两个 SDS 字符串是否相同。</td><td style="text-align:left">O(N) ， <code>N</code> 为两个 SDS 中较短的那个 SDS 的长度。</td></tr></tbody></table></div><p><strong>编码方式</strong></p><p><strong>INT编码</strong>：如果存储的字符串是整数值，并且大小在LONG MAX范围内，则会采用NT编码：直接将数据保存在Redisobject的ptr指针位置（刚好8字节），不再需要SDS了。<br><strong>EMBSTR编码</strong>：如果字符串小于等于阈值字节，使用EMBSTR编码；<br><strong>RAW编码</strong>：字符串大于阈值字节，则用RAW编码</p><p>EMBSTR和RAW都是由redisObject和SDS两个结构组成，它们的差异在于，EMBSTR下redisobject和SDS是连续的内存，RAW编码下redisobject和SDS的内存是分开的。<br>EMBSTR优点是redisobject和SDS两个结构可以一次性分配空间，缺点在于如果重新分配空间，整体都需要再分配，所以EMBSTR设计为只读，<strong>任何写操作之后EMBSTR都会变成RAW</strong>,理念是发生过修改的字符串通常会认为是易变的。</p><p><img src="https://s1.vika.cn/space/2023/04/18/2b6a8de4c8ef408eb094fbc02b5f2b89" alt=""></p><h4 id="1-2-2-常用操作"><a href="#1-2-2-常用操作" class="headerlink" title="1.2.2 常用操作"></a>1.2.2 常用操作</h4><p><img src="https://s1.vika.cn/space/2023/04/18/1d008b53835948d3a7448819bafbe368" alt=""></p><p><strong>SET</strong></p><p>语法：SET key value<br>功能：设置一个key的值为特定的value,成功则返回OK。<br>String.对象的创建或者更新都是该命令。</p><p><strong>SETNX</strong></p><p>语法：SETNX key value<br>功能：用于在指定的key不存在时，为key设置指定的值，返回值0表示key存在不做操作，1表示设置成功。<br>如果对存在的Key,调用SETNX:</p><p><strong>DEL</strong></p><p>语法：DEL key[key.]<br>功能：删除对象，返回值为删除成功了几行。</p><p><strong>GET</strong></p><p>语法：GET key<br>功能：查询某个key,存在就返回对应的value,如果不存在返回 nil。</p><p><strong>MGET</strong> </p><p>语法：MGET key[key..]<br>功能：一次查询多个key,如果某个key不存在，对应位置返回 nil。</p><h2 id="1-3-链表"><a href="#1-3-链表" class="headerlink" title="1.3 链表"></a>1.3 链表</h2><blockquote><p>List作为一个列表存储，属于比较底层的数据结构，可以使用的场景非常多，比如存储一批任务数据，存储一批消息等。</p><p>List最大元素个数是2^32-1(4,294,967,295)</p></blockquote><h4 id="1-3-1-基础数据结构"><a href="#1-3-1-基础数据结构" class="headerlink" title="1.3.1 基础数据结构"></a>1.3.1 基础数据结构</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">listNode</span> &#123;</span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">listNode</span> *prev;</span><br><span class="line">    <span class="comment">// 后置节点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">listNode</span> *next;</span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="type">void</span> *value;</span><br><span class="line">&#125; listNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">list</span> &#123;</span><br><span class="line">    <span class="comment">// 表头节点</span></span><br><span class="line">    listNode *head;</span><br><span class="line">    <span class="comment">// 表尾节点</span></span><br><span class="line">    listNode *tail;</span><br><span class="line">    <span class="comment">// 链表所包含的节点数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len;</span><br><span class="line">    <span class="comment">// 节点值复制函数</span></span><br><span class="line">    <span class="type">void</span> *(*dup)(<span class="type">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值释放函数</span></span><br><span class="line">    <span class="built_in">void</span> (*free)(<span class="type">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值对比函数</span></span><br><span class="line">    <span class="built_in">int</span> (*match)(<span class="type">void</span> *ptr, <span class="type">void</span> *key);</span><br><span class="line">&#125; list;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/04/10/f1dad5ba97824ee48195a015260aaea7" alt=""></p><p>dup、free和match成员则是用于实现多态链表所需的类型特定函数</p><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">作用</th><th style="text-align:left">时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left"><code>listSetDupMethod</code></td><td style="text-align:left">将给定的函数设置为链表的节点值复制函数。</td><td style="text-align:left">O(1) 。</td></tr><tr><td style="text-align:left"><code>listGetDupMethod</code></td><td style="text-align:left">返回链表当前正在使用的节点值复制函数。</td><td style="text-align:left">复制函数可以通过链表的 <code>dup</code> 属性直接获得， O(1)</td></tr><tr><td style="text-align:left"><code>listSetFreeMethod</code></td><td style="text-align:left">将给定的函数设置为链表的节点值释放函数。</td><td style="text-align:left">O(1) 。</td></tr><tr><td style="text-align:left"><code>listGetFree</code></td><td style="text-align:left">返回链表当前正在使用的节点值释放函数。</td><td style="text-align:left">释放函数可以通过链表的 <code>free</code> 属性直接获得， O(1)</td></tr><tr><td style="text-align:left"><code>listSetMatchMethod</code></td><td style="text-align:left">将给定的函数设置为链表的节点值对比函数。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>listGetMatchMethod</code></td><td style="text-align:left">返回链表当前正在使用的节点值对比函数。</td><td style="text-align:left">对比函数可以通过链表的 <code>match</code> 属性直接获得， O(1)</td></tr><tr><td style="text-align:left"><code>listLength</code></td><td style="text-align:left">返回链表的长度（包含了多少个节点）。</td><td style="text-align:left">链表长度可以通过链表的 <code>len</code> 属性直接获得， O(1) 。</td></tr><tr><td style="text-align:left"><code>listFirst</code></td><td style="text-align:left">返回链表的表头节点。</td><td style="text-align:left">表头节点可以通过链表的 <code>head</code> 属性直接获得， O(1) 。</td></tr><tr><td style="text-align:left"><code>listLast</code></td><td style="text-align:left">返回链表的表尾节点。</td><td style="text-align:left">表尾节点可以通过链表的 <code>tail</code> 属性直接获得， O(1) 。</td></tr><tr><td style="text-align:left"><code>listPrevNode</code></td><td style="text-align:left">返回给定节点的前置节点。</td><td style="text-align:left">前置节点可以通过节点的 <code>prev</code> 属性直接获得， O(1) 。</td></tr><tr><td style="text-align:left"><code>listNextNode</code></td><td style="text-align:left">返回给定节点的后置节点。</td><td style="text-align:left">后置节点可以通过节点的 <code>next</code> 属性直接获得， O(1) 。</td></tr><tr><td style="text-align:left"><code>listNodeValue</code></td><td style="text-align:left">返回给定节点目前正在保存的值。</td><td style="text-align:left">节点值可以通过节点的 <code>value</code> 属性直接获得， O(1) 。</td></tr><tr><td style="text-align:left"><code>listCreate</code></td><td style="text-align:left">创建一个不包含任何节点的新链表。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>listAddNodeHead</code></td><td style="text-align:left">将一个包含给定值的新节点添加到给定链表的表头。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>listAddNodeTail</code></td><td style="text-align:left">将一个包含给定值的新节点添加到给定链表的表尾。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>listInsertNode</code></td><td style="text-align:left">将一个包含给定值的新节点添加到给定节点的之前或者之后。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>listSearchKey</code></td><td style="text-align:left">查找并返回链表中包含给定值的节点。</td><td style="text-align:left">O(N) ， <code>N</code> 为链表长度。</td></tr><tr><td style="text-align:left"><code>listIndex</code></td><td style="text-align:left">返回链表在给定索引上的节点。</td><td style="text-align:left">O(N) ， <code>N</code> 为链表长度。</td></tr><tr><td style="text-align:left"><code>listDelNode</code></td><td style="text-align:left">从链表中删除给定节点。</td><td style="text-align:left">O(1) 。</td></tr><tr><td style="text-align:left"><code>listRotate</code></td><td style="text-align:left">将链表的表尾节点弹出，然后将被弹出的节点插入到链表的表头， 成为新的表头节点。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>listDup</code></td><td style="text-align:left">复制一个给定链表的副本。</td><td style="text-align:left">O(N) ， <code>N</code> 为链表长度。</td></tr><tr><td style="text-align:left"><code>listRelease</code></td><td style="text-align:left">释放给定链表，以及链表中的所有节点。</td><td style="text-align:left">O(N) ， <code>N</code> 为链表长度。</td></tr></tbody></table></div><p><strong>编码方式</strong></p><p>List对象编码分为ZIPLIST和LINKEDLIST，3.2版本后引入QUICKLIST</p><p>当满足如下条件时，用ZIPLIST编码：<br>1.列表对象保存的所有字符串对象长度都小于64字节；<br>2.列表对象元素个数少于512个。</p><p><img src="https://s1.vika.cn/space/2023/04/18/a72b7605d8f24a9983c8937515e0fa3e" alt=""></p><p>zlbytes:表示该ZIPLIST一共占了多少字节数，这个数字是包含zlbytes本身占据的字节的。<br>zltail:表示相对最后一个节点偏移了多少个字节，通过这个字段可以快速定位到尾部节点。这个偏移量使得对表尾的 <code>pop</code> 操作可以在无须遍历整个列表的情况下进行。<br>Zllen:表示有多少个数据节点，在本例中就有3个节点。<br>entry1~entry3:表示压缩列表数据节点。<br>zlend:一个特殊的entry节点，表示ZIPLIST的结束。</p><p><strong>ZIPLIST ENTRIES</strong></p><p>prevlen:表示上一个节点的数据长度。通过这个字段可以定位上一个节点的数据，实现以后往前操作，所以压缩列表才可以从后往前遍历。<br>如果前一节点(ZIPLIST ENTRIES)的长度小于254字节(255是一个特殊字符被zlend使用)，那么prevlen属性需要用1字节长的空间来保存这个长度值。<br>如果前一节点的长度大于等于254字节，那么prevlen属性需要用5字节长的空间来保存这个长度值。</p><p><img src="https://s1.vika.cn/space/2023/04/18/44f34a48262648148ac60e65d03e4542" alt="">encoding:记录data的长度和类型，长度可以用于正向遍历<br>entry-data:实际的数据。</p><p><strong>encoding</strong></p><p>字符串有三种编码：</p><ul><li><code>长度 &lt; 2^6</code> 时，以 <code>00</code> 开头，后 <strong>6</strong> 位表示 data 的长度，。</li><li><code>2^6 &lt;= 长度 &lt; 2^14</code> 时，以 <code>01</code> 开头，后续 6 位 + 下一个字节的 8 位 = <strong>14</strong> 位表示 data 的长度。</li><li><code>2^14 &lt;= 长度 &lt; 2^32</code> 字节时，以 <code>10</code> 开头，后续 6 位不用，从下一字节起连续 <strong>32</strong> 位表示 data 的长度。</li></ul><p><img src="https://s1.vika.cn/space/2023/04/18/f32a92a455724210acb39062a17307d0" alt=""></p><p>如果 <code>encoding</code> 以 <code>11</code> 开头，就表示数据类型是<strong>整数</strong>。</p><p><img src="https://s1.vika.cn/space/2023/04/18/98c0e2e4519c466cb5c1e9ef5e6c0f88" alt=""></p><p>看了上图的最后一个类型，可能有小伙伴就有疑问：为啥没有 <code>11111111</code> ？<br>答：因为 <code>11111111</code> 表示 <code>zlend</code> (十进制的 <code>255</code>，十六进制的 <code>oxff</code>)</p><p><strong>连锁更新</strong></p><p>通过上面的分析，我们知道：</p><ul><li>前个节点的长度小于 254 的时候，用 1 个字节保存 <code>prevlen</code></li><li>前个字节的长度大于等于 254 的时候，用 5 个字节保存 <code>prevlen</code></li></ul><p>现在我们来考虑一种情况：假设一个压缩列表中，有多个长度 <strong>250 ~ 253</strong> 的节点，假设是 entry1 ~ entryN。<br>因为都是小于 254，所以都是用 <strong>1 个字节</strong>保存 <code>prevlen</code>。<br>如果此时，在压缩列表最前面，插入一个 254 长度的节点，此时它的长度需要 <strong>5 个字节</strong>。<br>也就是说 <code>entry1.prevlen</code> 会从 1 个字节变为 <strong>5 个字节</strong>，因为 <code>prevlen</code> 变长，<code>entry1</code> 的长度超过 254 了。<br>这下就糟糕了，<code>entry2.prevlen</code> 也会因为 <code>entry1</code> 而变长，<code>entry2</code> 长度也会超过 254 了。<br>然后接着 <code>entry3</code> 也会连锁更新。。。直到节点不超过 254， 噩梦终止。。。</p><p>这种由于一个节点的增删，后续节点变长而导致的连续重新分配内存的现象，就是<strong>连锁更新</strong>。最坏情况下，会导致整个压缩列表的所有节点都重新分配内存。</p><p>每次分配空间的最坏时间复杂度是 $O(n)$，所以连锁更新的最坏时间复杂度高达 $O(n^2)$!</p><p>虽然说，连锁更新的时间复杂度高，但是它造成大的性能影响的概率很低，原因如下：</p><ol><li>压缩列表中需要需要有连续多个长度刚好为 <strong>250 ~ 253</strong> 的节点，才有可能发生连锁更新。实际上，这种情况并不多见。</li><li>即使有连续多个长度刚好为 <strong>250 ~ 253</strong> 的节点，连续的个数也不多，不会对性能造成很大影响</li></ol><p>因此，压缩列表插入操作，平均复杂度还是 $O(n)$.</p><p><strong>如何解决？</strong></p><p>连锁更新的原因是有prevlen引起的，我们需要一种不需要prevlen也能访问前一个节点的方法</p><p>LISTPACK</p><p><code>&lt;encoding-type&gt;&lt;element-data&gt;&lt;element-tot-len&gt;</code></p><p>encoding-type是编码类型，element-data是数据内容， element-tot-len存储整个节点除它自身之外的长度。</p><p>查询ZIPLIST的数据总量<br>由于ZIPLIST的neaderi定义了记录节点数量的字段zllen,所以通常是可以在O(1)时间复杂度直接返回的，为什么说通常呢？是因为zen是2个字节的，当zen大于65535时，zlen就存不下了，此时zlen等于0，所以真实的节点数量需要遍历来得到。这样设计的原因是Redis中应用ZIPLIST都是为了节点个数少的场景，所以将zlen设计得较小，节约内存空间。</p><p>element-tot-len所占用的每个字节的第一个bit用于标识是否结束。0是结束，1是继续，剩下7个bit来存储数据大小。当我们需要找到当前元素的上一个元素时，我们可以从后向前依次查找每个字节，找到上一个Entry的element-tot-len字段的结束标识，就可以算出上一个节点的首位置了。<br>举个例子：<br>如果上个节点的element-tot-len为0000000110000100，每个字节第一个bit标志是否结束，所以这里的element-tot-len一共就两个字节，大小为00000010000100，即132字节。如果不满足ZIPLISTS编码的条件，则使用LINKEDLIST编码</p><p><img src="https://s1.vika.cn/space/2023/04/18/206a6e166fdb42e98379e45f928167b8" alt=""></p><p>QUICKLIST是ZIPLIST和LINKEDLIST的结合体</p><p><img src="C:\Users\hyz\AppData\Roaming\Typora\typora-user-images\image-20230418110038971.png" alt="image-20230418110038971"></p><p>ZIPLIST本身存在一个连锁更新的问题，所以Redis7.0之后，使用了LISTPACK的编码模式取代了ZIPLIST,而他们其实本质都是一种压缩的列表，所以其实可以统一叫做压缩列表。</p><h4 id="1-3-2-常用操作"><a href="#1-3-2-常用操作" class="headerlink" title="1.3.2 常用操作"></a>1.3.2 常用操作</h4><p><img src="https://s1.vika.cn/space/2023/04/18/394af2651c614514b24fa1da3739e55c" alt=""></p><p><strong>LPUSH</strong></p><p>语法：LPUSH key value[value …]<br>功能：从头部增加元素，返回值为List中元素的总数。</p><p><strong>RPUSH</strong></p><p>语法：RPUSH key value[value …]<br>功能：从尾部增加元素，返回值为List中元素的总数。</p><p><strong>LPOP</strong></p><p>语法：LPOP key<br>功能：移出并获取列表的第一个元素。</p><p><strong>RPOP</strong></p><p>语法：RPOP key<br>功能：移出并获取列表的最后一个元素。</p><p><strong>DEL</strong></p><p>语法：DEL key[key…]<br>功能：删除对象，返回值为删除成功了几行。</p><p><strong>LLEN</strong></p><p>语法：LLEN key<br>功能：查看List的长度，即List中元素的总数。</p><p><strong>LRANGE</strong></p><p>语法：LRANGE key start stop<br>功能：查看start到stop为角标的元素。如果是负数就表示倒数第几个元素。</p><h2 id="1-3-字典"><a href="#1-3-字典" class="headerlink" title="1.3 字典"></a>1.3 字典</h2><h4 id="1-3-1-哈希表"><a href="#1-3-1-哈希表" class="headerlink" title="1.3.1 哈希表"></a>1.3.1 哈希表</h4><p>Redis 的字典使用哈希表作为底层实现， 一个哈希表里面可以有多个哈希表节点， 而每个哈希表节点就保存了字典中的一个键值对。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dictEntry</span> &#123;</span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">    <span class="type">void</span> *key;</span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">        <span class="type">uint64_t</span> u64;</span><br><span class="line">        <span class="type">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dictEntry</span> *next;</span><br><span class="line">&#125; dictEntry;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dictht</span> &#123;</span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sizemask;</span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/04/10/75276d31d87a449f8cd39e35e903f865" alt=""></p><h4 id="1-3-2-字典"><a href="#1-3-2-字典" class="headerlink" title="1.3.2 字典"></a>1.3.2 字典</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dict</span> &#123;</span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="type">void</span> *privdata;</span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="type">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">&#125; dict;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dictType</span> &#123;</span><br><span class="line">    <span class="comment">// 计算哈希值的函数</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *key)</span></span>;</span><br><span class="line">    <span class="comment">// 复制键的函数</span></span><br><span class="line">    <span class="type">void</span> *(*keyDup)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *key);</span><br><span class="line">    <span class="comment">// 复制值的函数</span></span><br><span class="line">    <span class="type">void</span> *(*valDup)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *obj);</span><br><span class="line">    <span class="comment">// 对比键的函数</span></span><br><span class="line">    <span class="built_in">int</span> (*keyCompare)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *key1, <span class="type">const</span> <span class="type">void</span> *key2);</span><br><span class="line">    <span class="comment">// 销毁键的函数</span></span><br><span class="line">    <span class="built_in">void</span> (*keyDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *key);</span><br><span class="line">    <span class="comment">// 销毁值的函数</span></span><br><span class="line">    <span class="built_in">void</span> (*valDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *obj);</span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure><p><code>ht</code> 属性是一个包含两个项的数组， 数组中的每个项都是一个 <code>dictht</code> 哈希表， 一般情况下， 字典只使用 <code>ht[0]</code> 哈希表， <code>ht[1]</code> 哈希表只会在对 <code>ht[0]</code> 哈希表进行 rehash 时使用。除了 <code>ht[1]</code> 之外， 另一个和 rehash 有关的属性就是 <code>rehashidx</code> ： 它记录了 rehash 目前的进度， 如果目前没有在进行 rehash ， 那么它的值为 <code>-1</code> 。</p><p><strong>rehash</strong></p><ol><li>为字典的<code>ht[1]</code>哈希表分配空间， 这个哈希表的空间大小取决于要执行的操作， 以及<code>ht[0]</code>当前包含的键值对数量 （也即是<code>ht[0].used</code>属性的值）：<ul><li>如果执行的是扩展操作， 那么 <code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used * 2</code> 的 2^n （<code>2</code> 的 <code>n</code> 次方幂）；</li><li>如果执行的是收缩操作， 那么 <code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used</code> 的 2^n 。</li></ul></li><li>将保存在 <code>ht[0]</code> 中的所有键值对 rehash 到 <code>ht[1]</code> 上面： rehash 指的是重新计算键的哈希值和索引值， 然后将键值对放置到 <code>ht[1]</code> 哈希表的指定位置上。</li><li>当 <code>ht[0]</code> 包含的所有键值对都迁移到了 <code>ht[1]</code> 之后 （<code>ht[0]</code> 变为空表）， 释放 <code>ht[0]</code> ， 将 <code>ht[1]</code> 设置为 <code>ht[0]</code> ， 并在 <code>ht[1]</code> 新创建一个空白哈希表， 为下一次 rehash 做准备。</li></ol><p>当以下条件中的任意一个被满足时，程序会自动开始对哈希表执行扩展操作：</p><ol><li>服务器目前没有在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 <code>1</code> ；</li><li>服务器目前正在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 <code>5</code> ；</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载因子 = 哈希表已保存节点数量 / 哈希表大小</span></span><br><span class="line"><span class="attribute">load_factor</span> = ht[<span class="number">0</span>].used / ht[<span class="number">0</span>].size</span><br></pre></td></tr></table></figure><blockquote><p>BGSAVE：Redis Bgsave 命令用于在后台异步保存当前数据库的数据到磁盘。</p><p>BGREWRITEAOF：Redis Bgrewriteaof 命令用于异步执行一个 AOF（AppendOnly File） 文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。即使 Bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。</p><p>根据BGSAVE命令或BGREWRITEAOF命令是否正在执行，服务器执行扩展操作所需的负载因子并不相同，这是因为在执行BGSAVE命令或BGREWRITEAOF命令的过程中，Redis需要创建当前服务器进程的子进程，而大多数操作系统都采用写时复制( copy-on-write)技术来优化子进程的使用效率，所以在子进程存在期间，服务器会提高执行扩展操作所需的负载因子，从而尽可能地避免在子进程存在期间进行哈希表扩展操作，这可以避免不必要的内存写入操作，最大限度地节约内存。</p><p>类Unix的操作系统中创建进程的API是fork()，传统的fork()函数会创建父进程的一个完整副本，例如父进程的地址空间现在用到了1G的内存，那么fork()子进程的时候要复制父进程整个进程的地址空间（占有1G内存）给子进程，这个过程是很耗时的。</p><p>而Linux中的fork()函数就聪明得多了，fork()子进程的时候，并不复制整个进程的地址空间，而是让父子进程共享同一个地址空间；只用在父进程或者子进程需要写入的时候才会复制地址空间，从而使父子进程拥有各自的地址空间。</p><p>写入时复制（英语：Copy-on-write，简称COW）是一种计算机程序设计领域的优化策略。其核心思想是，如果有多个调用者（callers）同时要求相同资源（如内存或磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的（transparently）。此作法主要的优点是如果调用者没有修改该资源，就不会有副本（private copy）被创建，因此多个调用者只是读取操作时可以共享同一份资源。</p><p>fork()之后，kernel把父进程中所有的内存页的权限都设为read-only，然后子进程的地址空间指向父进程。当父子进程都只读内存时，相安无事。当其中某个进程写内存时，CPU硬件检测到内存页是read-only的，于是触发页异常中断（page-fault），陷入kernel的一个中断例程。中断例程中，kernel就会把触发的异常的页复制一份，于是父子进程各自持有独立的一份。</p><p>优点：<br>COW技术可减少分配和复制大量资源时带来的瞬间延时。<br>COW技术可减少不必要的资源分配。比如fork进程时，并不是所有的页面都需要复制，父进程的代码段和只读数据段都不被允许修改，所以无需复制。</p><p>缺点：<br>如果在fork()之后，父子进程都还需要继续进行写操作，那么会产生大量的分页错误(页异常中断page-fault)，这样就得不偿失。</p></blockquote><ul><li>Redis在持久化时，如果是采用BGSAVE命令或者BGREWRITEAOF的方式，那Redis会fork出一个子进程来读取数据，从而写到磁盘中。</li><li>总体来看，Redis还是读操作比较多。如果子进程存在期间，发生了大量的写操作，那可能就会出现很多的分页错误(页异常中断page-fault)，这样就得耗费不少性能在复制上。</li><li>而在rehash阶段上，写操作是无法避免的。所以Redis在fork出子进程之后，将负载因子阈值提高，尽量减少写操作，避免不必要的内存写入操作，最大限度地节约内存。</li></ul><p><strong>渐进式 rehash</strong></p><p>如果<code>ht[0]</code>的kv很多，一次性分配完会造成服务器性能抖动，需要分批次rehash</p><p>哈希表渐进式 rehash 的详细步骤：</p><ol><li>为 <code>ht[1]</code> 分配空间， 让字典同时持有 <code>ht[0]</code> 和 <code>ht[1]</code> 两个哈希表。</li><li>在字典中维持一个索引计数器变量 <code>rehashidx</code> ， 并将它的值设置为 <code>0</code> ， 表示 rehash 工作正式开始。</li><li>在 rehash 进行期间， 每次对字典执行添加、删除、查找或者更新操作时， 程序除了执行指定的操作以外， 还会顺带将 <code>ht[0]</code> 哈希表在 <code>rehashidx</code> 索引上的所有键值对 rehash 到 <code>ht[1]</code> ， 当 rehash 工作完成之后， 程序将 <code>rehashidx</code> 属性的值增一。</li><li>随着字典操作的不断执行， 最终在某个时间点上， <code>ht[0]</code> 的所有键值对都会被 rehash 至 <code>ht[1]</code> ， 这时程序将 <code>rehashidx</code> 属性的值设为 <code>-1</code> ， 表示 rehash 操作已完成。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">作用</th><th style="text-align:left">时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left"><code>dictCreate</code></td><td style="text-align:left">创建一个新的字典。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>dictAdd</code></td><td style="text-align:left">将给定的键值对添加到字典里面。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>dictReplace</code></td><td style="text-align:left">将给定的键值对添加到字典里面， 如果键已经存在于字典，那么用新值取代原有的值。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>dictFetchValue</code></td><td style="text-align:left">返回给定键的值。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>dictGetRandomKey</code></td><td style="text-align:left">从字典中随机返回一个键值对。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>dictDelete</code></td><td style="text-align:left">从字典中删除给定键所对应的键值对。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><code>dictRelease</code></td><td style="text-align:left">释放给定字典，以及字典中包含的所有键值对。</td><td style="text-align:left">O(N) ， <code>N</code> 为字典包含的键值对数量。</td></tr></tbody></table></div><h3 id="1-4-跳表"><a href="#1-4-跳表" class="headerlink" title="1.4 跳表"></a>1.4 跳表</h3><p>跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">zskiplistNode</span> &#123;</span><br><span class="line">    <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">zskiplistNode</span> *backward;</span><br><span class="line">    <span class="comment">// 分值</span></span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">    <span class="comment">// 成员对象</span></span><br><span class="line">    robj *obj;</span><br><span class="line">    <span class="comment">// 层</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">zskiplistLevel</span> &#123;</span><br><span class="line">        <span class="comment">// 前进指针</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">zskiplistNode</span> *forward;</span><br><span class="line">        <span class="comment">// 跨度</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> span;</span><br><span class="line">    &#125; level[];</span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/04/10/263df741096149b9885d60c675cfb30e" alt=""></p><ul><li><code>header</code> ：指向跳跃表的表头节点。</li><li><code>tail</code> ：指向跳跃表的表尾节点。</li><li><code>level</code> ：记录目前跳跃表内，层数最大的那个节点的层数（表头节点的层数不计算在内）。</li><li><code>length</code> ：记录跳跃表的长度，也即是，跳跃表目前包含节点的数量（表头节点不计算在内）。</li></ul><p><img src="https://s1.vika.cn/space/2023/04/10/dfde1cb3bf814d8b9f0d2c37fb2bf8ba" alt=""></p><h3 id="1-5-Set"><a href="#1-5-Set" class="headerlink" title="1.5 Set"></a>1.5 Set</h3><blockquote><p>Redis的Set是一个不重复、无序的字符串集合。</p><p>适用于无序集合场景，比如某个用户关注了哪些公众号，这些信息就可以放进一个集合，St还提供了查交集、并集的功能，可以很方便地实现共同关注的能力。</p></blockquote><p>两种编码</p><p>Rdis出于性能和内存的综合考虑，也支持两种编码方式，如果集群元素都是整数，且元素数量不超过512个，就可以用INTSET编码，结构如下图，可以看到INTSET排列比较紧凑，内存占用少，但是查间时需要二分查找。</p><p><img src="https://s1.vika.cn/space/2023/04/18/8a02345f97244d4f8ca0ab91d76ff5a8" alt=""></p><p>不满足条件就使用HASHTABLE编码</p><p><img src="https://s1.vika.cn/space/2023/04/18/62904e6d54ef4a45832c34b2d5b937db" alt=""></p><p>采用两种编码方式的原因是INTSET.更节约内存，所以在小数据量时使用，而数据多起来了，需要HASHTABLE的查找性能。<br>实际上如果St中保存的所有元素都是整数，而且元素个数不是特别多的情况下，使用intset会比较节约内存，Redis用一个含有三个字段的结构体来表示intset,分别是编码方式、元素数量和实际存储元素的有序柔性数组:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span>&#123;</span></span><br><span class="line"><span class="type">uint32_t</span> encoding.;<span class="comment">//编码格式</span></span><br><span class="line"><span class="type">uint32_t</span> length;<span class="comment">//元素数量</span></span><br><span class="line">int8 t contents[];<span class="comment">//保存元素的数组</span></span><br><span class="line">&#125;intset;</span><br></pre></td></tr></table></figure><h4 id="1-5-2常见操作"><a href="#1-5-2常见操作" class="headerlink" title="1.5.2常见操作"></a>1.5.2常见操作</h4><p><img src="https://s1.vika.cn/space/2023/04/18/eb4ca2a7ab854a809f641e2dc2ee788a" alt=""></p><p><strong>SADD</strong></p><p>语法：SADD key member[member…]<br>功能：添加元素，返回值为成功添加了几个元素。</p><p><strong>SREM</strong></p><p>语法：SREM key member[member…]<br>功能：删除元素，返回值为成功删除了几个元素。</p><p><strong>SISMEMBER</strong></p><p>语法：SISMEMBER key member<br>功能：查询元素是否存在</p><p><strong>SCARD</strong></p><p>语法：SCARD key<br>功能：查询集合元素个数</p><p><strong>SMEMBERS</strong></p><p>语法：SMEMBERS key<br>功能：查看集合的所有元素。</p><p><strong>SSCAN</strong></p><p>语法：SSCAN key cursor[MATCH pattern][COUNT count]<br>功能：查看集合元素，可以理解为指定游标进行查询，可以指定个数，默认个数为10</p><p><strong>SINTER</strong></p><p>语法：SINTER key[key…]<br>功能：返回在第一个集合里，同时在后面所有集合都存在的元素。</p><p><strong>SUNION</strong></p><p>语法：SUNION key[key…]<br>功能：返回所有集合的并集，集合个数大于等于2</p><p><strong>SDIFF</strong></p><p>语法：SDIFF key[key…]<br>功能：返回第一个集合有，且在后续集合中不存在的元素，集合个数大于等于2，注意，是以第一个集合和后面比，看第一个集合多了哪些元素。</p><h3 id="1-6-HSET"><a href="#1-6-HSET" class="headerlink" title="1.6 HSET"></a>1.6 HSET</h3><p>Redis HSet是一个field、value都为string的hash表，存储在Redis的内存中。<br>Redis中每个hash可以存储$2^{32}-1$键值对(40多亿)。<br>适用于$O(1)$时间字典查找某个field对应数据的场景，比如任务信息的配置，就可以任务类型为filed,任务配置参数为value。</p><p><img src="https://s1.vika.cn/space/2023/04/18/7824fcc7b05a4db7a2926f042d599bbd" alt=""></p><h4 id="1-6-2-常见操作"><a href="#1-6-2-常见操作" class="headerlink" title="1.6.2 常见操作"></a>1.6.2 常见操作</h4><p><strong>HSET</strong></p><p>语法：HSET key field value<br>功能：为集合对应field设置value数据。</p><p><strong>HSETNX</strong></p><p>语法：HSETNX key field value<br>功能：如果field.不存在，则为集合对应field设置value数据。</p><p><strong>HDEL</strong></p><p>语法：HDEL key field[field…]<br>功能：删除指定field,可以一次删除多个。</p><p><strong>DEL</strong></p><p>语法：DEL key[key…]<br>功能：删除HSET对象。</p><p><strong>HMSET</strong></p><p>语法：HMSET key field value[field value.]<br>功能：可以设置多个键值对。</p><p>在redis4.0.0后被弃用，使用SET也可以加入多个键值对</p><p><strong>HGETALL</strong></p><p>语法：HGETALL key<br>功能：查找全部数据。</p><p><strong>HGET</strong></p><p>语法：HGET key field<br>功能：查找某个key。</p><p><strong>HLEN</strong></p><p>语法：HLEN key<br>功能：查找HSet中元素总数。</p><p><strong>HSCAN</strong></p><p>语法：HSCAN key cursor[MATCH pattern][COUNT count]<br>功能：从指定位置查询一定数量的HSet数据。</p><h3 id="1-7-ZSet"><a href="#1-7-ZSet" class="headerlink" title="1.7 ZSet"></a>1.7 ZSet</h3><blockquote><p>ZSet就是有序集合，也叫Sorted Set,是一组按关联积分有序的字符串集合，这里的分数是个抽象概念，任何指标都可以抽象为分数，以满足不同场景。积分相同的情况下，按字典序排序。</p><p>用于需要排序集合的场景，最为典型的就是游戏排行榜。</p></blockquote><p>ZSet底层编码有两种，一种是ZIPLIST,一种是SKIPLIST+HT(hashtable)。</p><p>如果满足如下规则，ZSet就用ZIPLIST编码：<br>1.列表对象保存的所有字符串对象长度都小于64字节：<br>2.列表对象元素个数少于128个。<br>两个条件任何一条不满足，编码机构就用SKIPLIST+HT<br>SKIPLIST是一种可以快速查找的多级链表结构，通过skiplist可以快速定位到数据所在。它的排名操作、范围查询性能都很高</p><h3 id="1-8-Stream"><a href="#1-8-Stream" class="headerlink" title="1.8 Stream"></a>1.8 Stream</h3><blockquote><p>Stream是Redis5.O版本新增加的操作对象。Stream可以看作一个拥有持久化能力的轻量级<strong>消息队列</strong>。</p><p>Stream可以作为轻量级队列，可以支持发布订阅场景。</p></blockquote><p>“消息队列”是在消息的传输过程中保存消息的容器。</p><p><strong>为什么不使用Redis 发布订阅 (pub/sub) 来实现消息队列</strong></p><p>Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，支持发布 / 订阅，支持多组生产者、消费者处理消息。但是存在很多问题：<br>1.消费者下线，数据会丢失。<br>2.不支持数据持久化，Redis 宕机，数据也会丢失，Pub/Sub 没有基于任何数据类型实现，不会写入到 RDB 和 AOF 中，当 Redis 宕机重启，Pub/Sub 的数据也会全部丢失。<br>3.消息堆积，缓冲区溢出，消费者会被强制踢下线，数据也会丢失。缓冲区的默认配置：client-output-buffer-limit pubsub 32mb 8mb 60。它的参数含义如下：<br>    32mb：缓冲区一旦超过 32MB，Redis 直接强制把消费者踢下线。<br>    8mb + 60：缓冲区超过 8MB，并且持续 60 秒，Redis 也会把消费者踢下线。</p><p>Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。</p><h4 id="1-8-2-常见操作"><a href="#1-8-2-常见操作" class="headerlink" title="1.8.2 常见操作"></a>1.8.2 常见操作</h4><p>XADD</p><p>语法：XADD key ID(流ID,可以用自动生成)field string [field string …]<br>功能：向Stream中添加流数据，如果没有就新建一个Stream,返回值是一个流ID如果输入时是自定义流ID,返回值与之相同，如果用*自动生成，返回的就是自动生成的流ID。</p><h3 id="1-9-对象过期时间和引用计数"><a href="#1-9-对象过期时间和引用计数" class="headerlink" title="1.9 对象过期时间和引用计数"></a>1.9 对象过期时间和引用计数</h3><p>Redis的过期时间是给一个key,指定一个时间点，等达到这个时间，数据就被认为是过期数据，可以由Redisi进行回收。</p><p>SET key value EX seconds:设置多少秒之后过期<br>SET key value PX milliseconds:设置多少毫秒之后过期<br>TTL key:查看还有多久过期</p><p>过期之后的键实际上不是立刻删除的，一般过期键清除策略有三种，分别是定时删除、定期删除和惰性删除。<br>定时删除，是在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作，定时删除对内存比较友好，但是对CPU不友好，如果某个时间段比较多的Key过期，可能会影响命令处理性能。<br>惰性删除，是指使用的时候，发现Key过期了，此时再进行删除，但是这样的代价就是如果某些Ky一直不来访问，那本该过期的Key,就变成常驻的Key。这种策略对CPU最友好，对内存不太友好。<br>定期删除，每隔一段时间，程序就对数据库进行一次检查，每次删除一部分过期键，这属于一种渐进式兜底策略。</p><p>Redis过期键采用的是<strong>惰性删除+定期删除</strong>二者结合的方式进行删除的。</p><p>定期删除的默认频率是1s 10次， 每次删除的数量每次检查的数量是写死在代码里的，每次20个，但是这里还会检查过期key数量占比，大于25%，则再抽出20个来检查，重复流程，这里是一个循环。比如100个key100个都过期了。第一次掌出来20个，还剩80个，发现80%大于25%,继续拿20个。直到拿到了20%。才会停下。</p><p>redisobject的结构定义，其中有个字段叫refcount,这个refcount就是Redis中的用计数。</p><p>当refcount减少到0，就会触发对象的释放。Redis的引用计数，目前是为整数数据服务的。Redis会在初始化服务器时，会创建10000个数值从0到9999的字符串对象。当服务器、新创建的键需要用到值为0到9999的字符<br>串对象时，服务器就会使用这些共享对象，而不是新创建对象。</p><p>为什么只做0-9999的字符串对象池呢，关键因素有几点：<br>1.0-9999的整数，被使用的几率是很大的，复用是有场景的。<br>2.整数存储空间比较小，而每个redisObject内部结构至少占16字节，这比整数本身占据的空间还大，频繁分配整数是比较大的开销<br>3.要复用对象，就需要进行数值比较，而整数对象进行比较，成本最低，如果是其它字符串，需要遍历字符串所有字符，而其它如List、ZSet的对比成本就更高了。</p><h3 id="1-10-redis-object总结"><a href="#1-10-redis-object总结" class="headerlink" title="1.10 redis object总结"></a>1.10 redis object总结</h3><p><img src="https://s1.vika.cn/space/2023/04/19/c4f7f8ab353e4a35a4a9c3ef8ccf7879" alt=""></p><h2 id="2-redis是怎么样运作的"><a href="#2-redis是怎么样运作的" class="headerlink" title="2. redis是怎么样运作的"></a>2. redis是怎么样运作的</h2><h3 id="2-1-redis内存管理"><a href="#2-1-redis内存管理" class="headerlink" title="2.1 redis内存管理"></a>2.1 redis内存管理</h3><p>redisDb即数据库对象，指向了数据字典，字典里包含了我们平常存储的k-v数据，k是字符串对象，value支持任意Redis对象</p><p><img src="https://s1.vika.cn/space/2023/04/19/7c0dea945ec44c25ba3e5b6bf2b03f52" alt=""></p><p>如果我们使用命令：SET hellomsg”hello mart”,键空间会变成如下结构。</p><p><img src="https://s1.vika.cn/space/2023/04/19/daa991c3fc554900ae2f06a66e939e81" style="zoom:60%;" /></p><p>redis的过期键存储在expires字段上</p><p><img src="https://s1.vika.cn/space/2023/04/19/697cf06985a3427eb3e1a5640bacff4c" alt=""></p><p>注意，这里的dict中和expires中Key对象，实际都是存储的String对象指针，所以并不是会重复占用内容。内存有片地址存诸这些字符串，而dict和expires中的key实际存储的都是指向内存相应字符串的地址</p><h3 id="2-2-I-O复用"><a href="#2-2-I-O复用" class="headerlink" title="2.2 I/O复用"></a>2.2 I/O复用</h3><p>首先，我们知道Redis是完全在内存中处理数据，所以我们最应该考虑的瓶颈是/O,我们下面通过分析一次请求，来看一下，一个单线程在一次完整的处理中，会有哪些地方可能拖慢整个流程。<br>Redis的服务端在启动的时候，已经bind了端口，并且用listen操作监听客户端请求，此时客户端就可以发起连接请求。此时，客户端发起一次处理请求，比如，客户端发来一个GET请求，服务端需要哪些事情：<br>1.客户端请求到来时候，使用accept建立连接<br>2.调用recv从套接字中读取请求<br>3.解析客户端发送请求，拿到参数<br>4.处理请求，这里是Get,那么Redis就是通过Key获取对应的数据<br>5.最后将数据通过send发送给客户端</p><p>套接字是默认阻塞模式的，这里阻塞可能会发生在两个地方。一个是accept,比如accepti建立时间过长，另一个是recv时客户端一直没有发送数据。此时，Redis服务就会阻塞在那里。<br>Rdis本身定位就是单线程，发生这种阻塞会将整个服务都卡住。所以不能上这两个操作阻塞，这里Rdis将套接字设置为非阻塞式的，这样accept和recv都可以非阻塞调用。非阻塞调用下，如果没数据，不会阻塞在那里，而是让你返回做其它事情。这样可以解决卡死的问题。但我们也需要一种机制，能回过头来看看这些操作是否已经就绪。</p><p>什么叫I/O多路复用，简单理解来说，就是有I/O操作触发的时候，就会产生通知，收到通知，再去处理通知对应的事件，针对I/O多路复用，Redis做了一层包装，叫Reactor模型。</p><p><img src="https://s1.vika.cn/space/2023/04/19/200387990ff94544965cf1b95d370634" alt=""></p><h3 id="2-3-redis处理过程"><a href="#2-3-redis处理过程" class="headerlink" title="2.3 redis处理过程"></a>2.3 redis处理过程</h3><blockquote><p>关于 <a href="https://segmentfault.com/a/1190000003063859">I/O多路复用</a>文章</p></blockquote><p>redis:实现了一个AE库，它是”A simple Event drived programming library”的简写，翻译过来就是一个简单的事件驱动库，它会根据系统的内核版本自动选择select,epoll,kqueue 等不同多路复用的方式。</p><p><strong>处理流程：监听端口，注册事件 -&gt; 连接到达处理 -&gt; 客户端数据处理 -&gt; 给客户端回包</strong></p><p>监听端口，注册事件</p><h2 id="3-redis数据丢失怎么办"><a href="#3-redis数据丢失怎么办" class="headerlink" title="3. redis数据丢失怎么办"></a>3. redis数据丢失怎么办</h2><h3 id="3-1-持久化介绍"><a href="#3-1-持久化介绍" class="headerlink" title="3.1 持久化介绍"></a>3.1 持久化介绍</h3><p>Redis提供两种方式来持久化：<br>1.RDB(Redis Database),记录Redis:某个时刻的全部数据，这种方式本质就是数据快照，直接保存二进制数据到磁盘，后续通过加载RDB文件恢复数据。<br>2.AOF(Append Only File),记录执行的每条命令，重启之后通过重放命令来恢复数据，AOF本质是记录操作日志，后续通过日志重放恢复数据。</p><p>RDB是快照恢复，AOF是日志恢复，这是两者本质区别<br>体积方面：相同数据量下，RDB体积更小，因为RDB是记录的二进制紧凑型数据<br>恢复速度：RDB是数据快照，可以直接加载，而AOF文件恢复，相当于重放情况，RDB显然会更快<br>数据完整性：AOF记录了每条日志，RDB是间隔一设时间记录一次，用AOF恢复数据通常会更为完整。</p><h3 id="3-2-RDB"><a href="#3-2-RDB" class="headerlink" title="3.2 RDB"></a>3.2 RDB</h3><p>save:主线程执行保存操作，会阻塞主线程</p><p>bgsave：创建一个子线程，执行保存操作，不会阻塞子线程</p><p>达到阈值：比如满足周期函数，调用bgsave</p><p>关闭程序：redis关闭会用save执行保存</p><p>RDB做了什么</p><p>从整体上，是做了以下事项：<br>1.Fork出一个子进程来专门做RDB特久化<br>2.子进程写数据到临时的RDB文件<br>3.写完之后，用新RDB文件替换旧的RDB文件。</p><p>这种方式让Redis,从写时复制技术受益，实际上说明了：执行RDB特久化过程中，Rdis依然可以继续处理操作命令的，也就是数据是能被修改的，这就是通过写时复制技术实现的。<br>具体而言：fork创建子进程之后，通过写时复制技术，子进程和父进程是共享同一片内存数据的，因为创建子进程的时候，会复制父进程的页表，但是页表指向的物理内存还是一个</p><h3 id="3-3-AOF"><a href="#3-3-AOF" class="headerlink" title="3.3 AOF"></a>3.3 AOF</h3><p>配置文件中appendonly设置为yes,即可打开AOF</p><p>打开之后，Rdis每条更改数据的操作都会记泉到AOF文件中，当你重启，AOF会助你重建状态，相当于就是请求全部重放一次，所以AOF恢复起来会比较慢。</p><p>Redis提供的3种刷盘策略，以便根据需要进行不同的选择。<br>1.appendfsync always,每次请求都刷入AOF,用官方的话说，非常慢，非常安全<br>2.appendfsync everysec,每秒刷一次盘，用官方的话来说就是足够快了，但是在崩溃场景下你可能会丢失1秒的数据。<br>3.appendfsync no,不主动刷盘，让操作系统自己刷，一般情况Linux会每30秒刷一次盘，这种策略下，可以说对性的影响最小，但是如果发生崩溃，可能会丢失相对比较多的数据。<br>Redis建议是方案二，也就是每秒刷一次盘，这种方式下速度也足够快了，同时崩溃时损失的数据只有15，这在大多数场景都是可以接受的。</p><p><strong>写入AOF的细节</strong></p><p>第一步：其实是将数据写入AOF缓存中，这个缓存名字是 aof_buf,其实就是一个sds数据</p><p>第二步：aof_buf对应数据刷入磁盘缓冲区，什么时候做这个事情呢？事实上，Redis源码中一共有4个时机，会调用一个叫flushAppendOnlyFile的函数，这个函数会使用write函数来将数据写入操作系统缓冲区：<br>    1.处理完事件处理后，等待下一次事件到来之前，也就是beforeSleep中。<br>    2.周期函数serverCron中，这也是我们打过很多次交道的老朋友了<br>    3.服务器退出之前的准备工作时<br>    4.通过配置指令关闭AOF功能时</p><p>第三步：刷盘，即调用系统的fush函数，刷盘其实还是在flushAppendOnlyFile函数中，是在write之后，但是不一定凋用了flushAppendOnlyFile，flush就一定会被调用，这里其实是支持一个刷盘时机的配置，这一步受刷盘策略影响是最深的，如果是appendfsyncalways策略，那么就立刻调用redis_.fsync刷盘，如果是AOF_FSYNC_EVERYSEC策略，满足条件后会用 aof_background_fsync使用后台线程异步刷盘。</p><p><strong>AOF重写</strong></p><p>AOF是不断写入的，这很容易带来一个疑问，如此下去AOF不是会不断膨胀吗？<br>针对这个问题，Redis:采用了重写的方式来解决：<br>Redis可以在AOF文件体积变得过大时，自动地在后台Fork一个子进程，专门对AOF进行重写。说白了，就是针对相同Key的操作，进行合并，比如同一个Key的set操作，那就是后面覆盖前面。<br>在重写过程中，Redis不但将新的操作记录在原有的AOF缓冲区，而且还会记录在AOF重写缓冲区。一旦新AOF文件创建完毕，Redis就会将重写缓冲区内容，追加到新的AOF文件，再用新AOF文件替换原来的AOF文件。</p><p>一般是大于64mb的时候进行重写，可以在配置文件中设定。</p><p>一个简单流程<br>。可以将AOF重写流程记为”一次拷贝，两处日志”<br>。一次拷贝：重写发生时，主进程会fk出一个子进程，让子进程将这些Redis数据写入重写日志<br>。两处日志：重写发生时，我们需要注意AOF缓冲和AOF重写缓冲；当重写时，有新的写入命令执行，会由主进程分别写入AOF缓冲和AOF重写缓冲；AOF缓冲用于保证此时发生宕机，原来的AOF日志也是完整的，可用于恢复。AOF重写缓冲用于保证新的AOF文件也不会丢失最新的写入操作。<br>。额外补充：在重写时AOF重写缓冲会通过管道传送给子进程，再由子进程刷入新的AOF日志（此时，AOF重写完成)</p><p>源码级别流程6.2版本里整个AOFRW的流程可以大概分成下面几部分：</p><ul><li><p>当AOFRW被触发执行时，redis会fork一个子进程进行后台重写的操作，子进程重写操作会将fork那一刻Redis的数据快照全部重写到一个名为temp-rewriteaof-bg-{pid}.aof临时文件中。（这里我们将fork瞬间数据<br>库状态那部分数据叫做快照数据；并且fork的瞬间是会阻塞主线程直到fork完成的</p></li><li><p>由于重写操作是子进程在后台执行的，主进程在重写期间是可以继续响应用户请求，为了保证AOF的完整性，子进程在快照数据重写完成后是需要补上重写期间落下的写命令。所以为了让子进程最终也能获取到重写期间主进程产生的增量变化，主进程除了会将执行的写命令写入aof_buf,还需要写一份到aof_rewrite_buf中进行缓存，等待后面追加到新AOF文件中去，可以看到这边主进程有一个『内存双写」，即一份aof数据要写两次</p></li><li><p>子进程在进行重写期间，除了进行快照数据的重写之外，还会定时通过pipe管道向主进程索要aof rewrite_buf中的增量AOF,将这部分内容追加到自己的server.aof child diff中去。之后当快照数据重写完成后，子进程会开始将aof_child._dif中的数据，消费追加到临时AOF文件中，追赶差异，注意此时这部分工作还是在子进程完成的当子进程完成它的重写任务并退出后，主进程会在<br>backgroundRewriteDoneHandler中处理后续的事情，这个阶段主进程是不会响应外部请求的（阻塞主进程的）。</p></li><li>额外补充：这个重写过程是需要三个管道的<ul><li>一个管道用于子进程接收主进程发的aof_rewrite_buf数据</li><li>一个管道用于子进程通知主进程（发送一个ACK让主进程停止发送aof_rewrite_buf)</li><li>一个管道用于主进程通知子进程（发送一个ACK告诉子进程我已经停止发送)</li></ul></li></ul><h3 id="3-4-混合持久化"><a href="#3-4-混合持久化" class="headerlink" title="3.4 混合持久化"></a>3.4 混合持久化</h3><p>混合部署听名字似乎是同时开启RDB和AOF,实际上不是的，混合部署实际发生在AOF重写阶段，<strong>将当前状态保存为RDB二进制内容，写入AOF文件，再将重写缓冲区的内容追加到AOF文件</strong>。此时的AOF文件，就不再单纯的是日志数据，而是二进制数据+日志数据的混合体，所以混合特久化。</p><p>在加载持久化数据时还是优先使用AOF，区分是否有AOF混合持久化的数据，可以使用文件开头是否为”redis”来判断</p><p><img src="https://s1.vika.cn/space/2023/04/20/c1c972b2bcb341d794fb7e7ddd1af92c" style="zoom:67%;" /></p><h3 id="3-5-MP-AOF"><a href="#3-5-MP-AOF" class="headerlink" title="3.5 MP-AOF"></a>3.5 MP-AOF</h3><p>原有的AOF重写弊端：</p><p>1.占用主进程CPU时间，在重写期间额外向aof<em>rewrite_buf写数据；通过管道向子进程发送aof_rewrite_buf中的数据；以及子进程结束后将剩余aof_rewrite_buf写入临时文件，这都是需要消耗CPU时间的，而Redis核心执行是单线程的，CPU资源的损耗会带来响应速度的降低。<br>2.额外的内存开销，在AOF重写期间，主进程会将fork之后的数据变化同时写进aof_buf和aof_rewrite_buf中，这部分内容是重复的。另外在子进程读取时候，会开辟一个读取内存空间，下面代码展示了读取时候会开辟内存缓冲区。<br>3.额外磁盘开销，主进程除了会将执行过的写命令写到aof_buf之外，还会写一份到aof_rewrite_buf中。aof_buf最终写入老文件，aof_rewrite</em>.buf最终写入新AOF文件，这相当于是两次磁盘消耗，而数据明明是一样的。</p><p>为了解决上述问题，我们需要先认清为什么问题的本质是有两个不太合理的设计：<br>1.同时向aof_buf和aof_rewrite_buf写入<br>2.父子进程传输文件数据这两个是问题的本质，理清楚了本质，优化起来并不难，Rdis在7.0版本引入了MP-AOF方案</p><p>MP-AOF,全称Multi Part AOF,也就是多部件AOF,通俗点说就是原来是一个AOF文件，现在变成了多个AOF文件的配合。MP-AOF文件核心有两个Pat组成：<br>1.BASE AOF文件，基础AOF文件，记录了基本的命令<br>2.INCR AOF文件，记录了在重写过程中新增的操作命令<br>这两个部件，就可以一起组成完整的AOF操作记录</p><p><img src="https://s1.vika.cn/space/2023/04/20/a8c82e343631411bbe1ed18633cc6293" style="zoom:80%;" /></p><p>1.我们在AOFRW期间不再需要aof_rewrite_buf<br>2.我们也不再需要父子进程通过管道传输操作数据如此一来，CPU、内存、磁盘的性能损耗会降低很多，甚至代码复杂度也会降低，整体更为简单清晰，这也符合Rdis的简洁的理念。</p><h2 id="4-场景应用"><a href="#4-场景应用" class="headerlink" title="4. 场景应用"></a>4. 场景应用</h2><p><strong>消息队列</strong></p><p>List,不需要ACK,不需要消费组，可用<br>PUB/SUB,不需要ACK,不需要持久化，可用<br>Stream,需要ACK,需要消费组，需要特久化，可用</p><p><strong>秒杀系统</strong></p><p>​    秒杀系统需要满足：高并发、不能超买、不能少买、买到的都是真实用户</p><p>​    秒杀活动的主要思路是：削峰、限流、异步、补偿</p><p>​    <strong>高并发</strong>：我们可以先将库存名颜预加载到Redis,然后在Rdis中进行扣减，扣减成功的再通过消息队列，传递到MySQL做真正的订单生成。</p><p>​    <strong>超买</strong>：使用redis+lua保证，查询库存和减少库存的原子性</p><p>​    <strong>少卖</strong>：</p><p>​    什么情况会这样呢？有几种可能：<br>​        1.上面提到的，减少库存操作超时，但实际是成功的，因为超时并不会进入生成订单流程；<br>​        2.在Redis?操作成功，但是向Kafka发送消息失败，这种情况也会白白消耗Redis中的库存。</p><p>​    所以可以在投递Kafka失败的情况下，增加渐进式重试：将这条消息记录在磁盘上，慢慢重试</p><p>​    <strong>买到的都是真实用户</strong>：对异常ip用验证码</p><p><strong>限流器</strong></p><p>一般都用令牌桶方法</p><h3 id="4-1-缓存异常"><a href="#4-1-缓存异常" class="headerlink" title="4.1 缓存异常"></a>4.1 缓存异常</h3><p><strong>缓存穿透</strong><br>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求。这样数据库就完全承受来自用户的请求倒是挂掉。<br><strong>解决方案</strong><br>1.接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截（防止黑客攻击）<br>2.从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null,缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击<br>3.布隆过滤器。bloomfilter就类似于一个hash set,用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。</p><p><strong>缓存雪崩</strong><br>缓存雪萌是指缓存中<strong>数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机</strong>。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。<br><strong>解决方案</strong><br>1.缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。<br>2.如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。<br>3.设置热点数据永远不过期。</p><p><strong>缓存击穿</strong><br>缓存击穿是指<strong>缓存中没有但数据库中有的数据</strong>（一般是缓存时间到期)，这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。<strong>缓存击穿，是指某一热键，被超高的并发访问</strong>，在失效的一瞬间，还没来得及重新产生，就有海量数据，直达数据库<br><strong>解决方案</strong><br>1、设置热点数据永远不过期。<br>2、接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些服务不可用时候，进行熔断，失败快速返回机制。<br>3、加互斥锁</p><h3 id="4-2-缓存一致"><a href="#4-2-缓存一致" class="headerlink" title="4.2 缓存一致"></a>4.2 缓存一致</h3><p>保持缓存一致性的三种做法</p><p>1.更新MySQL即可，不管Redis,以过期时间兜底<br>2.更新MySQL之后，操作Redis<br>3.异步将MySQL的更新同步到Redis</p><p>针对1：假如场景时读多写少的场景，设置了一个过期时间非常长的值会造成读取到很多脏数据，过期时间设置小又会造成缓存频频失效</p><p>针对2：在操作redis时，有两种操作，用更新可能会产生不一致，所以一般用删除操作，如果更新mysql成功删除redis失败就退化到方案一</p><p>针对3：把我们搭建的消费服务作为mysql的一个slave,订阅mysql的binlog日志，解析日志内容，再更新到redis。此方案和业务完全解耦，redis的更新对业务方透明，可以减少心智成本。缺点是维护成本大</p><h3 id="4-3-事务"><a href="#4-3-事务" class="headerlink" title="4.3 事务"></a>4.3 事务</h3><p>原生事务其实是由MULTI,EXEC,DISCARD and WATCH这四个</p><p>MULTI 开启事务</p><p>EXEC 提交事务</p><p>DISCARD 抛弃事务</p><p>WATCH 提前观察数据</p><p><strong>原理</strong></p><p>Redis服务存储了一个结构体，里面包含了队列里的命令列表，先入先出。执行的时候顺序执行</p><p>MULTI 不具备原子性，只是单线程保证了执行顺序</p><p>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set tx1 txtone<br>QUEUED<br>127.0.0.1:6379&gt; lpop tx1<br>QUEUED<br>127.0.0.1:6379&gt; set tx2 txtwo<br>QUEUED<br>127.0.0.1:6379&gt; EXEC<br>1)OK<br>2)(error) WRONGTYPE Operation against a key holding the wrong kind of value<br>3)OK</p><p>redis分布式锁</p><p>分布式锁，<strong>简单来说就是在分布式环境下不同实例之间抢一把锁。</strong></p><p>实现一个分布式锁的起点，就是利用setnx以命令，确保可以排他地设置一个键值对</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>string</strong></p><p>最大长度512mb，写死了</p><p>string编码方式分为 INT EMBSTR RAW</p><p>INT编码：这个很好理解，就是存一个整型，可以用log表示的整数就以这种编码存储；<br>EMBSTR编码：如果字符串小于等于阈值字节，使用EMBSTR编码；<br>RAW编码：字符串大于阈值字节，则用RAW编码。3.2之前是39，之后是44</p><p><img src="https://s1.vika.cn/space/2023/05/09/55232b0741364d3db8137bc2be529e6c" alt=""></p><p><strong>list</strong></p><p>最大个数2^32-1</p><p>List编码方式：ziplist、linkedlist</p><p>当满足如下条件时，用ZIPLIST编码：<br>1.列表对象保存的所有字符串对象长度都小于64字节；<br>2.列表对象元素个数少于512个。</p><p>3.2后出现quicklist作为list的编码方式，7.0后quicklist里面的ziplist被listpack取代</p><p><strong>ziplist</strong> </p><p><img src="https://s1.vika.cn/space/2023/05/09/cf3ebb530031467cb36918cbcb86b058" alt=""></p><p>ZIPLIST ENTRIES定义如下：<br> <prevlen><encoding><entry-data></p><p>如果前一节点的长度小于25字节，那么prevlen属性需要用1字节长的空间来保存这个长度值。<br>如果前一节点的长度大于等于254字节，那么prevlen属性需要用5字节长的空间来保存这个长度值。</p><p>由于ZIPLIST的header中定义了记录节点数量的字段zlen,所以通常是可以在O(1)时间复杂度直接返回，为什么说通常呢？是因为zlen是2个字节的，当zlen大于65535时，Zen就存不下了，所以真实的节点数量需要遍历来得到。</p><p>LISTPACK的节点定义：</p><p><encoding-type><element-data><element-tot-len></p><p>encoding-type是编码类型，element-data是数据内容，element-tot-len存储整个节点除它自身之外的长度。</p><p><strong>set</strong></p><p>编码方式：intset、hashtable</p><p>inset</p><p><img src="C:\Users\hyz\AppData\Roaming\Typora\typora-user-images\image-20230509165210609.png" alt="image-20230509165210609"></p><p>元素个数不超过512，用intset</p><p><strong>hset</strong></p><p>编码格式：ziplist、hashtable</p><p>ziplist</p><p>1.HSt对象保存的所有值和键的长度都小于64字节；<br>2.HSet对象元素个数少于512个。</p><p>hashtable</p><p>1.负载因子大于等于1，说明此时空间已经非常紧张。新数据是在链表上叠加的，越来越多的数据其实无法在0(1)时间复杂度找到，还需要遍历一次链表，如果此比时服务器没有执行BGSAVE或BGREWRITEAOF:这两个复制命令，就会发生扩容。复制命令对Rdis的影响我们后面在原理篇再讲。<br>2.负载因子大于5，这时候说明HASHTABLE真的已经不堪重负了，此时即使是有复制命令在进行，也要进行Rehash扩容。</p><p><strong>zset</strong></p><p>编码方式</p><p>ziplist和skiplist+hashtable</p><p>ziplist</p><p>如果满足如下规则，ZSet就用ZIPLIST编码：<br>1.列表对象保存的所有字符串对象长度（根据member大小，不包含score）都小于64字节：<br>2.列表对象元素个数少于128个。</p><p>为什么有序集合 zset 需要同时使用跳跃表和字典来实现？：因为无论单独使用字典还是跳跃表，性能与同时使用它们相比会降低。比如只使用字典实现有序集合，那么虽然以O(1)复杂度查找成员分值的特性会被保留，但因为字典是以无序的方式来保存集合元素，所以执行范围型操作，比如 zrank、zrange命令时，程序都需要对字典保存的所有元素进行排序，完成这种排序至少需要O(NlogN)的时间复杂度，以及额外O(N)的内存空间，因为要创建一个数组来保存排序后的元素。 如果只使用跳跃表来实现有序集合，那么跳跃表执行范围型操作的所有优点都会被保留，但因为没有了字典，所以根据成员查找分值这一操作的复杂度将从O(1)上升为O(logN)。 因此，为了让有序集合的查找和范围型操作都尽可能快的执行，redis选择同时使用字典和跳跃表来实现有序集合，这两种数据结构都会通过指针来共享相同元素的成员和分值，所以同时使用它们来保存集合元素不会产生重复成员或分值，因此也不会浪费额外的内存。</p>]]></content>
    
    
    <summary type="html">🥧本文讲述redis基础知识点</summary>
    
    
    
    <category term="数据库" scheme="https://yanhool.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://yanhool.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题笔记</title>
    <link href="https://yanhool.github.io/posts/20230402d.html"/>
    <id>https://yanhool.github.io/posts/20230402d.html</id>
    <published>2023-04-02T10:19:03.000Z</published>
    <updated>2023-04-02T11:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="090bf7d7c911ea485d4286b05b0c72582214eb776240035783cebbefcc84198f">e13c3c85781f6174888b11e0da5e4df91ff3d44e254ac81a93033aaa727512ffea7cabab3137f83346c3b4e520e1e247f00b459e523600f87acb9cd3a7eb2ee9a197afa776b9d90bdf75a948bd7887e13cc95d1dd34db10e4cf104c4fedd30e3216ced6566d740d4d42fffac71be3ba948a2a99adc2135ba5f2605b9e0d0c5c230d55a541f37b25ccc267b8f67c2bdc2f3d14f417883bf9232de762cf8ead233b6d0261f0a352c6a0e946fdbf877d686e54e4309a9620202166d7bcc002d9e31fe580f53811741bc9e5d56a22f8f7054a95c04df11ae3465410eac3529441be4234426f1c9a3f39d28e49f417a1a2ad119b25f99a002607be2fc040f6a467cdab8c1c9ec7bf5b118bf4a4346722585a098cc554cbd55d0eee420197171b6e1dc3279ac1bfd1eb0a307d96fdebb0bfb55777ed537cda997b5614415997cc984ac21b37b8329465954ba0680eb0687ae7c3972d797141d528c85cd448faecaebb69aa0378f66713d14a86b631883604576569686fe3285f60bbaf427596eda54d1064e27e15851bbc9de841924f83d7100abff4f9ad1ca707b7112d75cd22b26098c1c8ef4e1f8591bfdb85852db8c59fa317aa5a8257b53c0c95c0d74130c2af120bbb44881a126b6416f3f03d48c01c15f260c66df1e766df9dfd74926bd2cc9e42bedf837947ebaa62e14fba3e9e20b8f6954f97ef0f725f747ee46436b817de9c68aefce2e4cfd327a1133f58a214d9cdfe73571a49797a11455dfbf97322c96724ca48f5165f60fd79a96e23cddb95428072cbfff55b4548db701b5a2f6a9f250e5eb003e646321747f5969558e6de0ebb692af46b767ff9421771da7c92081cb2730033a90e712fb77e3af1f88c2b796af3a578800d1f9cc3349652a68e0989bb8b8807186c3411151317eaaafad019f04fe9a4706304e528ae74dd863ad084a4a2a5355136c0174272058a52962b84f4eec5b36b6a2146cee22a6c907f3b78151e58e91c78053533a1520654509e99e4ad5e7adf77b58aea21d01005bb3e2b61bc047eea65fa670d6f51f0a90b568d77e1bd23cecd1626822b2e0a9254318ed4f585d6f6a829cffb440c56b3b17e8069b7ddc2898d0158b2ad5a4c04c9a95739d0c4728b8502bf40f7036fbe07d532b5d0c8b863b17302f279a3aaf916aa04a97d60a749a62c3dfa29c5c73b5e91ae29b1adb054a0ee2f4d88ec92a26b8dc910569be3f58df688cdac324c895141c00dd121363f23577349f1a92e48d0165a7fc39d7d0ed6a4aede56bc59343a33cedaa7fb51fd618dca9c411a0318c50ee1107851201d461b5a9ddbcb8f79e7619baf0c2bca6ae4186408edeea0af366b16897a2ae295a6a5bb03dfcc565bb2813bb23d8362383699ba5016d95d0044d4f9d64ca1f1be1a00f1919cf550b5fc574a8adbe0012c5d1c37ad9090a39272be4cf1a325bc7de2fe4a509c7cdf39fe1900d4938232b05e7c907e05af5bb1cbe55246ed987c27a83c4f42b3e6a1a6a68c8d3608575ae84fdf29842f6f1c533f3e65a51ae6c79e5577ac82f37c50631bd6d6d788bed95b1e71bc011ad65c6c798955b5599aaf85aad7622e938f817b138a297b407d70b0b70080ede6c5a1c42cd49b32ad97ab646020a2de1e618fa4687cf20d82838611fbdc42422335f757ab1576b236edddbe3dc6b2963ce6f49cacd9ba105595a1fcf6763e410aeae5c5510630fd78a997e6235cf6da26319122c9aaa05bde1dbd0ea274cb171e6879075cc8db2de774ace377c7e32bd8b8dd703ecf8ae0c533d4a28d5a6ed095dac588967818551f7d52b1f2899f38deaa24c771d0401bf2c1999971af88b3609e2cda7a85ef76bb17fd4847fb4bdd002596897344786de906b1a27d426278556e09e13846b88a1234bcea72dffccd40e1814ceaf3707f0b50ab11cfe1468f9874001977fa359d386fed30525bf28ab85c1b5d974d09f538581af8bf62e4548d70ac76f9f612405af9f2041fb57d266aecd1dc6a6acb9c9ef4d07b9b89cc265d16ab6572a00f2d78d968c97924cb035632989c1f6b4d5b8e827126cdd9a0aa47ecbe32ebcbde554cc0bdf9be43a75ef3b3ff3486222f79197475713bdd14ed7db90de658f71dd4f07c4655b6527b293daff30df04865369d6e03cfee5cd96a058fc81ae7a79895401230af2608bd965f66889e870be83dfd4572fa442baafcda92c41e7b2ebf51fbe4eb843addbfc4e79036257b7f82ba99f77a68976183b4d6d64864d1ca361127261a8eb99b081445a12cbf25cd9f168dea9eca354d55427ea619f76bb5be6981b81aa5e0e20b3132768f7b3e4c601d9ad1bd2f98c6d41a6dc88df6ffdc1265100b96400e15c13dd694ad18e681d784207d57c295d1b69ee018a2921b94a58049c8282140ffc32ce2ca1bc2251d9d88e8a3109c5f2cc109d66cc157a6232f16a4207349f46980506c6e0e4b8492f04cd338a415af86cf8e0c899b6684478957c294cac1ba297e2c92ba350f990492df35da3c417f5ec308e6f14869dbd7e712a91b6991a05f9e0d5690172d1a11b34e0c1f6470a2cf373eae10b08531eb1c8f06657355595656631ee0a40be4685de81846174dba8f25986581c1edc9b8d52794b5103c3f5a703db178d7c9d3e69bc99bdfad4fba0c5ac08a5893045477f2f1495e3f8f20b5ea51eda4c6c38a9a63dddba771f4f4872b8921328a3646864048cd29b4cd8e4595719a59299925acba392dc5cf3dd3fd57c6fadcfeff6cb71a62e06b394a47e65eb57acda4af0b82cfdacea781047afd6dfd9686b7b1e93299a1ca5f64e188cbd982d4008184207ad53627b31a8cb340c62e8f435e148b46cfa92e4c39bd99cd66c39e54a5a9468d4de54c9a5e2fc2a3c6197ee798c0e908b640276280b83255fdbf2315d41e30cd75b060df1fbf95158af71201a1bdfe0847ffb147dabb98294cb66b380a635f22bbf2f40f9f704226809500d5994f3b3ff3270e8644d2704c4b289ffe3bca347d6dea29e9c2c58f2804e7fee0a2c33f516f9e64b6f84b1c473d8f1237f4e85e9d770fd4a6634bffd4bf464bc39b562c710fd221ce177f23e0f4421104e596765a5fd679cbf3db3a0257f9d5ffef276d8792d509bac036c1beb52aa6ab380b18fefd13d84831490a4764cfdaee8bfe220a2182b534c6a853f24a6ed52bda982051c07d66a3f942711abc38e327b5ec26e1535115604d86526100d6a5a0d1022c990321df0d7e339b9f14763a72f713a09d8a8e35eded2dc2081b5869ac14a15bac6745098edbbeec225fc75aa0dcf9b263234dcafb17564cabd098e1ca8af8f568adbbd10a286317aed932f26a057aa8a6cbbd18a8dbe3a78016a757295f1301c2f7dbbc8c6c416d9f517f5f0c050e3b971a9c049600f08da1a050b0296110045650fdd26ad656a929a060a137a52272d53b00227195e8c1af25afed2414b62d1f5203a1e1e3b78660988b49f790e865d3ef94db81ce4084e785f868009079721abd94f90fa0ede9ca984bf11887e990ce2a15d596549efc586ba565779e77c12d613a033f5316bd3bfb9c12c2571d0b981beba27338a2a4bb47534ef877680534a0c978bd473908c443f166d55a7d76594ff08731389b7170b362070ce09a528e06dc802f929d98bfdf92596501bd10937189625cc0ed4cdf2b8d2956c74402396755beabb24aad9d9e322f1282bda5234b5907f9528d8ead7eb62d6af6c338f31ce8d739e13583650710065b8f7f4261750317716a78f733d15cf262b679de482d60fd50476026f884111ff1d3e74a967b3e9b641a9cdc214cf8cd7c9552d4c3baf41133b08da64ac7d8e6367270a671d062c1fa1b8400b70db5b71482e9ea689f8c4c605e0108cd9da14e2b5182e0e7da0004049c7d18acd80b6670dbecf2b9d68be9081f33797d06326004e0ba1596ad08e899bb11a73f0a517ddc5b50ab3a43f03d8a9dbe63e5729bb69e8ca5adb1ef0063403532f358d4f09bab79d9f500050746e1495c1f54d5c8ae5d4a0ab3e6706b9c95c1c30f77f54a1a36c7fd327af675b10145b7346778b23f2f04fdcaffd050e772b3d47d80f2e2d05e91621f9827ce745607d1b2b134bfcd2d8ac51dccef4f970155f8a3dca3d6f71db53d7c7293b34f5b4b0436b2491417d40c4a562533ff06fb15ce9cd9a4a5f8d84158c05e7adb4649ee8e7966791498cd1c8dec02f9b1bc64fa7c477cae8c420d38f312c2012f1d9298c4fe6ae12693db1973181c85e10d7a20f1845fbf12ed2a713ca8b5ab6dfe68e65954a1c1a3a9423bbfe7676434748d3d4ef1e524769fcdfa55853d544a571e935ea15cd34562e9843ce136cd8c61480c43c8ccacb1ff54d77ce54964908fa8e4ee3b80331486d19bf9fd3c6966c916b773a991aeeb615a68893de0b88b6a3ca6dab63838157066b422533b89f3d08443a425406c5bf42df5d4eb0cb79892bfd734aa74cf05926b23d99940e291febfcabee241ee35f563b3e0aaf2d56596e52941b0cb537884eedf25f9d08c07ac458102ea9e8588a8fd4a64de1cd2ec24ee798d9b913ebb6010b99ba37e8160240b7028b63f1eb8db6f346b6bf3075b266d17c00b4413baedbe6997c0ae0126a44b4d78c2fcd294b8411855be3c1779ef09673e1c15bb59a519e7b94d20c4e770cd8ab46f5d8ab05a7f3c78dcd30fffdfd985bcb7cc31a7f7ce613bb70ed9b87f06758c3d0a143ca02eadedc605e24dece24529108666d6f232fe350cb187d5898a6bbd1ae859589ee58be48c1770b773088f8737d38bfbc39e1e2d717b53102a7eefa413d5de06de54c5494bb0f1c13e6ebe104930b466e38518600e0cd3e5d9365f4c5d87d62b0ee9b8c9771adbbe57a1ae080bedfde4273dcc72046ab78e0091f050e7cc3974d8115634cf6dda5e49e356426513f3c1163e07c8cc45c5e0f6b87e75708f3fea0156cd0075eca29577f53a0e35323cfab5b90b91c7436d02c1939a6b8fd3bde696cd726a17999f3c9ef8d2fc14b1624677de75d876683b47f412222c133ac2afd82843d87cf929543755d2b9bcfec4defa01b9418206e6d348fbe5246ee290c2e09f053e9a0888ab38307fc9d63e6fe6adb21aabe9de64739657d8d65e107e6b568123640a12e877fdd356a5f03599d4ac16dbd8a2919fb5e93d36c8e8e827099a0597e4c10e552cfcc5cdd5203e08b6e2db16ae29d8ced5f69fe060c8869ef272ba1383ff26bd4c9caec09a6cb9fd343b37ee42d5957c0d902afadc9dc232b7455b7bee337cc2d3c1f1a0664886c222c3d547b39c60456e0e932069b545e9d5f84ef507089735aa2379a22868bc5c0202d7845da503d34c178a7f1425f02fc1401d7cf9cc7eb31e4c90f30e84027c0eeb783faddedf9357c855d4f2cc310b6b47628206b640a0a682bfcdd58733b5ffa977980bfb24925216f24691c63342bf73deaec6e9a5f1cda3c8e87ed59d8e26bf7e634c1eca8e8e12c9cfc6b10ec7d9f25f4b9caf3a88496762c327aab3116e9e3d0183a4f320a66c40f4485d3b15b87cf8d8ec6db4bb8538ad1a997227df3c0d292a52a560e642aac4feffec1a6ce5c5c01fbac6ea5b9373ccb71c7e05f079eaf9a3534715055ae96078a811cada9be713b5b50be004a9f1ad8bf4ed368793532055fd01aeeb42726af097b4a1f21c01deda759ae714e4bff6f3f4346c93ef7aca8f056decdd7e0521fbc12077170557f9e0a90dfb64700e5f1e32dfdd23487355187d017f67bf2c980d3eb92750bdc7bbea6f9dd6f569e23ae9d23568450f65c96287f8523fbc8eeed00c5b6ae49a269d9051973c1a2c47b85d2b9dccb0c22b95e2718572a5696779686bdad127ce7b3550fba7c13d430217391f0542547be4db2795a4a36fe88bca8ecdd998ed901ce10d0818084d1fc3bc6aee81474020d42d0d47fcecc39f28ae9e1182151ba8a9988b737dd9c44295c1f958b9dfe9af77d73db316c968103ee5c6d5bd960e168e5dd5befd4640ab446a7fd10795c02c26ca780a65f6f6cf2c5f110589cc5e879f88d0007bf5b7514616b66de0bb2a4bd762fe1959a0f7478fb279fe741147523698c0b533e7ec5648199f017d713f7990222f8321e397aa1682c91e4ff44ece8475b5f9b886c041db8e5da2cd3794fad44c205e53873bcac82fe97ef9b3d5e7070b8c0f752ee979c65a366b9b2c6ccff5ee7d29b77e4f765e8245e4fd94343fb9e2d20184ee6f5e30cb2b96a8085b0813ec646934ab826d76312c2d24ef0f642496e5b2d38c78256aca572b0745933a51a71455c1d73512c65c01a5fc8c1df1147446c82d0216ac0bf0f25c59866950fe05732d1238462a26dd77cc276baeb2995355de3e8362e41a8cac2e6b70042b44e0de88540c2b444715de1272b270789cc10fee9a5b794bb6a28a85c12e058888aed9381256c55d71fb74ded4872b7262750516b779fde8b48950673ff79219df187426a0257ca97b4d7e3655de8a9cfc7cb5e16487c4d32798b5622e5c3f8b4409c9999f22580bc5cf2284d1c76827e766519edc5a7b105b044585aa8d8b4afffb18bb0c849b01a0a04c21720a13f97f67fcc94aa84aed8bf7077af35bf408d094a5bd33ebe645eb6be6edbb3251d013d6e45794e3c55fc80be5222364d41ec9dc4bc00c5507e8cad30f665bc34fdd96bcd5165b1287f4bfd6929d9cffb888e0a19cfacbdce870cc67e4b4ec367fe09d252767e354d841ce0f20fc97963e55a1e4172f055bff1091be02d385462f7a5851bf530a34a46414c7e5bb0e23679da7638f686f47aac1c4aabb296c069e13416053b8817dc30cba03e10ce12ad1bffd64a98b5f80865420a46cf058f7161a38278c17ef2e86ed19df33fa4e47f824f3a6395567c9d7b3497232fe75cd8478974b112d4b8c45981f1c03b47c9c69870dd41ae377438deeee345a830b927505d2634dbfdd76639cbade0e3853b7cdc1f366a2d842906db336d6516d742e9e94a4af950e53d37354e97976f9bdcab137a60ebfb0dff5ddd6a7475a9d7c452945f4fb6100a1687c0a754c3ac2fd7c3e06702857de707db1db583ef6098e1f6af25546b55265f0dc0c9e90f78607a3820fdbc9f8b1d8128288004251774f150229bf4f2f6012d196990913d9cd9c45629aecb7a20c2549c62634209f553090b78a1cb41b3f7beaece5576bc3ff6a0cd4770d151986110f6f7cf24036a119966443dc760ad27f4380f62c4fdd7dd41f3251763132a1aac728859571e57cc85af69e4269aad48b1ae772c4432f5faf3f4d1b09e5ce81efc64612a688e5aafb964774b1ce106c1130d4b56441c66c57f77c5fee9a2610e6c3fd1f953ae6d42b8d260496b89d68466250d6fe8a4ee4f1894a13d35fb6c76b09ae9bdcfd283a249879d18cae8e0b07113f842e2b0abfedc5443f59b43d0bba4752a89067b4cb283718019a3ed64e63cba0bece7ddf6981d8474c2864484a3b94d18895076df733c3bd4438194bd848af1aadac01e3e570aef3a283d7d98819942a30d27b7028caff9637920f7239b1d96a1f8e71460600637edbdc2b5aa7e533427881e58f916381a8321572467f5f0c1105ef5afbcf127e8a98704b801de94443bd56b8f1f3e6052de413f1f3f80be7b25d4f5c95545c81633a9d88a7f72f08be51856e416283efd31678e11387143c46554ce277b39517f295f1c573ca916cc4f3fc735ad6d01edda6da170f2ef75b3e08f6a88a5bf3dc5eb20635f3c369dab343a25328e656004ee7741f3b65b2a57a5e5fed75277cdfe0679fffa9bdf87fe9da8cd41addc9a517d92cbe3409a08e8462d4fadbf6bf958cb118f54a17331347bb44ea3795950271f32fa6445d21b77c6e02884cf2b4bd4190305e5db6e5ec1d1c174c907b00e5afa36c19780352c26a486f429240ef388cdbf8aaf3c2029daef058111edd87fbdbe36b82b41b7151dcdb8209b989dfffc692320c564203e988d14089c5bcd1a0ebf3bc0f73ad37d554fb89e35cfdc329e548e840dcb6a64c270285ce711b39eac044b5373cf19bf11ba06f640d534547ab38af791c674b6c7b24cd5fb0ba9fcc3043314cccd968b2e8e9df00c2f790655e09c9985ae62009ce268bd86a0f0fb8618b833c6e5395f99e62a1e2ae26e442f10881e28a9e26f219e2e47da08c07177c195db48cfe901b2e8f8b9710a14f462667abe3cd1c23106d1a4481e7a9462817ef700712e09de0298f995f052be11b301d2cd1c470c23e403b644eb8802c57de9377d1e14ea1242edff63509e669e189cc7d67764b24e68371c20ec5b6b51befc1bcbdade8ada5d7e387c399169ff2749b2a65ab72ad06381c9c761a85ac36a885dc6140e1560c23fbf837beb251b86b6f1088c8c1266a93f998b684f98f2bb17f1c87aabfab2768a40805ecd070c5d24233cc29bb95130287f614f366b0d12b6ef689e2694650b25d05f3cb19ffb137ae53f0b50a7af9c78aed3b1a949c56f0ec8b13d0f48085b5f4a121023b91c788bcaea8bf45c0ca79801115766c6af1588eaaecccfb8ff18f9fc80c39578b7bda1d3279b24b6db6de5c57b3f0e994cc0a34b98866f04bffdbc707bb3f00e7480c694ed855239e0e8079637cf44a05dc668cc7206de1b8ffbea655d96247990b3ea582a526aede51391e5fe392b5d2e2377a3072202bd4213ec9219c7152cd46548ebf10953bc03e3ee5fdd8f1d051ffdecb48d6836826038dc7ad800f74bb37c35e4c3a62af8c960e7cc882de5720d1c329415ae9fb86b8af28f22612e49817493ffae27b3a05fdfb7955af8aa5bbc3a3c4bf2f6e4c53f0a41348cb6e5936896bec8259a4f3fff8e9e634ff19cad3744e015371cd64fc5361ea50fdfb6afa1ea5eac175397d4b5cfae57f01cd9b2827765d4a28b03163147180e1a9837834a787df8b38773aa9ade36dc464445c7ba253d02b1467a16c6f13fd47ba3642c7a66ea01d8bc66b98dd6869fbb383e7666f0394d696d674f1fa8f329a4f17040d614fd334aef32bd1fadebb47f22c7bd2984a0de10bc94f53929510f455e46d3e5f3117321ce9cc90178a8e0220a51aea395da5e26d8d39dd460a3ddecbe4043aa589d8b7443b58184e948d46d5f7a07cf78022b8e4b3565180b7e83d5dfe44415d55abfcc4407b5be609c60448c530cee05df8aedfebba336b3a1a1273b2c62ceead761791011bb61f779b0acf6bae4a6e6278b030964907a4fc50464391e9a6a21baf8ea39ebc854f66a8fe0178038a26e1c9ce4280c552ead60e6996cd3a18142162a9c5aa62891ce53feccfa7cd5e61fd4b91bdffd02c6cd30cd2b679c263921a621813b7207914d3b57d710478002de0504330bd01e01f4fcde4d5cb9d10a11da298ea00be20a6f52801b690687e7c9843a79eaf125dabb1a36b70db669a362fc6f22f5bf26a8bf60634c8319303792f3f73d17a28d7f2de0bf6588b8f84f503a76eb36e6cbee0a1e693e0fa399fc1107bbf1e455aeba9f24c7fefa044c7e1ce41a85e0ff7017b787189e2f23160d222d554b5526ef4a736e9917f13f291fb21f596894c72da7efa92e892c1c74a9fbe52580b519816338cf3823b994a9179268970921b7edddbaac02fd2bb0a5db23baf4d832ded6bd5c10ec1323be8ba4cb305759cafedb9ce445399ea183e2960e276064e3e1d45f3625ba820259789fdde38b2df018c16465fb4bd7f5ec1aca5543b5c9a588566752ed1c53fc92cd0a241500abb8993e08319200aba08190d12a594e2368944535851a37100b4d5fceacf59dc794c84483283b73f1594d1647075eecd3e4454aff4cb791914c6c4b247fa6f51b4fbc30b4663cd4877c072b32c317afbe688094fa5eabbf8ecf74b6998291325b2b4fef341ebd2569210a29a2dd256a398ded61477deb1021fb853d4d4a8db1a9160ab8776e92fbc2b7b75e31f01521b9845d627af9c215b053629f6e0c3459f18050227973c12138b596a03ba3cd444f76e871e87e7043eee7b650d3deefbfa52b86bf376866a612041787940fd0902dac063f7e41ae9583bbc6c880e797bf1306d8af4650239ad3bec4095f2e399389e23dcd7f70870ff90b07248be6c4a7fd096279e4731a6cd5731041b2843413c18bdd9ea5546c22ff46d22f5294bf3d138ed2a532b82650fffdda305fd2e00b67bf1cf66c05cba904f5b21e956811c67689a564f6303f7c8f6e4d166c93d8819ea78691a57e4f564d85cd16e471a87acd15cdcc2e0715ef4ca91d356f60cb133fb8d9cf3b4828e115b1343cd97013c796a4eac7f0ccd53f5b57e93eece3d0f5212d1854777b5f233b784387bb20a09f776400819f7e51c0d4d5df0ef2835b6b16bac90ef8e4d8e43c66d7658be5e67c6d2333d836dc9bd19699c2e3867db9a63a3e7195da629bf15a982a65eec29090ac121abd4c327025c69d35154be055b7b91481efaf7a0129c692204f14bc81bbd3ebfac04514bff7c63277b830ed519346b268f7f32bb491b2a31eef0f1a471b555feada7aa0fa6823cdd2466dd77acbaaccd1414c675134345f648521e9430ad404c971947c60273d27dc8c9e569fd4a20b3068e301a45f77846815bc3bd5cbc8a36de7c54b02d0d7eddcba4b8bbb884d4385bd0e05a963c50099ae8345d4249af27300d473095004ecb764e9338a24473949db6992528553048735239a1f06dd7cb7ba50300dd86349a0c1bbf1345a729ef2119d189a1b6e7fda940cbaaaedee3e1eddd342e25d788e35d3e62b4fddac12875726a4074920a3cf7e674e9dbe6edc6f53b734a09982a0e3b65cdf9245a2ca96c5d20d20aa4090cae33dc72763c8731c7553fa4dd76c05a2ac5a49874e0a40baafb531c267dd23a0a406a907be37cae17a42f52aa9d10b2b62f0a01f0c904be9b5138a5fa6d90a8d0372e7f1ddf12868477473928f66acbff345e4b4c4e082f6d3d9fe408007a521015741234f95fae5a7755c763ad4299817ce30df34d39bf1c8d259c2457f17017a719470cd937ddedc710b2ea01675990afade708eba841f9c99d73fb8a14715cd23fd44f860f8ffe1281154a6f1397dc54b9da9d4c5a8889e184588ad09507edccdebe0e74ad514edacf0d85035ced4dee5ebbb71dd26d05ac950c226fba984eb00f5fad240ac834d513abaf18ae70f978a082282438bd3e7380b89494ba040fa80cd6f8c0907892272dc6d05a1284940634d22b98cb7e3b870d8a0f68615e321fdaa23d2c4a77e1a03f111384a2fdf7e05397c3baa40823f564f6b65729fdbd7ea62da49e6f8e27ea3f34a1ad4fc9ec2146c83bb5ad325d307b3fbdc23dc349cbbf4ce534dcd37ca5ae0218db350fbaae4caa4e0257dd332acfe7990a5757940f07d0999c82c569f87b73036716aaaaa2844327effe645e1ca65a3b9c75a699801e4db92045275475bd1d50e62a9adffab221caad1c54aa0ccea83b5ff7380d093d881f3daf132969672ac04cc3067ce4422a2a7d39838943e4a2a23fc6ae256e135125e421ffa5abdbc00442acc4ebe0a18b32446150163caa37210592dd97760a6ab8fa5630e1efbe268ed20c56fd8bbc3bfdaa5ee23a95bc6eeffd105036706b6219a51457412ac811439dc4674b0c9da58702a9ce533c9d62eab9f10b1e4bece1757febd8669badfd1e858efa8210826f5964d33a9d81466f91359216232f53490bb142b7c1ae3871fd63ad6e3e69b4c870f0c1c85dda2fad38fc693694c6b30efb5ba0772ebe33e4d81e12fcae34025b242924d5159022aa929b81bc0c635d50a8c9f50fd3c1568c2d5316098a3fa29794fe2a9300cdceea031e53104e8788cbf950bcff4bb294b4d2cadee553106500a6d91d742956a58142ac15136482d2507cbf8e5abed2fed1514215c16be089d2ed9a2a09f469f4934171de8889da74d049df1ce0a29a5876c090aaf57470a12ab46ca00684761e533273f4227dba0e88bdfad14730e59785c1e9826f00cc5efd9f98e3c5881e88f6dfd04c473e04e592e796b783a3eeb85493e55260702a5a61c554837114e2373f9022b9a290db2a30704ae1691dc97505952b44d9af57d4a4a67bdc125fa23b39f1284765ae6acd48d85d4aa6cc906a343650a2119399017f3efea53e66be906633a72afea8d73f4e885b9e53cc276e698e61d47cf82493734d5664d3f90c5655838036c0e4e740e74615a6d08a7d056766bbe121c1ae870d4b650ab6fc02e77deafe1740e35ba606f7b9ade3ba59575e382ef60922cd3e32cca3a3dd7281725b1f634113fb3da33753538cf40763b68d2c6b5dfbefd74f84afd558e6e6d8869468bffd0a96672697eb0cb010db4fb3068b96ea6ff35118ef21b8714f3e2b016dc0447edcb7ecbfc6716f69a3d57536c39fadfc006e71ee72f9db9ff2d5c0bb3a6789f9e94b150c888ddf52e145a13cc60cbf8b3e495181370fef560dd0ff42a6f313ecc241442e94d46a5342be95e40d7e45bf43f5524775e672fa3486122ccacacee97c6c9df99cb50daf1822f498bda0c4056ecd159c03ef10c446302b07d2c6a5bd65ada4fea43a8aa006eaffb75364c4d6a0d85ee035c87d3211f72ea01e9f4d7cb5f3dbb8ad8a56d61b951d9869f01bd8eaaeee060191b1517bda01439d2a5f02e48f80e7254c56444096849514dc408b17807faac882d839a4fb0b0cd540509cc2e4d2f583c0d5e593f4f2433016635d4619d4b5835d52f9300b13237ccbbddc4138ad8a1c6fa92e63c3d111d0ba4135c051fac1d39c73b860dc2fe7f7920c033ebc8e8648ecd50a00d556061bc087a26e69e5602b6cf8dc481a40fcdffa07c32648126f5e99ee2533a41a2f9340f5e01a2d1e4fcb5e2051797e20512761259cdb4a03d09f524ccdda098192720ca43ae6c45810d50fc01261fe9fc1b4fd76669724ede767259c3f8f074a596d8c1e0e6e69e32bd526a41bd41ce939be0c323cab96ae4961e922d49a87a4ab13bc1ecef1c89cc2aa1921c0bc68106eec480d364e842e7a11f23a9ffcb351777ee6e136ae5ff171cb1fa2f79112c1e46ec8c362ee71a4b8cad2d420a1bd1c3be7eee11455515250a5f6e715a0e5b524e746692a94b6ac53b30340e8aba253673c5af512bc37c8961ce0ce37fa9e2f382c5e791aa8d9b60da2aa2576a3c3ebda583ca7e9493ec93e143fbbc6bc8a143fe9d538dd3e074aeeefdd99215fa634d5e024bfb5af3b6bb72b153cd44ec3579e3b52636ec6d4a406e98d2ef738e5e2ea1828b0dd9a5a31595a6f8100cf5e04dd515b02da21b1d2e0b6d16e5ce65926832fddc185e972bc47a3e0c3403f5e162c0c4d2be5a9c41cafbed68f1aa8722e7021678558d80b6709fa4e7b6b63a4d9c49429f3ec1477b6f3fb7f08de3e8f7da1daa39a0fa9be7d17fd27a234eeaebf3fc0c16e8021619d875a6b6daf0b51eeb5489119c4bdf4055fff3d866d63331d15749b4dcfade7d475d9e26e7dc26ca716f7967af75592eadb801a6a6d0a759dfa329eefa10829a1ffccd1b7992c1cb476ba9242d2b6e0521d65efb8dff086b3e716b1f4a39a72c9b16c4d350d256f62578c55876f5c34941285df4030a0b0ea67ee210ce130bb774a7cced5b1cdf17cf26f65becf96d55b91425f101143b38f565a04dc494a1ac005a5a55164f44fbde0e98b75591cbfd8f7f71a5b3328e03e7ceb976707df205001406995ac17b270e02ab2d4326a1931e552bb1e1b20cc307df288dd55582a471a2a3c5b7c30c6b775c72099081dacf2cfe756a1a9eaea9f27ce750b71d16cbd0dfc3f7d5d13960c45632296d600cb3acb636bfa216ed43436caf888c8fd795991a5f7863c9d1c4043906c93ca9ea67d52009a7fd02283baa2063cc3287e5d705a0d306837ebd3a64288ca88bf499bc47b62829fa33ee29c5c78803a3d1e0318a8fa92086137db1a8a8b8b10e2d21e27d24c515530c514be6ce955fdacf48f5065aa62a3f1a8a8063b16815c2a0e6722e526e11c6bc21b633a915d41738f7a8fad4b3b11ceb848cbf95ceed053b24ebf4ff8c8c3018e90522e1a25c3608868b8770d9ca15343b47644f104d0ce669dbafbf1888245c0a72001d1a27062847dc91ecacdf5ae77709ca02442dacf1041adbb9d94a89bd0fc9bbfb650aa1608a1658e97333e8743071fc3f59525623079c1c47b2466c0c234e5ba7770b7bdd5c615262ed736818bc1f4f63ad6cce5977252ceeaf5e61f5a7ed4191848303fbfc3eab4aa1fa3f9bd3e600dc50ba1d9b997f64e2205bb110a056f6686c7c85e16ea40acea14e867d0cca576907d4714f35bab32f1d5944366a3f0614744b28efdc326c0c1be70e0533cb46011f5d91c2be563de870a3c8c05e7f407686dfd51ee8e824843b7a81e200052186635ac782737c887e76838fa846e052e2c04601f53630ce0415196ff0302db421a245117d7d468f32c36d5bfd6170125e5ea80e021c32cea054604209933818910787cf573f8b1f49568ae6d687d8f108e82ffcc962f64fd84a52ff445f834fcd21eb3e00503c54e8ef0bc4d6eafc66708baeaf2bb6ad70d7030fde9e32bcfcee38f07f4378fb6e4509b67fd29b5fd0b9509e34d821545c3eb9478132cdfa45023bc075c629a5258aef556c24e8f65363528f5bc1293a52177df92d93832fc45fb67e69bf116edb2adbd3258cac675a3517c78c865f2e2490ff36db50454c53ced8be03754351243910e040e3bc38f9bd57606c33a204a8b1166134c352488a97d29c413f4354ea5f93bd9ce103c98d204199acefd00d01de95aa7d5d1e87a7080b0e18f534193aed0d49364ca6e104f368aa6e126f645326dd1be591b1d926dd7012173b9cc9fed0af21bcd17721b09618cf9f265b3903c403f0ac7edbb436e1d219d456c4e123eb985cf92eb9ce4289a8ebd982156a6acf98bc497df5fe41909b31a66dab14826a9e9b5512914014ad5b5ecf1fd3b3fbba686f11a9e01ed0d667354198df5d823f200b283d93e54330e08ae1d22ba986665dadac091749e278151f1bfdbbedaf40a387141c961192279ba2e1570618211116f9f0bc93f46acd634fdecb6025781c36749659f69e0e5f412b1c3aaea763eb05f75783e53f489f091ca5ede5998c0bbb5cc5f8e79d3dd852172a4ea96b91e8e2293983d33768dffbc6f17e768e3e6996594a2215c9ca30f83e74e1ba9fae9b43e7c5b236645443e0d163c4ce98b2e164b342a2d36dde51e531970269749dc5a0997a782dd2eff417661feaada4898f34398d676dc58de113083761dd9869769f485cd89d761b49509d839fb4e79f9d8e3706eed69255d9d4fcb74a51129f5fd2f705724defb0bd21ed06e255ed485ac7dc84aa6bd98de3ea276c3c840d06f05ae9601b8e75c59d77a04fcf4d2b9c60fc7d1bc8a92da07f77e25c110ac6baffeaeea632559662b1c03cf199408d223eeed22f392e6c9805a4b1f1c806b1198716f1f75525c182a47841945a3f4c108b356ca01cd28e34368e56218f3dc6b1c6a9f4a1a8b1df564b36ceea2b662e8dddf238313ea00a1c35946c8cb01801914db64828f81a04bf64789f301b115691cc9094c6cf51a0b7bd1ac6d3a32aac7841b349e7d3c02fba9bc75dfe0d8dc0e5304d01ba5eb638c17b973d0c93b898a0e90158058565ca95647542cae9ecce22f6b7edb87742dc70022f52dbd763aaa1271a471531e47d37b0dcc0f66a0ca93ccbbde3fc2fb1ad30719358bd0da9eb802ad2945bdd6c7e17134e0f0e628e84a116a45a6e14d188543c707498c520b944a0e4b67a0b032938492fc92231a3eaeb7fae73e5f754c9700241185e28dbc696e44316647cc572a1be3e86130463a083b101493fce99c76ba1fb2c864633290cd6c432c0ca586daa82740fe98a339ced58af9cd5e6a74931df114e3461c07b48857f51f6aa73ec2344b1285d1fa0718949287b1c6969dc18288ea239c5c2ea59a6124b81b2c8ba8e6cd15a7ec48c9dea6c832a22a1789b3a9cba4e9fcbdb81b5019ca5a9b708a9944f4a6866ed77c4505f97855940fc84bab80847c7dde57f972b1ad00e1bb69462308f82ea9f3bea411824405ae3535f046ee7460244e878af8424b9b058c9e9f96676f97a8b698b67370294cb7b5ca4ca5256c464cb1591908034038b66084c3038d5e19b4e74beb2e5bf4668e09adb4e9fe6b441a71ce31f07ac498d91f5d29012424c58a66555c24bddd279e4ab30a75541bcbec96d6d755d635dcad71cb85d92cf689d8e7f1ee2ce90d942d057f98e69c3a06d04a1047939f8331dbc329aa83f92228380665d9ccc3eef1bef73924ca3d664cfe63a9c96bf610ee2f6aa2cf6e2a5acf1e83f2ce9f4a4866bbb24a1dd070d40427c4670955078cfb1c4d9d42969463cc12d36de92b0063a834267e21d320059fd7995ba5e81dc9d31e2e0152dad1e272311911890dfcbc75ee97028135920fba9b362f8b84826b4ef168e471ffb6640a433159f7dcf191ee193d40485973c0238c85c01384ff0552c98969cf7efaf43fe8a966962a36ecd1b17b24d5c295acf4d15fc17c6e74e10d7f069f3c4eee1f4727ae45993343a40a2ccfcd084b2d95181e7c4d89d3cea242e763e8085772f5aceeae86484a46d8531599b34e75bd09980dffbe78371359bd923e9ac243f1703edcb1d28b104fbb0dcdd753e218cd057f72d21fb5be8b1a7c305086347c75e3d56fae39b01e1fde5c797358c9f5250234d11ab44195629a32f09a7b804596f484b2fa4ff896fcd943d89c488fbc43b5cf7be3db4b1104670f1100f7e4c92fcbec96a93586491938a64b994987363b112059d3e197f2327a0e2455a16d4e5fc77cd89cc9e427589ddb336a95232fda8b0990214fc9e3c74e9eb150f6ffeab64f18bc92afb0685fb6325e00640052820804e248af41a146ad3d78fe48f0fac7c625f4da116d9922187e249ee5c41d8f2cfc010c681ce54ee2e971e786d30e313077053fc720c0048386e07b094223a30ca343e74f8d6d2b6c332c07bff2ccfb1fb4d38b03abe9cbd79ea63435ef136e651469a76463d0e2126118d02d2f138b5a34d21410c213ddc292056a52ce499db91a4c322fa72ceda09b540d5b94ad3104f78a61ce19c2143b91c8a9a06a9df72e449e9ec783f9a1a49094517faffd84afc03b4bed4f4f29007548fb988c5069e8f5c97e0aa16db65b2c377aabb3d57104ce2a541b6ff429ebb2af16b9da9e0b6be9a37c9d72d11924ab473b3a3d23c33ad7d875f64b8f9bd3ad4ef7e55ed3f7b71dea0233143898bc0751aafbcfeaaefb02ef5780df6d8ee9d77d959e2a000df4b040a26627bce5626529ac720c2117a17d7f8b60ded6762e8578cae8e864bee5671621d6851e381d7bf849fe48a930c14335564f9696ba396af4587b2f4f481f0f1b4870d549696cb0139dd78274600ef63a66fa7163b767d81416ad692949bebdfccc56e56efd1992632e64509ab2353690ea27cd8e1fb18a85482ce121c4d347dce4054e2050d97dcbe945787b6c02928b5d23fca7d0d545a1304b5d636344e9d96e853f2cf8ecbd1a39348d84159541c9f75623853a48b60f7cad60213892f6eb8980ff25916fa0d44320d8d8dfb76e6c8b5d5adabf28a992dd5baee8eb68d0ea3cc499579d7dfda2fccf012c3080ec59bc7b724ad31112879ccac3ff69216dc1720a52cb362d411c943d7cec739d27a0a91e34cea593dd4faa93ec19f7d0af264f7de28b2b086842df7f7587dbeb1c356bea82ef5c297b8a6c1afb27697aab97aa2262093f1053849d861516587f94c93619eae0a5c8604691f839c7d54c2a3133f25953d1a3422867983d9d9c0e35ab12d5413d26a775d45669e327349b5bcc45af05406bbd530af55d0d807b1e07f7b6d6db88b2c72d53f5d94695955f25d2f93ae3e7e49d24a3d58268c92c7ad4feee8e8a89aba34a5eb00076bc30efa4ed01ce198f28bd18fe71b6cd7e8d466e6fc5b9e4b64faf5f60237c2fa29fe76bd1ca5842504ed6311516abbc04f06e58d0bfc790119638ff93ebd2a05eadda4120fd88676f091476835c160ad1f18fc7df7343c16fbd78f8bce65dc6fba3e37cf7ba68a715b899441dab253e368f165f72845bdc8ce9fa45a9706d0629cfa073bcb37016b9b7b9f2d21564df600bca20267d51f870280cb3c2ee48b78f9ab4ebd452a59bfb42607cce1cbcd9dbcee4a488e3c989f3d49e33778e11c57c6cc1438996cb32430ead9af653ab3696f04d78836ada96610d41ab289190c41d907f9776970a53f1c8a52538429e808e7bafeff0409f65e6c6715e8795786cd86ed971dbb71f2f31e12d04ec287bf9e69f80a0ae5c7e9bb21f2bcb6e13189d3a544b351c0f3e730bd33b001ed5299091f5dcca1daa9b52bc2ab50095831f6acb88b91c6693be31c6da83f47cac7623b8887b2f3ced6fa661b56671d4a009cda64197a3d4ab1064683f09859064f6499f1da19297051f372137efc7021cb983e78c65e42b4893b69df5b73aa0744fc032143ca51e4c0712a430308b12e32254c6efd8abe3a562358f5455eeef4f2e03352b0842499f216e226779c287cb0da5348ce5ce2dca3103cbf21f101ff40dab70dfb6131778c8b3e6b238bbb97841b90dc1731a3c3fbd77b6cf6828c6a4a8e683928f63090f273e474b1d2c876214b3f7adea7a213fc3e46abe108b1f2ba0910fafa10e4c016213ebc2ef40175f98a91ae08ecdeb9dde09563cc4c58dba648b97c0b0b872b0eb3840dfd93238894983a92a17d56632725ccc541d7ad63c023fd17b76d0e92fd9e37a34f0f80d901b882cb34136e3fe33b5f212531c6959fb1c06ef06afb4189ea0f9d246ff71736da3cd27b172a609e7449f1da706fa7dfb646b08fcff29614a46802e6fbe3b5de97b208c8215fa8f8d492b4e0f0851275ba9cf2a5027d349a4685e4035b8aba5657e531b2bd5a3bbec0ee09567e9f0f990faea4d61757f808d1fb391bced902016239d777dad2867c5fb5f94c78518cdc670dff27cd024abb740f05cc2210753cc8cafdf38f93bcfe9d3b3307d2c3abc85803675e37b20716555ede8cd67fd1918ee2d9d29b4cf8dff0f70fadf471422d7b8cbac39aca3a058be0b462b7c8fa1be5162480bbb65eba3ce5d05e12869a5f9c03c924039455674ec7609f15e12ed8e3b7a1750f8dfdc1024613d0e57dfcb99ae9db5b67ad5d29ae30c177bffa034794a577e0a1dfb7d6341201a0e7ed6235326105e19ffc77c520b0c8020845398ffc3d77ab5019593464d7d99b7f5e3804ec8e7e18ab4a6c2dfceaa3d8fb417d670cec47cb2c7cd2fe49db0b1ebd55fb89e3c52e661b97eb7c10c852030fec60a20ff78ddc4edff05383a60efa56c0061cb7e8de99a3ea6f8a25275e3f6136d61fb3f95679d51fb6eee5fbcff145d891ab2c5f6ce355fd10126ca5f0aa83d42ce81b9f6317969672b6a0aae47114b0d5ae648d0c185e33f0087003b9bab49d222c830e80bff169a5610ef29e44275e73b0d6716f4618415f5d4d8296c5768c4ac3e624a2256eed9da26d3a734bee7ac2abfc077ebe0bdac9023617108ed7f74e8d62f1afa50433db917c193d55c4b2a5cda65f954ebf69cac263f329387710e07d8e4bd1fa29696dc9bc1cbe7b9170c7f3d2a4974ecad17e623e715f93191f5646944caae88e2ca992d9ac1763e2ee0a02d286570b44d9d52c634cc08ac201a6b5d2dff190467819b78dc1f0268e30673a29b3d0f10730f744d6601036061f07b4d954b94d3f2ff5442e169e8c8c371db999db28d2211c69da4ca9207ce617c1765ee1c784396df8b48a09330da8b28ab0763278c034f5b39063cf0d94527db4baa7e6c2f69d308c458ac3af88c98a8d32a7f85ed9785431612d4b4e8a3297e9fdb44cffc8bd50084f70cd0a6d13f0667aa9819ae1524832f3be95fd1c7b41596031132fb11c4f77f1c81961239f96a1af3c34115040afb644d77548c8320f63846885451f07f6c577b6876775b8789c627d6cf3d10c40e3ff0496f3d31193beacfdccd5d3ae427772b9e141987583729e4d46b1ba08b7925dc8c825c8f5af6832c0e8de6aae797dd90fe390cb7951f883ead425a430a8f35a9d0a2fc08d7c76e215bf48bc8993c68437007de095485b1fdd53354e0aef04fb2fdb59fa82f2124bdaf8ba1aea7d68071b7a8cf7f607374633d2aae322020c837b652993df0b1a6f5c071726370181689fe307b4e4785ae2708ba72ea6163b8d59c4da2a4339760af756a69c6ed0bdaf9c6e2f11c17059dbf731262afcbe5a14d483ca42ac57605ec176560ae9b2aea58634f061629ec9e39be74d966ae51b3419e7f1863dcaeea80c72da91e7e770ec701ccb23edc46e4d20b2d77160f31179de4b9afb454e29f078168e58f11b23a0fa98dec444829563ef57ed9815298e25cb00837ec3debce2d00c04b83d1a732c5f47019e1af5739661a188f15bead0175dfd81f4165c970e2e612dcba733e76aec7a71457ea9f7f031e88fb8ed01b490d38cd36ea2d8b5232edbc7995a6d22ccbb66266a0b76806861808f6cabcfbc9a8848735b6d7d04f42ac1267a9c320cd516f032633980c2eaeeeeb11e973b015c5f8ac17127c62fe3b37c4ac833dd824a43381a78c3d05aa5ef10f1fa7ff854d47b6f1b6ca817b368ba4bd6b76b4daacd1623031aba03b62fa139c13c4fd00c79458b952db099410e50b27d0f9f59f17a1681dd93e75a17f3a1e969a25627ccfc0f06e32b29527d13a66ac5527a3a9458339945cdf54ba14df1ce991ed1e161d8296f808adb6a27377d1d3a7d7d63ff9671bd86b79b83a14a2df8deda67a741d0377cd6e4fa8ed9b2253739f6db0e30974fba19adb77ccc570c796e60157cb5b6b2313eabb7da8bb328441371a30a89d3a0ce61b668f205505293722fd069cef3b3a1d0ae96e80c56fece52d1ee59e81e84c5fcccfe449a84062faaaeb553161af6a0d97c74cbe9a441f05725081f70c9c1fc37ea1f6b807764944a5a7813783a2fd1bea720601783b000e530cea2b9366cd64d248f7eef6b0a3ed7991cc12b30b71119c5e8a47d8e6b1ca12c36e2afd70161255e5c89867c8699fad43f8d1af90b0eeffd589a5cef6242a4db688c6607b3739ed15756539f94b44b5212ab5fe5b436af9fe9dde8103cab2fa5be351e9f049f485f8b4186108d575a60ea7bd415ab2cf8e1725b5afa30392ceb8dfcea6fb67f8d615dff6a5c3f6ecc13555a5a2306123f0f917433070143496f7151a7ecd7398f7b3195a4563f3920bbf2f3ea9dfc48beaa1f5195a57a1a075b8060c9fd2753b617e2e14cc61ef2b4581429bcb670d3947cff277b28a1849ebbc796e1c553542e0874da8d662301790b22d3b1c77b315ae0b74691c5eda98b71fad784255df548598935b68bb89340e3e7b7565cb87d38177c62e0cf4b1519c9f84d40484692a94485db591ae936fbdba023ea319bc3f0719bf041d893ef3f6b0710df2c542e7daf513a04d1314064a494293007c25d853ba65f5161e1f07d4985934aba629cdb9244e17d2295108c3f3985c1421fabd3b1df0df98400a43906ff9a9d6fcb67e65d6ad4e3a6dc5a5b8ad985a1f3c62fc76ea554e3b14b9113f0eb4aa73aeef0bf8dc11b5f5ed97bace101813de1b5aa1685dcc37dbaa22d883fa5fbbe8e43e4cceb6c03f8129ec309091cc5b4bd5a6b8200be4959251e86aebb38c4526ce59a79b456bbf7bd41dcfcac37a0c7d214deeac1ca9da2321716d4a8986d4143430879bcb052bc12d1ac727edd6bf04f582637ae0cf1874b87d4b9ad367486282c2627d6f5a56203abe6bd4660f6cc8483f1319c7baea4d7e2bb4696fb95fd4e08e97471952d0d401918af7328d3f2e0a56a809bbce5a153a676c8792459a0d744f572fe37a270d44d14004583919c05f441893d1445cb047f1f88b16967282501bfb032347d16f86d0ad7df9ce38aa00262d6e2e22bd53c629cf1046e99404d9eda0b91afd4008eab7abb5cc0c7e003f0cef44cb52ddf503a96c5a4ddb359a682cff9dfe07263797e9446887e2b17229e6e1177df8498107d1eaf6932653c4af3a71124e41c9fc2786d98f5582c61dc3db2e2c58dcab8a2b039df9989eb7ea5142c662b8023253257dd7be6ceda31c87dd5b824f7f5dbd796b7cb538aa2a8d2d0cf475c36870d044b4af5d56130d1fdcee273846015eca91ff704d5573fe2b42efccd7bd8d37d1b8bbe347b4be0ebaa2d451cbf2c7d24d1c1689d395168df6af71f9e097a87aa0b3291e571e767d20293e2f1df8380974cec5deebc6e063b894e97270dbc9b71ea946c80b87a634720de77a2b1fc3509a81b09be70d08a90c4d4702e2375f5347e82dfe9ab278218c9fa6a4093023f289af2b95d91949d70bd8d4c893059dc8c56459c845321635b9d00d97b1cfbbdaf88c6e3ee99bcda5dd06fad50e5b03e15d818df4eb91ec62ffdbf1a89ff1962d5f213325a53e1fed02eab8759a687185e0979b94425843e457d8d829a065afa8b335548a1245013160b370f246b7350cb956c96df5675a46736a241ad08cd6ecfcae1faca3c82480a598061bcc403b244a77430ab884d6ad890e3e357fe00a78bc57cb3c33f47ef61293c30e759115f12200b1cc44c0fecc7eb9809b344844722b7775eb9019de3cb68ff3ca8c039cdefac04db66fda6fc78cb370eb83c111a388adbfba0bd30c8a6a037a855bf2964eb0fca1b42fc00adb86e34583f5dbe88e793ea9136bd3bc8f6dd1a8f37866b1d14bf1f9a8f671743ff68c2351ad9ec357a91d0e0f7d6bb788b1074f953e3f656e43f62140276c19c7e10a238bdfaae50c0bb872c31ac7b5864542e5027958200a990257da4f0b67433b3fd508f7ca5b7f4cd6996531219a07deec9c74e0fb656ca346221d96414994f1149120b9673be475bc3f43bda6bfba467bf284d9091f39636a1b05ed355e4e6cf6a9307a866b61f98c8adb53434cf6d082b528e9c8f0af26254e0d4a206336a053582a1fb0dee2cd228c0d39d3aea33fdb9adfc20383abb3b603d231ea09e3b7f8db41df7dedd63f879a2139dbeb225172b54f40ea1481cd537443ab4da49e682ef4a7ba80c9a8f9e43ad7dd707881aeadf8e4d1b6a65c096a4f1197989fc2e125f7e5480fd73a5ecdfea742984100d0199adc9bec49132398c09c53ab7669c350e8154063cba9c72ba703d4976f5af773a3ddde91f2ab05f1b4c3641d1e7b6056c7b3e4c9d7761932b05e7151170241f3b3feb9ce112960226fbbd431458e0bfb32121609a4e449e19b9c7218738d462d81fddca6b5c5289b43e9176f97940fc4927c88764b81917bd728e03379328b78419eca6c93bc1aa4ebda894c43cad0384a01f40ba2e84e938529fae75dd09145301c098021322a3ccdc63d1fb71281bebee403867d36ea473ab79e236aa5d53c45a3e4d3a34ac7c3e4fbfcdfcb7301e91f1104afcdc2a8ca7f39d94552eb2eebc930541c92291f531f42e3b2d006d80d7ccda8e16f916c31200eae91942a7edcb7179ce5e6a52691797da7a085f3ab31b22ea033cdbc3557fe09fa67134bcf354e7beb2e0763f73f05c91cdf20108d42692c597fe9007e68606be181887d043d943983f313b47b6cd77f7181747c8f8b778187d7016d13f830f70fcd5dd08012e21c34cf51e131249a639520d27bb7e393378a89327d3c2f248174b750fb7c3faa83255352b9cb391edb2712001594d951885edd3788a898859936aaf393799fc3bc6a2f46415626beca3e9da2590af91c956cd00e609db931b43dffeff79e6c7eda810f994890e60223339f505a1030da94ebd662bc213714d7ddf8123a21522aaa059616f805a6379b7900b8348dd668e18b6607e341d69b259c05f915b093d5aca98edd55652b502c3115fd10b6375793e015ef5848a62eeed25be1a83f30a8b1a7758d35c30a2811954de0bcf44662c794c3102d123aa0fdefb61783749fdd2708292398595af4be9ddf76cb35e5f8e790a05013f64436965690f517119ec5f5c038d5456e50a4d48bbe70d05e2c48d96e27abed6f625e742cd1b17d54cdcc65f64403fabba6cff94b348df213e9fe789997146a0d9048680cbde77344f3dd856f8345547ed4c8f55f5681b103aa2b88e724c5540e3db34686d655d37debc928555722ab33b8de0f4d6cfb6f9982227a801063e7bb264539f3159e9ada0baceeac0ad70d71b4474c640f0805d0dfd625be0ac6c85060b6a9f92dc41e7fdf212d380b33a5c52a8dedcfb9b390327cd4b8a62d468cad2654790239bb21a628f0f024bbff9ff60d4b4ebb19f0f3f8772e839e68daa890854b26e3d802529d179b05c666622faf4eb54a892d8da2c261fb59151cbaacfeb8dedf4365f37cc5c8ecd774fe96787a32358259a0e70c72b01c5dbc403be22a41b9e9e1bb6ade101f5d5536df39a5c26444824232a86c3f94d4458395ea5b53c950053fc53acf280071ae40700b0d932e2dac779337ac5a4c233faf7770a07eb656bba3c15182b2a869a44cd95ca1b4585f0b45bb6a757ca8e18ccf72242f93a665372206120691d02111e547c64c423374af34617cd223f0a345c3fb61e8e9a0d01b1c85b346bb237dc3a2e597082ad8f184f2306baa4f76fef1411dbf83c02241004c5eac1848bb215af4cffcc740cb0373411cbcb94524e50f64f0dc9dfb7a08030a0899ce34bdc0e323daef3d16e01f2dc66fb5fd268bc2a37aac260e5af918b352351f2628a7a60b15b024186c070c2e8ac72de9f4785f72f23397132812b8f6cd4c5afdbd5b5d9dcd86e49b8d2cd892fedb0868cef8596ec48e45fdccdd2c06f2aaa37b11a8b04cdc1715e488910ee2ab0bb56b30cd2c7a464874e138b83be5f46639ce678810ea7b1589379136a40cf4e500b7f4315df7b84aad67160bcdd9b9a73d975eec9f823dd5db6b3040b24e4f076cdf140ecb5fbbbf8218d43986c0955ee9c2cebfa6602963dc727b9675a466f069813676137129def4c10cb5f3f66c5dace343a3a9335d98da9517d156bede3e2d64f6f49f2bc7375a433e3f46bb8db74fefde84009a2483fc9049ef758ff4c427f1b4965af470dadea43fda00f024720cdb53a9f4e937c5a74b72412ff5306bef4fa73fb31d15fddcd6c82694081d473b7a1c9d8a4729eb606ae8736cb1a11c857eec70eb65d263dfc806da0b830fca1c795d6775af4be6440e75901160a201dd07c976f372a9d72de734289058c05df8351b42e1642fd0fd27c6743f7ecf67f4aa55e8f00787d3c5a11bdc57a88f8a69cdda452c1cf4f888417e97c12c781bd9ecd8767e1f673ae1a667063029630df71b53055e4e4974c36a8fce99f7c4be0fe278f8ebc4f39331bde6831409b93a9b988487b9229d2ca270655b79ed25d6441345f936705e2b3bab83713f4158ca40a5dcbaf17a2b7d635e461194fb03ac89fdf611b3c5225d7075d90ca6b21e100f7724646945ecb478248e2188ec8d996faccb8c70165e4d61e33132916449c9b0cc8997234402af3ae49899ca34bab3cad9721b58376c86e2d46f2147bb60d4266e88c7681e764fdbbca7388ee553c9f524a96d553039f47966ee66e92a6026b39eb63db505b35992892945f076c7da3833d7b8b842b037c152d35ee9e5151c30730e33ada40d8c986d898ee19bc7d8de817e77d4e9e9068f2d88c806e2dc0bcea842cfe272d1d9f1396b7844e29f67bfc4093b86e4fa07b51a95f4ea6f1895c49b92b4abfca9332696dcf21096e6c5d757da02719c31abdb4988384a1d5aa746ac8ec65caa4c67855022279660fea1f5bd1192c77f780955c82c7c4064808b52f1087949bbee80ebfdc89f8736434282d6e1f8cccf8e02a765dac2f4d3e3c8a1dfeefde0bf3a77d93633a67e31312687d78a1edfe59273c7b35ad6293fc7a8d3e41e1b4db1c699036707502e9442c4f2a375369342e85886133e8b134504b3b4d15cf275143d9f8f4eff896c59a4e2249e59221e97a7167cfbc00cf55f21af6ac2bb407ada8d438fe7e7fe3dceb46d86b747ba37dd07fe14201fd6dc59a05ee16bb13413cb89677c0818c683ed16aa1cb51bdab55a1a39bf2d2c3167c1d5e1e05a45bc14169be1f54f6783960016f8e7e43dddda1335f1864c8bbccef2f75d720a91d7bf2ab42ea16c4db87c957e118baa47f416d4bdc615f60e0de7f7aa6aa77aa0a64cc28aa9cae6f0823c4e720e88d51642151d075cac51c7789f332d8e2b3b6210e5b3f34236f9dd675f8483f2d97bfb3570061bd30e953f64271cd4ffe3778703f551b6eec840f1bcebf1b78d662e9c3769742c287b3a609dffa81774f8d738df0f105fa7f55b4409a782f136b86d530ba3504beed2a51b86bfce9a203102ca7b9cced0effc38e3e0a6100684960bba954a15ff295861d1c6137d04d72c8534576dc0e07eaa8fd6a43dd05f38121d5d85cf6f249feee95a24ae255433c108a3a77f13f76b0596f40c7fbce45f19cf39118e3470a1a345bbc320e4a4a11be5cf4ab96c435510e9b93d8c252a396a8f6935bc4eac8dc4c2a908e9efa086562570bc74b8efde8078e32da9c1e7564bdad891786f0b40eb3031c06b7aeedc07102653e0e1cd2cc1b55a728d5ebb8675cd4a5712d02e7ac8de483557740ae0fbb02224a640ae6bf8c62c78896038b6280eb77e16ee4369a6ec99e3a67ec3c991f9c631d9340268766e45839f99cc157d55513515e6cf60b6ed020b7efdf6320ba26f51c5d01f4bb942acc1b482c2f94cb2bc2501313db61f2b31381f28c9858e9d298bbf759f8412b774a666557c254937e1215d1d33a3919fa26d7fd355e95bd6be174f85754581fdd61a027f44f137ef39844eb6a6878be027b2e612c25d4d30ceabc462188f99084d06ff8647a2f69a4fb1123edc7a0cff493565aa0e9dae33e20e7d4495f460e6132fbf49cd52e84a896c4f9cb02a4ae6b92092f33b50f3bed93a5d22538834a1321b6ec97a8e44d3622b6be4d4817527ccc2e1c551c67d847383d12c8a41895ce7d37ec7094e2383d0729f9d3fae7428a4a48b6103ac67787a18bcd914dafdc0ca2bed72ec8cee8027422bd986f425f4a88b79cf2e7e403daf67c00486061cf96506713b569157372143f21759ce46264ac19ff84d229f6b673e94065a2c3fa3074576fc6e91c6308a657f5c3e2bd70f6d54e8a208f29f73837fa9ccbeb4ead8e1241e2b74b5be7605daf9e18a522f7d02af10b043e25f6883e6fd7821cb89a52009a6524b21da339f25b8716bec89522faef335caada70cc4829c6a3c2372dfba74202f176d6e7f42cf98700e76c4335b38ac081f40c54b71a71c44ae84bab7a0c0ba37ef7cabea6f2acffbed08d2a0df08fa1625297c5daeb51c9c18f987d4d94c7dae3affeffea0f6cd196196b0986edd411f11005b46dd41d0a7853f70183e37e4e3e4a49e094ba25e1e3178c1b7de5fb0df5994a5b1ce328b712fb9c7644eb7ed61f61ceed3abbb74cb1abe0a9d52c6fc7a51066a2ff262136c5977e527708dd9b8d36ddef86e8f5d387a5dc36312f8903f9103ab827bedcc538c827500304c095af682e212b123eb269a0b6e9ed02c694399c51b436a1944d02ab8be04aed867eff8615829d1ce602fdc9f9bc9dcc09e09ea71ffa21e88dcf5a591e9e6e99f36890d32d6cde6503e3f7a3896a2cc6ee50f2c62af225c00659105cfb028a2c7e7c8236ad8f97f3ab500d2dae7e4f9ba57e654930283382f164730365e01f438ed79875656e84971034baaf872edeb9b3027532e4be6c755c30cdd803a59b8035933c8da7a3e59de5b70285aceffd8b786254e814696e5f95f9f1269c98b578978c5e28fd3151e4ccc8ad2ec2ac0568806d5eeabf5135e3a0d5416acc88d4bd98e614f024e3a97505b146b752483292e31eb27d752b6f9007a79b3eae719af0c88d504dfe85f02b93c62d2acee854f5d9bc638adf30b676246f6b8845646580b55979eb74064045fc12340c089d8fc8b0faf2065154e3833f5b1141114e21fe54feeea1363f6c4e077e53c743a8ccb502f235d5d5ace178482dab0d0001eb12753ec8e317e5b681c09a0674244ef9a589e5f9bcc4769d9f500e2401e4a3e95f30236ee368331645017868deaff2c32a039841abb4a62766bfedca8efdc70806f0f73d12038edc9e80af7bb5c72c3814a64507ac364f66f554f39036d8e0e6071f47fdaac4c9ff602e9784a6a2776c702623624400ba57add2adb8238f365cab5715d3afc08790e51882a47bc0e869944d8bee827c76d2da5d14e38347b691042c58d380d70f8dc11b43ddc5dcb0cb26582c4ea20b27107ac13e3f14d8f3daa2c7bcbff0c12da1b777233abf8d12226991d102147ead2269e2dd30802e063899ab166c33b4487e9206b23239772a55cb2161a625f37667d73256e90645ee2a8580a1a817c46198edad03826eb4eee4cc4a7f2f03b923f5f58598fb583750d50683197aab1f9d7df541bf08106343b3233db9971a9d36dffbb832eacebaf37af7719021f4468c08695054de4ece7c670503d1c67fff2ea77019d3f5108879dca4c3e9e3a00b6afdcaaf0c406cfd700c5213eda021e0e3b9f67cd155f0d1997857111bea950086c7db3764957400b77ee5d7b34e038bd658a8f1e6ce5069ec420ce16bf3bd46e22d6c4a7537a2f60cd3a8898b740925a0f47cb05233ff79104753c9fe97c568e1734e1307abc1fcade422bc77bbe96a70ec64097545504b800a79e2e0d860d3b308c5525abc7e57cd3d9a9636ed1a4f776e0f8bf8f311316b3b33bf7b788ce3677f1156c3dda11581185d52f926a43a019c93cee7bdea1e182dc3624fd9cc3a10d59daf37bfd869b0926c11a8769adc9c228a7faca9ad2bcddf7e1238abbd551800c6249b7ddbb1a07fccbb2d010020e08613bef3eeec0f4048542a7f518aa0c285f74795f07faea9aa5c4b034e99088663a126ca3fbb1bdfb12be48c48b50fdca1af5ec853c08e02912e6760d8c06b058811e59b5ec0d85baed8be0e90cd96215fb69f6c59c6eb88d1ce2268129f3d6b30e8488b36a6f3384a001ede4a913405d47650087de920f6f12c23316231469146d49e0dbe90236cb5584d97955ab3ff72a4956fac033557651f916f29560fd1d18cf243eec5afc92384d2600293daf07153e193d3aab91199545c23001f735eb9525d29c4593d7c501af722c6231221ed51e3f6173523503ec922966eec25c4d683f646b5e3f7e8ddf00f418c00ad6a56ada862b59fbf4c955ac3ae1c3fb93915b2f13a56f45fa08d0b52c11a4bb6f27acf2e820ce2d37982af7904eb380e4df7603dcc9938a45683867844160be732d425aad5351c90ebc527d7fea461bc257b270af1f79b53e2c1a600d44e7a3bb9e5d319f8a877e4cb7e2dc3a30714df4d386fb97d5e76e51c264e4e4c0ceafa78e9a30d68b5a0b87f536106389d5864310ddcf2c7c7eaf8db8dd88d413ed02c1da81166e767a8386d562d1c6fcd8d5d68906792d4d2dc49af4bebd37da7c347ea55d09128b94bc4be3e697df59a25ee327e8eb8fd82a6f1dc4729d6d7fe6f0bbf643dc198be2a1161c786951cf09ee0b90bc82e2030654585442eb8292c90d635f659ad3a3a1af2746e789cdf1a921af1d52c3285c6dbb9ecb47888789cdb5c5d47c0084042ba47fc02a79e3de5a94084e9d32e796cfc7e1aa73bc9463557e87eac25cc4fa37516743e4733bb53036564fb620d7dd6a4eefea30970c96fe99f02be90b8b01b02e84a1daadd48122739d1981c08ed87db3cbb0a66d506fddda923292d2f3898409fe0d1bafc87cbfd8ab6cfb53e23128d9152a5de6acd24a7f326b2e81cee948927b9c4930ba41fe66792a28dca1859da6778dc1b9e28af64463937107550ee7b97e02cce2507d171caf99409fd28fcafbebe501e1a1381cd8bd88b3dd5107ebb367fdbf6848fdb38fa7533c72bc61058aacae04d9d0fbc2b72d2f94c68cb120640bca0d4ae3cf1261a1f0055f5558814f4f9b0476c2ea5b2b68e4ced73e2781f8ea32c0384fc570cb74c05fec04b69fefcc37bc90fe3c8574422a023cdc1cb8568edb591c79d3901999f3b619e15aa15f2dc623f9b63b3a09aea7590149d9a5a4c30ba6414686d4d95033937c14e3f5e93881bf80b59d1ada338d1c9d451e2d834302e50aa939e5558b82a9e294f5a1f8f9f2965efae0c5d5cfaade456388106ef0898c338f92a87790c0d58ff5bfa2514f70c7096b427bab95d3964e8d4577c66a5c917bb7e3603af4675beefe764d8c38fcd60f31d2101254af41a5304a2e9058ed56424499cf6734839ced87bebe2a8cba3ad8994ded84fc3d76cb80364c1c3b136b8ed26794db57ac300782ca134c35bb55c9278ef1ae9c8077daf71954fd7fedab58c6be3036e3a52e4034f9f4e8ed33314f8f5f8a657bbdd515d82eded3f4c11924191066917cf6f204dedd0f54e4cea7e338f6c35e27653e85fdec53cfdc3e7b0dba177551d216c6bc8f71a3cf1cc01c075a59a35321f961a9b3683ec6fdf3ec0cd982180033de33fe9585c1320ffde7f366badd13d869fe19749dc9c5608e9097530f652231c1f2065fcb07390781a0fe9b0a2779d9660531fbc094b5c35a37f80b1743b87b906143b998b94a80a540052f748f54107980dfd80391ebf6bc23a53a946ee33878f536c8d6ed9831d33d6559396a729a0ddc9265e0996b711336ec1be1fdd167840a7173e744b12030b07dae58e470d6a3e9ae1cff16a2e65efca3b0cad6b5b5ab6fa69af0ca1903ed0eed053963b6c09285526a331f3adc60e73a5925336bb4a467f488494905bd2555d9761562a01c901e58fed1df58d3b6ec82236b6338601bfdf197cf474bee09b2f22718735cbf8a5d73874fdbdd6b2be79114ec61c8b9715276726b308ac950bbbae0db54b5418d0d746af321d5b193ad996218703fbc47f516b3ca976eb204e34f2696e0b669385fc2a44e6673388b6129e6df29cd84f9c942d2c924bb9d64d7d3595ce945e449f7e55cc698af85c79d65427cadff69a369b04a794b5c1f42a0e3e956b217e610133b4dd78799abb3bf394a08aa49cbafc19d72a7985e32755aa32a1a108056fa0eea0e3dd0139877f6df7ce17f772b713813eb65af40a5b6ccebfbc6cc48150d390249a507dfee2bc1d49810c6618a23cd656e8f3755ffb5f5dfea6ffaa97055b1abaf97b414fb367be51914fb64774233dbe53262db0450816d687d875466d75b08a6fa7f482f3c28e64ffdc33368f996038992470caaefd099d8bd4e81a9ef951b02154983dce2f1877a57b59682fc53d39aeccfc72bac3fed37fcff11a94a2b1d93b0a1d309401c00b874dd4bb945721598c7691b4bff064c315d30b19a0280b461179865f2199f427d09494297d23aee6d335db6a4ef43ef6dca0e0156227bafa4496e9a8f5b95bf81f68b39b401c6cab47bc1eeb76e3b0593580c587937d9831b8f75ced0a44689d7a055b93a53ea7161a994d4bf679ad9085f93002a7a1a8aada1e738d9a0dd0371ef73ec3e6bccf3341467277a3ecdad26e11e009490d924f1972c2500ef8a117510bd47f4848ab277fd596062f0244549f9f091719543fd7bb08584205a53b516ad9ff8d6dad0e18388a0c22541a96fc6526d7b6a2de1cfd9a2326f6fd613e16805e94bafe2a489ee9f026d9a7bf093177277c8a96fed825b251e6a2428b0291d497ed10430d7736d7b3b9d1eef3a0549715fd6717f74f547b699def2789ff28b894a2742a81a2d2beff9d59dbeec91b76b58d9ed169009d15be04d0a46d434cddd878351ed6e23df261100c3083389a5e8074e96035e0041d2086b79306969bcf2914b41edca3d59e2f30bc8241561f51abe6b2babe6951f35553924c52306bf8f1ae88d4c6f92105ea67811e47f8f560c235f21eb924d26b8eb9e77394f9d110bb470b3442deb576bbd6ed356df3b0a5451f34933264c8e73b6654a01209ff6cb9f63c1e16638aaadbfbbf42f64ce01d8d3c929a648356070cb4249743fde6f9cd6c47560fcecdafe720bcde33548083f4d4a7e71e7ef0d16d81a5b548d761390f9ecd80e5ddeec18a9c8bd3859a9c10cd412ef6762ff7f78c4843ea1bb2c7d15ac8ac771c0927142db3d6e76305c54acf40f4e8e9b313c8af6850d98267cbee93a931ca4e29e17464aff60a266c16ad7c69a0954af1fda99db6b6b2260756167493d1896a8d381e3d921f9c7e0ab6f54b8ed3f72a6e25bb5c18be26b4a5702dcc43493d1ef7a2edf211466dd7427ed31f2cff31b31f219e08da1ef553a6a92987de0475e78fd311202b52663223f1d4362bb5e645087c2d5c050647b44d360cf38668a63a6b1a6a23ed6ef5b63d133e88be1f7ada8938284b0c7056e14cc88b16bcd52b0d9885d848ed32956b6e97ee204edc72d7f4bc1731b653081672cf850ff153f8d374b3fadc636e087f1c752f9a01d7181fa2606a31fc75799deca3f2ce773362335095aa1ab4b8cc36eb1849941986cf62e949d7d353df9512972dd4d9bfc91ca46c4a82c6f2740f549fa33a288bea0255fa0cb4c11e0160772592a04ff3d32a7e249389e3088891ddbacf40f763bf30da940b2012cb6fffe9ef494844faddf65e9e8c6d8be59bc2f8f3f66d86307bd53574111e08ed87fb2453bac2e90be0af0e7954f8d14192bc93a49897a1869307a2e61124e89809bd4e7e19964ab052b37035d69f6b199c11021b5f882a2e861ac56894ced3c89f521f8fcc3e391e7bd1662d743fb7822db758ab4d5655c9b5b7e86c8ffee4a2749a13aa0b9de6b93ee65aaf343091551b4065676120422866b020794753aea2b37ee233dd69954e4cda3de413bd04762a6f61a9cca68d9d6ba7f90a74425ba5b967ebcf5f9452404cbf89526f037cc0f1e93dbfd5748acee7e837f08193d7cdce45924c94b4457db76dd2a9c5c0a402655e5a0a0c850a389c10dca45d443274b1f594c1c57f1d6a234ebe5f7d085a0888a82e26514b26d39f6f43a1ac9f5deedf9a50489e840e43a4d23fe40ee38ba0a86eb988660b00c5e9ed14eb8fe2093166529ebd9ee65518d127e7812cd6346cbf2d22a39df517f06938e057062edc3d05b21f00b27128a757f668d5fb961ab175c456620123d08af5d5afff85567ed482ee53d9a80e798d2e70cbe6ff6537b56f4f52a0faed434f35d8ec3b53ee9a0e1d498f7c92770983b40d24b670cc069ef98b585c66c89205eb3fced9fbd1abe408c98dc6061d99ade51b6626b3490f525c86580d81cb82f710ff0e5794cf4112733f1c37e94042e3149866b737d9a4602ce78b84568ae8637a017d02a270d2660e0ade0e2d155c271df53cd9d87767e1df737ec02db617c7f7d8d0ea65201539eba5dfa83ee1224a5ccebe47af00cc877a73bb441cfac285cedc8b0bc5106239a25a3e167de4b65dc8704a9bfcc7c5c83c28be9608525ea83526cbf6502f2f5fe832e3b422dd778d91dffc16e5bfe710c01e0e5eb24263e8eb9e42af4532e5ed049d6c4404fa4a80f07932f7969e07d13b6407bcd92abff816ff6b8f0679c9c5bace1780531dc74c4980a4570b0a38ebc5bcae41e5d30ce93a7f9545b939a2860b7c9db6b4215e147151a06e3403fdab40c372a368b69ca012fc69b749729cc1c3af0ab0b97ae8358593485e7e662f76419fa0285b01a20654a6e30c05a74bd6a317531d51f6c3c7b48d21967a62b1536bdc5da2f376b68432cd230e0da2461b98e710e976b25f9c123e2057c8d0700a4fc02dd60f7b8ce0285e8ddc5eac4e0827df67c1ceeac6d09df7a232ad345b1c6e33e923b8b788433577737fba3c418ad6380248f77942fcef8621ace5a72c816503f7491e672dc222f4a63eb4574d1ef72c6e50ccb8c6a50bda122a04370b5e9e982ae969700824ae5df3e9ca95a02f72a9f8bca55b903cb84f44dae249fafd95c977c971bf4fa0642d8321c4356566cb5869ebc9e6eb8a28e32c2d073d9534e501476c48be37230702259726fe06e5617e959e73d89cfced3025dc6a994c83da0dc6a193257189742d5906f31905acfb7a8637c4781d58ca2c0c77972537e4014bc730a8596f125859a81875ca0002915a3c25c5146e0c79ad12f6e1e6e2a70bbdfadabdd93bd0b147335d5c21999a24cfc829c8479a92eb23bcd3ed3c0366fcf39410a8a92b1f55a6be75a0f1767a2fb938de641b688a5926cfa989f8d5ebc699d6e60d69156e0096f1a0ee169a62cf1b6da84c9bf6307522ccea5c012e40d093d7dba75ac3ec02185e3caa085599d4382dd22cb45502fe059859efc1176579907c07d3f6c339fefca23650b8fbf75b2f1597e9e28a01171c6d6755b0edcdbdcb2b33d521dc7066f9e380255e8fd49aad3e6882b9bc1336749fc75503c3972cae66ed03396aef5bf592f293d27f9616d6ba0dd830efe5dbbed7076de83d17cd753495000f312a9f32429882f6d27e72f4bc12e53d7e408e927c1f17afaba726bc099cd6a8a2927a60f9da09b0542aed4ae702bc3e9ade4075664b66f251c803161c3a9298420cfd24fe6888323de92d2daaadf58339b52b6d2f6f4d9d620dfcd2c7166829123de8adc1ec4e73119377b94054c311aaca8abc92eb789138d634b09bf8a6bd55dd30ee02c631ae0e2a74c5146e4143d704870434b8ec9c748782760051109afeb2ba511772a8695684a1a1820ea080cceb18af42bcec6d8bb8e2503d248c16f1d78ed3bbd0a727d9a7b2a15aabf2a03e5d29b32c6064db01d3c87bf2cb5adaabd9186ee41728d6dcfc5e039aed98a11ee9b81bb14c440462528baea377f52fb80166832f53768a7bd075d6ee022b6f49e007fa4fcae39ff5f5b02c8c75b91f7fbfca2af0f098197d669978cd505587204da7429b23e1c175179a1c4e61ae0d2c8b162e708cfcba05131d02008508ee60b5253c8b7b1b84b234f7fe115fb7d194c2e836789b345530fb518d3367ef4fc7a2ec58cf86f51cedb3d01f47e0a0e0fc765b57a43803bec79e3e7ef0f5d47e03f37e083782e824e4344f1aacf1a200334f25cb4bacfca93014c2f61feb47c8533a39554697be3ce7e4c385b6e90a7705a1106c4af5f03b1c09fbce3f3aa6e8bd661614a1237f5f4956deb46d74269f6ac2a7893502fe1af706a9089728ea590e86e9eaf234a0bdc7e3e3aa9ad6955aa6cb0c82ce06ba5593b2886fff7eac955692dc072c438ea2e5ae931f29a25b04f56b1a46239925fe588cea8a7281955dc20076475e76dd6fd329d4882856a982e9230591357a1e41ac220e31d4de895fac9dc562704f8795c333f98d6d3af91d76eafe5dc8c3da66a7f96823f6fab8ea176d51bb7830418d87702b9021a36e6de88d24f0001b93d6c0dbf5424c8282ffb3b8ce2fedb74749f956c0a9f13721882431f8ecddf2814826d8671da3b1e9e731c62bd156ec86745c2520edc40a3a098c4ee7f9dc37d65561d068d7d3fbac59a4b86bc8e7bd7fd1dca83e81820c162e6d4d0e3fefdfab4a680480c973299019b9cc93e30f0f43faee982fb24277a8a5f5942973bdf8cbebe2dfefa8b8a1f7c7e45b6c51f3ff4523806da0b280e4d3512b7eb44f866908a7cde8694c4ef9a1752c3c47c27091593e575db7bb2152e86d88be8fcccbc0f2c2468c7ccee6980f1fd1108e564eab5c992b41c13c63bc037dad490fd9d7458a76a458ee0685472b2cdd06134e311dfe92468f8efedfb41d0a8096ebcc1c7213e1607b9ae9265d4a8cb8d1348897f62bf415359f5fb1092b81d1d5b207fcce89bce4c2fef0362105bd6fd6319fb232dd22ab558f21ba5316a8c9a05ba5cc044fd3581a52f7a567537e0a03e19fa693eabd3226ba9275192a33338fd7c22dd89ad6ae797196cc0fe30677eb6642dbeca322aa8bd8628e9bd8f72c31ef275a80424d0842a25277eae6fe0c2cb27b18a2f8b539badd9822f9810d1baf3337b1cd60712ffb6c3b376d8df888510bd735bf5df22eacf22d4060130d09da4403f360720ed4b0190d9c2fa865fd36a2f69a1467fdf15480d5314df7cb9bf7714b7a0a5e8c1bd2bc0fdf017c588894c3b2ce9577ab6b2a140ef139306c58d82235434245bc1ac4973091f862ec2768eb9fd22a6cd2bd3745d5f03282aa3faef5b7945b7bdac5f977d6a32f214c0ec387f4bb6d19d2b9c28393cfe707d8ef965470c5e0d4d279fd5f068fe3ffc700e1b6f1afb265f02b32d97a36695ee9f3f28c070cb0629d380c710c1940ccf198a6b46d7f0dd2ca9ef209a256a09dd130506fba631eb56162965acd7e3eef698a31642696a84ef3de4f0d87e7c819f6b984e5ca909b48ec53efc14a6d9b9a45acbd95acc2196a2a8c0ea1e51acafc848d1d26bde9936a11fe2ca134947f14a342f1e42d0e492f2f00ba7d7452da6b3cd305eb163fbdb38d9d372bf425934571f387baef1b7a2a8c4bb7e6dcf0ff2221c188173615df093f347187dc03912b7b2e84fc67ad7945146f35107e2e47581d7ed69f7022baea05ce09e5b293ab87a0c1412ac03f61191ac35867a79fff1db1888b2e4233a75fae9fe516f357a556d1b625d3ee0636b6759f60861b066683f2cac0ec4461f9e91d1cdd1dfdc5131599d633db846a2b8f4af2c11542422e037ab414f21450d5951072e9e35d418dce2572f672b589b03ee0e89bf2da00f48eac2a0f951b5be7db04ffcd774abad67124c0b95cd3e0be41befffce9b7798739419ff24f1eab4aa218b0bc156863395f3041cf3d7a8d553202a9e506ab2c7894db625a02585f6f3eeb699ca79e7b9b8e061bb942fe656401280086194916a4a4dce19064f6ddd576101bcf8ba7ddefdba48060ff637f1c9afce7cab8f37211fe43a9e813d7d2d37307ee7f72c4540d126a5aa088a64bad50a148fd3c10063577534e7cc833606d32451ad5948b606844285b0518406fb9d3ebe31355c5f701bd9365f6f4ccbc50a0edeec16722d46bb54f1ba27f8db4a9628233916c3978b1cf0b92d3a5476d0e2f455b5109c30935951218c107896560c54be0685aec066b40215f05df02e85f3d73410287c1cf5c96efa8940a75d1280c7cd6b38bc46aa58e3207a3f3dc0a762e9b6274262f6ee41b9426e081825610577069f73df87c51da0eac2f7daefa56a7f92781d1b1d70773e49f8685c3fc66702f76f6a181b2aefe50b8ac1bccf90e0249c14f38b17e4a0614fb440b576e402cbceb53e75265c65f2879ad89679241d6112d9dadaaf6366a4a56be17af2a54b67fe44d29b3e1dadf6c2e8504a6851d2073c9e7d57ff0b6213b54e67794ba9681269204217048eb29fb4ceb1fe0ed40dabddb2f47109d1743e665763ec18f781dc5691f58da5e6a741aa2218dac269042fc62942113789862cf9a537d620296e8194ef4b5303f82ab96b1866abb44903a9af0eeb3efff1dc0f71b5670c078ed6512de2a6a49097ff95b6194c139d114118e22ef87a4b927b63009afdd99794c49b135672fc0a864336d166ff762cd0ff090372441fb97345ddc9b31617dc0caa013a2b0484c11039f67efd72ace9320afe95a666e8de44e4972212c0a31c8225a554ffe3d4dd21415a4c9204a1c966daebf0d8a63980dc5afe0dc8b11b2df33b66cbac4b4a54a5ee153d271cd3ef622fa9a70cee17c3d6853a8b3c296ff183c1c1307440a46d8f3fce66a52070dc2f9da016c4d6950c8b1b46d2f5c512cc10bb764040ccbb1eb4514ee9f2d17601fbac52a15b4e0563b928c3dcf5f3de31abaf175fb09ef952b45ba940433addd987bc87f574218e4883d2bd91987c243c113b0e37cede24f54c3dbc1c3ebe334781a5ffc93881792a08e9ced197dff3d2a50076e8be5970f058e0b64d37f5c4c4a207a4b232652f1826a1ad9a1392c4efc60b40ca342c86efc4e93312a3c78b423341de8f791129bd58593931ca78d8f09ae9d14e8594e9f068217a763c5cac6a1fe6e5a35d09d76c31f3c179f5128c710d6995054b70c581912113fcf4dc75983203f3c435ded927276a9b08922a731883ee6df5148dd7d01164bc40a8e1ba44baa41395194de99751c836dcc982b2c5b8d9c1508e6ef6723c236558dac2fe043fa1cc1deaaed73ae609055ae9d0efedae8ce5ebdd84bae2a9d69aebf297c32656fe80d69b58f8f8b64400b9adb6812b5ca43cb29dceeb6a2b58d9ff7468ac3a8b8ae143fff5ab8ed188454adc3087d98ce154c1c4b7229f09092208e38bba681ceecda179f52b31850962a4b2f3acdc38541519fc5b7cfc744b8be4c4349dd2b66302117e8c07a7d86ecea32517394cbed46e66109c29b683512377c4a05a198abb4cb3f9690815ef5c6b4763c6b45c434901f11297025b52ff37c42f2bec23cac300bd4f06b35d4311e0426456b70efea3ef50429a4133a938227daed89e50d39d5240d44aa8ae959d803c0db6622e5512b0babb98999d7e19e9de920fac59021cc204953e6edcb5ba4b5d4fa05125c373f012a76721d95fbfcf2ebb8b870a51e57f6fbf3c99bb278b7037860625a83b66025a8d0dc10411d4ff3a253d596d04fbb07c8b200e8d7a2484decc78ce2692782facd20a791c246c27301ab0f3a107bff6059e3b22703542b3b729a36f605879396003bf3e3d8ef340fcb568e1a298f900d3d97c8d9a72f51181794ea379f73e4fffa9ef1418bcafd840c4dbba96a96ebe6302b259094a86d7bd089d130052ec09d08d384701c1236797b357f10a49b081416fab9ca0d754a4e54b02720524dccb6fb4972910d10119b13c0e5c35b143f41ca4cc4a183fb09cde9d7a41964ae85de53d449098c1c8a4892d978b216f45f5af7f781d503eaf7035f65534b9de9457a496c56a9976e1dccab408d47445e3ecdfae28aca323d035df0a0a424cee6a38fa65c29829fd8d95b575c68cf94a1450575d59b9ac1488a35b68cba72db57263c8862a4b2af2e7273c01f63c6d6fd1555582d5824fcae5f7fb7f872afb058cd7d1d9dd26ecc39c948a6add60ccc00bdafaa456e3bb4f681203ad0ba107198fe1aa02ec93641bc1d1ed967adead012da638af74aadcfc4f444f06802dbfdf0d3445ec1941d8838ed25b201134a1e34f1207896199208107436b4e5909d7c6363a691b41e7b27f35d1bc0a278cec1de2c55535518a331d27962a47574dc8fe201c3a6f00a847b2541bdc82e969453dd5c6b079e8b1605eaab5e3a68c941005e1d34f697571d52ca18d28a5041f31b32d98671340d140b7443758e2b97e5353da5703e0413bdc2232639520e5ef206be113d5019ec930a4eaedc1a619e325c426a226e0d80f26ce7f4d4ad09883ec0ce4fd53f5196e5b57128971f6b32f66309c508d3f0820f1c3c969cf5f8e3a0e326839f77506b83a0ab30ee59fa9d696f11fc87e6d7a6b2713267ddfb3d78c1f1baf4354beac5c718a90863f082613e0d4908d5886384bec2c35307c90519f083c06ffe9a8bbd8b978e4792072f76c212a48a584618a435a4e8a2594ccbf5a074b26ef5ba8ea5e79bc885f8cbb46a1bba0443233cadb1e08054b1d9aa77a5fbbec6e7d4834f890824b012c6ef48d161c574c85aa33bd080c25e7ab3b5d1c62d8ad667b7cd6a808d4ba8333d77b016ca3ff9aac84043d358a512c22a337a352aab0fe514efa99f133a6b767671914e21e3599bf2ff3e90b3d38160dab409a02d8c2b786762f1837739cefdf188db56d9906d95ee783fa358adfaab0c2ec6dc23aa37562692ecd79d2062dc6ecdede3612f66b5776663081b0342a594e46154b9bd44255a83976039aa4cc352b11f724753012d5c56c2adab7a463be8b0189ad7b02e1198b49edba4941cbf9d81700eb876773b4a69f7cdb5f5709121a32a9d43d2ce4c128702ce7ffc5dd4afa8d8e4e9d9a3f164c5b85454d118cee577359d01baffacb879832602efa2bf6fd890df6297d8b3f362011ced3828c845d442eafa7d65954ac503d67001c39a4cf29a90b84f055535c09558bdae5abe1e653f3f444eacd10ca98d81f20a703c4fc10d250ead2cdac6babd9a576c2cd439ff0de1bae77dbc7c52a419c1b54ab6a00190c2c6018fa387babaf5b82521dec989ed25578edc00f8c4089ebf0ca194ebee0a08cbdf13239a8672fbcb2f1ba4b71a07bf73450c8ff0c08e849e4f44832cdf089683fb4ef3cac2438b476cf5268528ebe7235d9a1aafb205a6dc4970d5821c3912532250f67e5de3d7cc97c7b8eed7aecbf63441b5742a79b748b97230a1a34b0f35edc7ed03ead3fbb3643c930cebfed0b3570e55e67aaec4a3d62db983c2309d86e65fd59155c14c06625e6e8b79d846d388a83478017f104411725ffaef2a2491842b830dd8b75b8317f58cce15c4ab7e9cde89890a96e375d6a93b2614d5661eef845c690c587e762d5598de78d6058811bc11295135f4a3bcae0c58a1e896a2a5812d482371c04da4980c8baadbb1cd55b4e79d7490661b152551f7d7e89556aa62496999ddd3903713579e87ceb6d040e6e665c2f402a154d775502dad278fd654bd6fc2e424023424607916b84b82d08a168002b18bbd0a6110ce7bccb1c796b04092deffc6c71970fe27b172533b696cfc4a6dd85bde47bfc7c0702e7910728b2b73ddc807ad1751b5d0090d9d8c8e1e9e7aeb435b7f8e942cb68c423dbfde4503af7c76285e1d36aef92f4b686595a62fcf8f7376f1d90a19c99fadd7bd9c0c21cb66b7d921ca6b8d3fe8cf7ac94d8ff5bbcf1bb51d9b6cd7bac8573e82741cf3dd04aa8adc142e74e68a6483d3a0772c29cae31cc835f2f6e73b8e38f0019a2749608e19c14c9f694ed247a33ec934893e2a8f132390ba92cb1b0c3e11990edbbef28b29059990e5a5c6c586ae4eb7daf224a953795bddd81deadb9cc436282bf35fbea6bfb4d4070589d270476dce45f25250c516458de208746232765c284a9b6a67ac7a4d679ad9edfa05cc2be3183c8fafdb97ece7b804ddb9bdea87d14d497459b80468024a24a86add2d165127ff03052deeb1925219baf04b6f63227780cafba7fb92706299d3f8c201f4149dce9a5aa3c6bef71f8d7e041410dd2c05e4032226e5dd053bbcdc8ed210ad4b0bb59777ca3251a83db33ed4031c7080da1f0ddf3cba48e13dae5491983ef47bf854ae12af571d57bf96391e0532d11f8f725faa860befd102a535fcce7c2843adb6cd1666ac96bf1361e76215d56cd48df70199572ca0785af56b451548a0ce0b444a9459f566513e4b7730ab08cd9e684ede7bec09cf78ed2d29628231eaf4683eb4d1ea96adeab7e8489fe0c8ba91bffff110f00c95c592a7de4cb4acf5769364c6a9ba405bf470416843c69630895462a35422f707848bbf768ece9e014aa76dd002157df5658478557b6a35ca20c33c5a064c82632d9a52c1e7ad8787aa457f3af4c84c24e132c3c22304b6423acea0c071c959f82012796c74f2e490dc55328d21233f5bbade199bb7d0ac96b342a9490460d8d5bde4d4a06a90f555ce79adc73e4c05d98b59f28264c4b17d09a0b2f23ff64131caf45bebf8785c2f0c0e8d0b114c9ab11d79dd75528c79a7a7727aaa6c71238c8267ba1bdb8b0210a223bafdcdab63f58ab58df9edbdefc6a76fcf632ede293e55802974acfe9d88d167a833f4cb8ebe27ea29ced5fadba264f8bba8d6f64b71ff50092e8c2ec9a4e06e92a8118fdd3d8d4e19d99083c8a7fae18477a89ef8a233b15e2f028bf4ef4205f05c2359eadaa0b16df709e8d8c3c0fe59081f75e8d85e74150697841f825462f36ac5ea55bca0cfa4772129ca5ebd4921b44990dfc751ff6cff2bfcb5ad65b5ad4aaca8d448eaf0914c91b47f44fb74a9150ba427f4fd23675d47db1a91a35bf23f94a43564326a29315508895b3ded7a7dbdd6c1bf7ad51e958645a1dfc8bb29a4d7f7d794ad74237297ae6f2ed69ddbc2532f1d8c4bc17e0af3170c507d9e29bccae14b2bf5502e554a44da5e03789787703a5e39486c3d82409c0503473d64ce6ebcfeca01ef39d942dd8f9485ec3c20dc27f328f4b1ab50096c16424ca4863587c9e1658971d03f5b5708903242a08f2714bde6d7a98a7d50d9ed99176812d8effa11a608bc5d82bc7263adb2dbb3f54f44e71310401d29d4e4a4013b98a6c7db63ebec4a342b415efee6b7a23e5f67d3a10eb9af38d2f91ac242b16c7928d1e15971edacf9440e6a1b90ad77c2fc81755791fa9bcf5c171e87615c15c0254d5aa46a7db500d019d33d62289b061fc3bfbbd993aeb897187976d8cc68a104ef2943a79c56f12b53b6f2da1e0673550799671e7362c63f115ffb2b99c46659929c13105d32a5d7a2a0ff82ac94e95c83ce569a40a5bb7d085de75cc985812d5e8aabec9a1664b0542fa0909e5172ee0e72e1d9f05221b00a656c02bebef1787cfe388cd2a9de98706003e103c3d79d1e34d3b2ceb2bee34de799918714f160e5fad2a39b0540991ab21a7589559a07227baac380ac39968a7b2804a6958ee7e6d2a0b5de60224d930a178fd6c0d4ab4b8b20e1e659b67eef1777e3b788dd8e93e094101e9bd08e699bc4276feba1ee6f281a1615075b36db474eb71c9a58e50c72331d25c21d3119af970a578d881b69669407d62a2351746457c8014ad28e7eeac59b1ca71e1e3600ff5198be09540edca45908e2914137046baac5f4e537734611b93497ca2f9ac867ac66c9dd7cf7e5596705226e7c76590f376ce0386e4445ac279ef3280b95c5878edb3f2a3f9b0ee06c43a1e399e05a606e64ff14e5ad0496df510a2bbbbc5cbbe50176046b241eb3dd2992490c07ec293616bb1d11325fda169cdfb8ac38de433d4f99dd9e9efcc6f4919c9738459078fbf7e28e6be3054fd44b7bcd80508ca7334cb4315813ae25aed5c47a91102cd74379c08b42c3a7b71f38bb6df50c685b86835925f12cde352690f1af02366d3ac8ced0308b232608c9a89437776f9740dfe95c376c9e46fe25987c0aa92ba18e6c54b8b53fafe4b633dc62ca8960efee06151444b8d4df64fab7ab0cb9c06ff003078b197cf4f2c82d5d66cc7c97495f67f6d215af2fc7254af02d88bc72422731bef97fbd4d89c934a4dfb91b823e6804360e2aed67b3a6f5c5dec5a2e48fcb15696a0bf4ac9e44ff47afa2f2d714d61413b8bb0ea2ab094a6aab2fbb0b853957b31d12efd40b8e52b210e68003d348e9015cc5de251e038d205bdfbc121c74f480c74f0d540ca5c3ce89029113a6b7783b20a0ad9b027eea3acab91a9fc3eca8face29bfef3663197def1e60086882c2e78e7615c9d4f63a39a516dd5426304b5f8da9e6ba74dee36c147fb9ee5874bf612b04498fae975b7f000822301b0f327aaf7c849ba8c8c8e0aa12918b002174b52ce78419335277e35e53db09206b2d1db3133a7de0e8d70c84e9576bcc3124052c96f56a9a34f47a1466dd7baa212df07474ede5426ad533b3766a26801a9b338321c3b4fba244b966cdb2725f67a1cf08053029205957dcbe76a05ba379b6b3526e20d7b16f1127d10b15473285a046ba924366871a0b8eb7fd4c739dceb4ba41f89b2713758b850a9e1d7dbb8648150e81bf2fee9abb3b51904851ac795a0b2123b84da5d071e7dd4a068243c823b334ffd488f00942beaf3eb6b8b198570d09041097f63a74b07edf90dc6b51823c482cecd15c85c0ccc89b4d1f9e258802ff6ab1c285e008456d2af73d9748c0eaea9393a9bc477e645a3bbabb3cb3633839687230eec3c2ddee6228583f92e196b3d3a1136d9b93da946f679e98ca5fa6fafe476ee077b0f7018fbe514b43cc985a7945043616eceab5a5c472707fc80b1fce3122c178e969f7a3ac774e735ad0cd98db8b285d6b1e7173e6bcb045ff91743eee94d924bb0ed40f24bdd5e44864d1631981e27dd7003caa54c914f4a1cb4c1eef148685b42829a22b87c713bd5a59c92f22be5a903762375fc346524f7e3794f86a9f75d1279a5869361b0d7c375cf8e9c4724a6b67ab9bbec4a33754c58e22833826ddc23a27ea911daf645ce9835f95388cfbeebdacab2718ff4ae97e289f2b02ce8d8a07a4d6f266dd1f987861b5b62e273d414138c50b6d22130b354c47032de25bb826754dfec23c0a95899787e036373a6bd92ae7b105f0dc8445996930ccde5dfbd691298ba83f902f08cc83ad7362b9f47595bf0aa0bd1cfe5017013b924837939e3b24967a4180ae5a1c9e913a26469a5d2ec9d52d47c41b25a45f9898ce2571533e506f7249743a2de6975bba704ea96b740f61f10145540d8db22309f29d148538b1237a5f6523e93c72d3ff866bade333fa7f1961558a92a2e6a65d8ea2993171cf21403314a11ceace849fbdf3c7b9a740572a89208feecf445e9eea438780ef9b9af4bf752a06cdbb3d7981a3b81357e73f3418b8d5605b7c89c863b25ed728384309875b2a2d34660a291830fcdf5696e2b909906b8b0c26d718716618050cdebfb38589cd8a618b7d002525e47251a1a776708ba8a5128b2ef90e295e7709abd5a3be62775e1fff1e5a25d72d859ae0f63544f10d548b829ab4183d866a1c29459b94d8231add5e7bfc85daa82ddde9057fe57da1ff6b974eef9a74ccaafa56d4966a21fa10fd893d34de55eca7b5dff9a87e3e7d354f6b8b29c2d126c12d3d9f28456c5c5d1b375fc4ea5ac5883ddfe27843979a3e2ace16db323816edad654c40f11498e31b8c9d1cfe8b9a9844c6afdcdd3a82b04cf3d9782764d74905c38b820da45b7b94d838f4f8f93c41ecbfc1be9e187d80f3d61a61ed7eeeef7de81201952e8e777119664f0122eb959c34865dd1dc3412e3c05e94b43e6afdc922117125c7f72c4882146b342561241b5e19767a3199702fc0e264b07b31f7396174682e83c547ee2fa5213adce99b14b1f5abdf4e239abe8c05731e8f0c0d7d593466348eb74ff06dc4b60b4bcde470bd55ffe201b7e67540e0516c36ca574b862f976d5a64e8dc087053c122249cda63dbac89dcd662dcca05fef9aeb07299ac0cd7e6b223bc06678fe0cf590563eee333bd345b307a1bd7b1a15cec1dfcdf8f9cedccf12067da5e819ca765bb005f41e564d6956c026eea6deab52951c5462c317521918c8f88bb03bca6c47aa74e0ff2599807acb3eb378ec114c2475a212ff6b3749180608585d714f74a198f8ee19cda48756c2beb61669153b71acd0ac57f013602a46c716995de2823329cbbd0e3b44868ca52ac12feb4f1dcfa4a9a34db25d02dd492ce9281a607d9d92414553a0328475b1b6b3ee8745f9a156ab92fe803eb55cc7c0692904e61d255c5f8b93f240b769d76ef0bb57b48e0d42e747ac0a9ff28986dd48fd76f389ebf9ad29420ef7aa67dd57333672c1c669d86262a93239d6f5e47673b345a0a07686ce4647f66441eecd47ecf5013ae60769e8330ff10caf1654858b309bd502323a3db809a6c713b983ddeb66931c86845ac6782db5e0a7517bc1491736bd390f0ce2a1a337a5de9bd3c3a2c77e6bcd0ab9bd8f082fb7b787861114d85585fa9d64e7f6cf1311c718ce45e98faad90e4262e4c5b34367d3fc40936072e10f17662772de964ef5514733805609da86a240854f07aa03c433a1dd842b28969d7d2917c064b812e858a7d372ff41276580f403370d4736d6f50469f2c0c0a1b5f4a6aed95099ec0f988f6cd3337a7349ead6c53e181030304577f6560480b2e78dfb1cfe34d58d948bbd06a012b60557ecfdc0281ae599c1b2663ba6dccae8684cf723d9c2d413a90f72f164ff881becd1268efacdda43e3eacfc7afa25886b00df180a283f2d2e6c81da32a4ff2b630b6513282a33c38123556a00b47458fa31cb9fcc597896886b6f8b9e4a47f27c6da3d5ca2eeeeaae2fea59226612e574534d2b11b57e347cc95ebb51a77927c736078acd8321634a9df7757a59bb4d5bc1449c373c465ac621c2af2fbef0c883336eb8d1a9e8ff0bdb753bf1aef4c2df78417ec6796e6c2ec90d469fd4a7a1f2e46fbab8318f5941fd01795f95cf38cee8ef52e022e670dd623fc4a2eb6a5c6fb459395b605d5b50d9fb8314bd276385768853f5ab120004a0d459958b167b6f6e39ed33a0a47bbeab441b548b38308b2f200474f711706eeb85998e72f221c1daa5aec7b89d7fdcbefd1ace79dec31e9547c07b780e44445a5b2abf7b257e4683d4b402c7aeb33c7482648996d1c0e515a02272d3263d8530d638b5e49281c61d8e70cb6063110dbefe5a060258141753897949a3532398300b9a7bd9bdfde922a67df992b377cbbf676f4a20be1941f09802f831cda8fe3b12a972457fcfc694e7f3bf8db44f43c6b83d6e3bf493691d2f5a6ac412ac759360a46e13b7858e2e386e1128664d096893bdd0341d8e3f8b68aa329fd9e23926da08a097af82b02b968c55d5edbcade5006fd41c363ac7cfe424128c3fc8279b0a9e956e0e0524fcb25a3e070930f740e786426d75d6a948b1bcdb7a40db9b84941dfa993b3fb11009346b0f178e06467b28f267e7afe15aee60c7f25f77a92cfed4ee4d1d18893a5a3efa51716df2a317271e198adab868132ef4c97f3653755f09749c4ab05069adc6e564b44ab85df9a7f9407e9a65ead90c5ee3c130d7d3727724daecadba32f49a4821f4215ed028979f0355263e72885896a8b3aa05f43082fd935dd06408587487fd015becbe058b2f851276948ecd4d3bdd089f36c466f0431e257182552596ac094e0b4bd5eec4d7549e090d529652191f70488e6af782cb20c11e308dcd1860602015c01290a48d8f58e1411ced353e041de14b5ecd70ee94b937fb66078dec090d25ceb62e3465eb385e8aee0dd3a99faba768b967d4bc15affec5cced879733795c02e8455e713abb59153174be7848240d33fb4506dcab2438bb40b321511f6cc988fa99886a449232d29ac09377cf88d589e0847e3840240e2390d1ed05ed80efda9e7b6e142b0c3baa657ec66cc6002dea00f465a827ced7e416454e75863d5b9a28141fce09902f7d172175815d053c4b8de09d3b9042bb806aa718e6f11bfc353b97952b9bfb08ca0709366735cc803ef347bff59e48592652ffe816ba11e720f4fca6b027d7181a41a2245ec7b766093bc96f041127aaaddf843be5a378ba438daef7e6a682a8c54c9d2a100eb08c981f567b5bdf84cd66b6647a1af6772ce190de0f855d1cf42ee1e8d0cb9e5f328050429ef67ce5b0b035dd6d95b11b2911c9a7ce6d2680b3200899c5ba67120cfc2724c190d3f4b0ae382ee6cc26d43cbd34728eb7296bf52bdf214b9a147179ab5ea44210fe8ef66387c2b14e0aebe0286c35befda14b04952a189e5b4de220c782507e9b9cb9e524658b4a387a15bf157fcf4ef9874ac8de62577cf81ae7b3a291d483cf86365b21c1e32b235005067228c594ad6555f39c8dc8f438dc6609d40004c856adf41e0fde19020566afe72db0a32a6fbdac13e2dcd202e6e250389c02d1df86b7682d1d7c6c7c19581bc10b4bd732883393532c19f326ccdfb950766132ade00370e308818dd0aea92365ed8ad6ba61239d523f8938ed1e2540a8f4dab21e6c9ce902f3dd7f2bffdcb3baafa603306c91e9c67f23ab6d3002e390a10027ffee75dfbaf2c934bad3605e186acdbf26656d50e0349a9748e4aa5b3c60153dd10605e8da7f12182d5088fddcfaec1716e4c44f448c9a1fd58b7cb8618eed9fd0315221e57cf462820bd4cee43a5ca2188d0d0ee61a39ad4312416f4777bf007cd6258d730a91cdb16e416c8d36b6fcb03b719dba6396848d995c5feeddc9f053e75328577e94467906a1c7671af48747771d0b864d34f453e64d203c67bb9932a103f4619418b3dccb4d4898126eafe403bc08797569bff65f87a396d3873be5aea946078f1834603666ee62a90ceafe456d3a21c575a2f2de98d891aed1f538766c067ff7dc3b5e4cca1ea3d4e46b72235ed375b5460e3a570b55527d078b5602171e875ca742a3e3be8561b781a832399f0664e0f3bb160fec0f6304f8b5f487577e923f2bb993fe4c5366ca906fa6dbec61eb4b169fa3d1e213ab38d7852604120a47234972d247e02eb1b9ce3b96de8d5a9dbfb8d6d86ad971902a961d677ff860812a6235c9b7876ad86e85543edcf8a0ec8f561a211a9560cb35e28cff5e510976adf83ecd0948b703b26ff0219f3c61a5d44fe391622b4212672a40bf416b3c304a0a8285384fbbc237e0e389154fb9cc43375217d7f053d2e2d629f0f575d21375f2ade9464b60d868ab4b7fa4a18f650d7ea9873c28790f23819bc29e8293ad82ae3604ada0f477e6dabcc3862b47421d6275041a025ae03e589e5386a1e0920e98652ad637ae345eb6af215235aa72acf8545633bc396e5a1d5e680c3ce89224cd3de5eed80517d690b81cb957b93d6426448dc0e369eebd6c6b383a2c3fb4b258652d4fd165032b6ddb5f1d811577c4d6036f50723cd0a6118352b1c607ccc487d54a4b6eafd6f3cb74c98c3d95d5bab1eefd70be27d6edeb446f93a65ba53dd6527cc35c9ab5d4cc48263e286969f886f3730956ea7bfc74f8270b5f403915834f994d9c9704e6712d85489af7fd5b0d6f2c226fbfad4a60d75b25c171e0d020342d7ac835f4b83b9f64138becafb3e7356b9aa87a7d2d283df9097487e5ecbac8848f47224b5946795dcf2bf5d3ccebcef64d62e2d76207663c386c68f724da144192666e6790518be1285796538dd27d60515602b62e49aab0fc137b254b6943b3b72d9ec3e95cbda5fa62677f29dbe6ca48b7c5bf3aef174588400b8c17bcab354e52a774fa4bd136f71e5117c540949e6700996e6584fcb76d2de7d5628cb11a0769211043da52b267cb2270fb38770c0481cca93f1ed27176df43d29d3d81991529638ecf56395239890540e894c228a868e130b27b571544f4013a073a45f53c132e2bceb90d43595e6ff46647d042b0817b0284f57d5b0253645f568f2cfe86724e84de8da63aa91a2aae425513ff2ca5fff8c604095156de05df9b6253abe77a464dac2ed4929ea2e9e61dd31e641981e8126e6e67129225bbac6073cb311ced9162821cb3c98f95c78d4cd7724d1cfcdaa8c8244bdeeede66ff75481f28896c4ed3a34f902e497a58b9e280486bc2a17cba8c94771fd2935a5d7bdead2ba6ceea028d6ba2a4c49cc9149530f0767bcb91106741f0901a8de41880609b36dab5fc9a84857f662bdb2dd227ba2a57b55901a54d6573952d417fce55ec8b42f124d9d339bba254f906c870f3ae1b89cd4e931e7cbb3561a21b51705920841f99bb82c69a07e68b2a967ec28e70074f9f8d5966598a27f89308c3b1cb108c5c6fcbe165d7bd91ef6c246038335bce8563e01791da64d5b5e12155bb14f863e52e25d3062b4927658b8c6c9b7887bbdb7ff34ee948287052f3161d14062f2c619c9bb8a2960b0c64fd201d743857720b0bf9022848fa7bec41ffe4f8caadb4c1f9edfc9d094da8b8a68842c30fec8a927af0c3614f0947ae55c95730f47216bc80d3e542a2e3ab42428a4095516db1f3b2757d28eb077c4229593ff796be7c8cdb71c88fd0ffb59baca45efbed94867d7b1e346c4b81d5ffda5c3b046c2368cb6c35e771498d46e46eaa98821c9ac93fbb37e19e336af8683ff17972f744f146f2b50ffbbbb41c7bc1194983b5f12d128f56085f923defa18d00b683f38931feaccc38d7e0d6f4f80d37bdb6bd110d4268ff4d13ec1012486f760df51539c5dffe5aaf98ac6125f4161bb663621de602f1e7252ef7ca02ca9f6a4ba99346701d0770da3b7421d1237f559ee931e1e8a48cc1e86219e09ea97901dc8a1bf3886b12a6c634d4d32edff522f0342b1abbc0b35a345e2805cf947f3a3256cfd44eb638472bb530e38c743a528e91defb831026efd5f876f9eaa5308a31d879052e6c1fb0cc09745168e3e1b99d278f309e05b87e2077ceb995fe2b48dc07852649a23ea52b13fa055f8baf6a37f66e4a872982dd21413f02ddb4cdfeb459f27112d0f7e089d3cb801cbdf0d635c36dd8c028ee6d26cb819adaee92fc81ccf69457a55b8efde74eb5a09784b50465dfb200bfed749ee7bed46723027592dfae373fd41d549e13499f715692c4f706fbfa1a6bfd393d5076d910c30caff14a466b07a4723474009f5d13d9fad46db79f5118e3e27bc5d4db54be245e58921a71b64ab500c1c5563e931c0af71bed56e42e200b93d2506a6f61288a068e22fb79cfb2025b10e5e6eae9d42c2f8361dab121eb3e5333f44d74a8d92394f6ec749d17dea927c144a41badb598710abd46824222c1e14de8909e378d2d1018095122b60eeddb0061e1dd3e23b5c18780b328170bc4826ebbdf24706eaac7f71d5ac8550d35d5889d1b49a45a9d96398014d064f789ba2830eecc0cc33f95a05278f502befe5ce56418dbac289dbcea7e14d5a0bd87ca807dca7d5f96db6e931fd7f7f11f47ff36b66820cca632c92fc95eb9bd9bf04671ec57705667a601af74cc53793d5b5f54cb6ee5e763f557f0a664e246b57400b1a97d94182ddfe1a641f1bfbb69f3daa573771a3dbcda5e55fa7de48ac925f755d965ce11ca66325d1a24907fea65f02bd6f38e2583726a0193b8c359b299518f5f0ccd8b3683d94019c490504c2e43d580e2716ad01c67ae670652bce04c2657d606b648df416e06bf7a715a9d735444b8bbdafc48da499b59038a2ccd94047f6466b8700d46965ff90b0b74cdda4740d8a061c62b7e3d7021ab1334fe4d0de01986d1a987ccd409137b51dc35e5b9762b99aae5fb4beccace33693bd1125e190f5f5d60423c7dc9ea40bd84e6f10547d844b58a4d5f3c41a41e2bb2deeeccb11e33fb58dd3f46691d3c34e6aa7a5f5a7b8ff532cee1480be19a74c2468a683c57790c82d248d78581d42ab4b3055d29e203e14ff2bfb3ff5ecdac76b4e29b39578dcd348abe96d64a04c3f57ec71847df7a632bed121f26a9154015a4b35e740d49507afd4c47a741f5c02bd27721b54b0b1428e96e8e62e4ebeac57e096ff0a70f6b2a66a510ab1d6490464e1c61ca822b761e0e74ebc8e7c063aff51cc03b7b2e39c7261f2610ca802be26e6110217b968d0de1d9212916d03ffab922dcec61613c5df34d617e3fd25a55df2c85a4fcb4509e24e090856488366334d961b46a12cc3ae34a9680744bae7fa821871d042dc3f32a4b365bae31827aff60cc3785967d5919bedfe4f070ba4f0f902a2af6db6ab535a7054184ccf5adcbf7dac8191936cf302565ebc28959b488ab71f16f7a781282f742ab6e40784c42b5180cc7f88ae14971e8f11cb6f6756de0dfeeb636bb30779cb13f9ca3b9ebc4895e3feba4fe1b35c4d17d77c45ae76221f397533a422ffdf754e2e814d48f703c880693692fd25fbd16dec388460b383e2c0059cddb5ce1ef84bdcc27526f925b821b706230466e067ca55186c7e2bd6ff3753cd33b8df948f80518fbfa7c5699a0f7a58fc4d3613b2ad4dfbc8746aed004b8b064e015932cfc2348112b9f6fc1f305ad4deaae71ade62cf4df20e76aaee1a690cce18ecd7505a952f545e200a8b059fd75504cf404db78f151a0ff16b78413cdc48c1234441eda6f96abb4ef6effd6d27a723bf676c0494f57ac8fb16da11631e494864fb7e2d4233f3043ec370bafe352ed849916be3c0b8d35ab5185ca938d52bf67293e5fe7fb7f16bce42414bc0f37eab80cf7d35e093d3cf6bbe8da0352aa00665953b635e68576c9789aeda711b90a0ca4823122b855db2f42aa67077cbc38b406fd093bb89bb7cd595887fd9b7c170eea0a89417c1a8b42fd23a7fd4d2d81ac6c72bc984c1e2421b0cf546e339a40160872be0d9f2cbde0c28691012d4c1e30c6357ca5283df4d6856faf870c48087a5b3a469b0b80ad3619c5a148376977973342d5a9c630b55dcfe303db89b06f7aab6c1b71d70370e4454911c5fa56dfabe00ffbbc1e1eb604df1a1b02884019f1af0947add6699f7910c79a3232c81bcb233b51ddf73fc802622c4067ebc85acde9967a8ef7b21cc2b037f7ea58d2450fd16340f9c9b621dea524671de401b0fb6723b71fee37880f616dfab06213afe13c84741688026e5d6692a386bf2dbf0034c243922fb014fae83ca88fc7ece8df06ba6737b4f8bfa2caf9be65d0614e4c32561ae517690abb6946c415a2974af62635d2a35757049af3408f2cc5fb26cd63b4752ce33671c6d1787372d9c242a2fe3701981d00f6f35e770c99df1c56c1354cfa67a58057842e9fcdec87267f3537f0a1ba615801844057effb08a789b3d4712fc37118bb925156b4348a2ecd8ccae01385f5b724b0b32d5e313d6f17e90858f7dc9120f5ff9eabd971627a9049514e848c51b064449772a1f3b8eff2f9f7116bcc89395c3e9a641f74a2acc737e77ed9a7adda4a5402ab578f5684dba485ff1e4694ddcec643edcf273b65d0619f60c5fb178f0cbc300aeba122c787fa2fd000b0cc32ff081d6f59d2df392911314ab2537c48774cbce44ecc0b1998e2045fbd44b049b570d56ea57965c04c2be6620b033f64def69a8cefb6b815b80baf91e73f90e51e574414f328a6fd59da080b7ffe9bff0ed544bb07dffa6fa077a12b828cf9b9852a1347a6f8aabde50f9d4d01df7acb9046242ca865fb2f4f80e3ddc0683282101da6a44a8752d641095cef8c6e16ff28d9057e79d3a0aa70881432fd5acf89417df85d0e5f9a549638a7dd0a2b5ea128f33bcca4cb787fddb2e9d94a5a35f7fb6671faa88b548083184541b37ba4f06d80f03200f91fd3b8e874c267d3c563069790ed3a9dc9cc463435d8c7d235c9c47cc918fb11d25de8ec8941de99b0d1724cd9b1204e4e0848fc0f91791885099b34efea48a6186716ef16a6d3f0988e0cc42bc618543eaa8b85c8a749fab8389b5fd5c58fad7f02661a9411fa3781f3dccd0ceba68bbcd07749498ab12fe55fcffcf4f47a6be31400885179e7899f8a0610b5a1dc550bb62d2440758e92a8f5f85c2a08124b017ba5b6f21a5b67417a95c2ba637efec8394217b15e66f31119da9e4884ef8234e28fb8cee3905cc8e6c1f114913565ee6486e40d530e85cee3774d7f6ef7d667b4091b5c1927025c9ac1ac49a9dd57d7c9802cc4016ca2fecbf99b00fb0aeb24e04f16f27f247e2987d40f32083743a71de7ae8df2dbbfcc3d6b026c10d5f1e864d6389259b36cdc8361e5fa35a4bb4ec1780e905533a04adbdc984c69f24b6b68083431cf90219889a58c9b64a9065a488036e3344e9a6927df029dac02fe0d5720a4a9464e4a0c3741c8e62d9f33f6179937aee6ec89d68c1f99ed99f8c46114787a9bc0608b3112c7bfd81a9466b2f3bb5cb10cb222cb8dbe7be785f780d043bafff75848d1e45f40d9de8a9606605c43f3873180e54d8e1c27a11176a172c746b3f086e0ba4bb4118d1e4373dccd0f3a319a002e3f17e66606c7aa4cd6ac0c0a181eb360b46c55882a2fb88e0f5c2902939f235ecd31eefbdd416e0861ecc775c4ae0a028bc3901b825a5a193291970ef3d617d35a01a9b61c2b3d93c9a4a52172414c2a35dadf5ba0d264368400a2e2fb28fa5a89477ad19dfb1879e0df1f830f135297d2a63fa23fb11c86ba80a6e415fde13c72289c9e2988ee4f86cd4fde2d7bda65bc6b09985de3ad1138df236b5e68c0a169571aca96e867520055890be268d487e5dd358309922af681c8e2e0ee2d433a9e58495da7532162e9723fee1458a5d254e29b00909b6be162a5b7b7f6b25378a7ca68ca0f13e981480f82de6607c8565a4dc5eb7d35cc928aa04db7655f7b7d2ae9b1e117a365648b6c99c9ce2133dc6128b22e2c6801837cff6d5ceb1c6621a6653257fadf2c15062ef683c0a480b4091f1645241c8e4cfa2ce8ec8263433597f28364a103fba4d77fbaa7a42275e35e8521b204b4ded5903872aaf22956590b310ed5d65a7d1fa1a2ef1bc3c05919eda68f787bd4d0b772e9966aa7cc5b34d648eb986409e73ea130b6546342c5399630fcd0a23d1b96f5906bba0f24f86d1d8fe4a5310f1a4c07aa0a2e37d4a2fb83a24f4f9b2feed15a3643f9337e0f394ebdb82d341e727cdf72770b4862d322645882daacbb98a0af701d5240f80df1181e52e0b7a61b67b65cf4cdc684cc420ac707335a0be40e94280a8f11126495748962b22ffe4ab5e8357e055875e056f041bffe1089a8e099ca3beab8200b37a806836b458a60d06211f25a1ec3a9ceb72f7908e1549aee8442b499f762a5507afd49520e831c1ef5f9d8bbf2d6a2e30cea904429116f0fb6fdfcc8d5526170ae56d00dd644387ab953d7ebd40715953f4ac5335fcd6e4fa0df1a770ed246de3180acbd3cf3fe8d99d92c79109806229759c1789a83f21f630439c63d915eeca587d614dc1cfcb4ca10c9cd7bd727163c5c53ba26b591e78c3c12e02dee104c85dfb3e0b484bf98841e09936ae73eb0c653d517d58d224783af7de34ab1adc5b728a98c293bb6810ed04543e3e4cbdaf7fda65cdce852d604b2e43c3ac0a73e25b68de373d6e50ca257473f87c636049e63a6a99a0f38af87c26689718a96b1e27736c4a1276097795f87148d41125f959e4c00c8ab40fcf133dcb0b03bf3de6fdd9a22c9d1c4448db0954e3d74002f75603124071b5f49db83e5972ddb364a013ed76e9d34c66174cffecc5a1ce1632245033d52d35d28a9f5b0f7ee4ea74bfba63f7e6052dfe1e2637ce54d92f077d44d9c611c44cad78aaec7f2a69c05bea7baaced4566d814c7087570c08123b6abdfb990fc59e8e80e46b0e58cf97db410337ff87a94deb176e8034f1cdc7ca28eb5fc41f56cf71f31dbbd44c4b277d8107b246fb5bc6f00ea00d104b91d1717f084bdc1f65f7b4ab11adba703e3af91550474d8abaf3848e8a95ca22b4985960319c9f6349b9175f98f42be45795593a9bf6d479f554bc2803c87edd90d0eae24fa8c4b1c1d6667d104e965cbf0f0063eceff386fe65857ca6015e26a8bd587c9b80c13dbcaa7bc780c09e614a05524fc4c4b18dff87bd3991800cb149e9ecd705b758a9e7fad9d374773840848747e32e0533ee8058e2b8424cea7cfc807c23be82459c1ccf05577a72862c1feea5754972fb6dfead868c4ba270c4d35f252e1ad1a73a59ead957d30d82833596696bcb3f3157e98e9bc8f1392bc5427960fcd70e3924dfdce90b4977fe559af8291f9d48a688c3af331bacf71f46043340957afef9e1bcee06291aa1b073d265b43bb119bf9ff933df9ca92a39c6be622565cbc2afa50bbee2514e171728d28effa4613e5cbbea5cd60863f720b4d7447840230f30cbdb213e20c5243454953159d02c726237568543d2174a5b7e387f48b54d0a93a394791bc0b7a4904a69e83aef6230a6a566ed80d5ea016e637d2b1f272d7951d7fb6fae8c6b280b30d1ba838cc9e47fbd6988dc891f7f8f2b8b6eb5263ebb9b3ca67bc7b1266ac9bfaccd0764d618687f4915e076460b19a7eadb4e88290c9c1171a4d0abb2997d3ba47a9f5d4eee2e8697509f2b3f9dcb673aa4ba069dd36050d3eb2b4ccff2b3c700a1ff548b7224181452970c82c2123b1b55c694f9357cc317ca23e39a46b23b43cd050ce47d8702c611dee9dbd56b447d3458c1caf8f163ca3b50c1e5d2a51ec3ff24c654d753c3df8e33a9ae43443162f52a590ff84c2a7647cf929a7b48bd1da4c553c9a605063b030cb2a786e96f3b38255f441a731ac789dda83f64e14bc968e44ca23d43617c7eba0a9415ccd8a28165a9bb5b1ff4bd5e084b4336d37244773b4380e1efd4edcd3bf429bc3e3c7b2df59442770faa4f5eb422401a3f77267e735feb95414fa9f549831bfd96f5d2226497fad97c724828ebff46a4cbb759498a4a40a7e40cafc6f7cbc0c549623226ccb4e32eb4767984c6a455d329db132e6b83793ab54002d1328e47de51f1a9302487c22a7725d20ab2ebe2b79b5616b0b8c3f51205c7f73c81e2e2c648670f5e3a7c881b0712e375b8ea4c2abdd6674be965b3809a77e06db5de271bf2368c1bd24241c4e7f008f384773464818b293825b911a3ef1d6fac55e8641ff225423dea8bbc73b4af9c15fcaf1c9e7e549159c205092f6657b16da0407d703592a992216de958724cc6734749b3b6957e1790357959c9e8421634d1d6f599a5ff21e35002ce0e8be4a4beef1f90902e765cab6ad4064a00794d0b5cf1b6958d5ab59b8a0e43514ecda8119d4ec4c46b2adba280376732029cd95d14183487340ceca77c8906700c6d47af96644fba502562fc6f203ea6a78a92f3dc70b88c060c76ca0e5e4f00fa38e72f6a1c870ff8fcf7e43d551dd734795454a6c16f3fe923b19b1588dc0f3952298336c0f80d514060eb26d257e719983a3f4dc44d913cbc92c7636d48ec335af0687ac7a3a0eb7f8984e29757cff8f037bf2731f877c120a0040b3f76894fc7b131411f8a0f44f73bf9f009c76e5cf23df7cc517ae0ee45c137449cd350abd5f841b6bd80d4dca8b012d72b599caa2da4d062567a084a055a2e9eba249b71fefcf9b8316ad28adc395fc7865fc36579f0b511e869d8751dfc1c9ca1f70c37cd4fffc7cb848f9aac9410788fedddcfb4721edbaa3576590d98391ae88f2b31fba82aacc146e46b9425fa2b0900f83d887b7fa383db49f99ecbba9ec197364cd574575a87069a379970c47d14bb86b40105ff8ef980f96fde5c331a1dcfbfef70a979d06e7dbc1937f347e0bef62f685711591d580d2f57c3c97f43b45601e2ca24d69e45f3df851d9198036b5d8cd23b9df0c34069868957fc6468a350b3abad1e1aa48c21929df09b402ae6fbb11053e83f90c0075083ed19824e178f2e7510ad23eb9691055e126de528bfd8cb5c7e08604f9c925fcbbe727fd6b8136150ce40e10e5e582765f62730624dca1a91fb76dd8832875733168a95307869e0f65ff1cd0e8861253de2f8efc6099b9934ccc7213f7b9801429abc2ad19330f5d3659d0d6ee8405646219f1b9f600f9da94924ff95a776bd6bc567fadb7be9c915804bc5ff7f1207484f4a494b4fa361486feb4c10d4d5555c598991aa4f934cdd96d2f2d8dad907f3abacf2cdb16dfa7a6d91765f42f7179788068b9ef6eddb27a393d43abeda3c32fee08e1909b4c3fea29eb8d0747664c27b27630b48cc4999076afacacd06ab667458c6bd6d0ea6db94b8483276a5b66e998b5a8d460565424f73ee85f40409eff6ce32aeba567a7f1b1efd0a5e38e6930e497ad965ae75d7e58263fb0a843d8cc8e95804dc3fb670378293a78182c3c5a906a5520825c0c7f96d2e04cdabe1c13b49d3f3e1873d979c96ed784021519c1108d21493cdda0994cb4a30093ba57390bd25bb9a052c895d8293cf6ff64a12f788a8d19dcb09b6ece9d9213e3f2f6bf395b38d233b8dfe5dd4e4fd9485829d3af6d18c61e6297813cb923b96b0641986cd42b556f33ab352b2796298211fba35408891b44370e0dc1266ace93b46fca78776271f433049d1349a8b62e38b011c4e57989e938a54af1664e6c4cd3c80c8060425e6c06ea836dd09324ff7bcee84035a0e5e9d6a9f6727a8f63f71e84969b6db439fd7daaa53ad00c7e1a57b9fa6203e6a18a9380849cfe86839bce9716f7dcedc76b4f7f54f8ed02f90633481c3204b21ecafa26ab46432f07789843685630c516d1939f00b808652949855deba2536f7ac5abb864b27d307553326795d9a365f130f2c8b8105be79c69b006a5c34152b90aff37fdd1d2be66ba203fab9b92add4ef2350227431d936ad86ad20dc6486414b1b6de0278e8cf6ef69b8bc5009b0306ecc541fe4b7d1402596f849aa1ce7cdad8c593aec5c88ea9e016c8392efb3223199120f8c58d54c96a3af54765cb2cf801c515abe6ba4cd24302248497d09b88223a35dc048ee3cf8f00613d79b44f68ba3feab893d1280fce40d2f0f34f639bc1432a005f8b5f0a1f3882ebb02da385a91e153d9f8bfc2f00ada755babf5fa8a2d6508230751eb3ea73516908422cb248cb4d5f455fd251b2c9e7a0eb6917538a7d5f84cf487442009a299fc01edd3e1d8917f3ceb5c5f14d6415f9296e2cf148264d57f5864258f52e625d963ccf0ac479064d81ed998ede6eb3d7954426ddfdb73688d15d726bdf2417884c0d2730eee496fbc7b6ff6658b8b4ca13ea98664390febe9567c0a4fd95ed3922849e4203b881a2343355e91f774f49727e4d6fcfaded1b6da1bbec7b36718543229fcde898cd26e1cd1e9697f78809bc8dd909a7e2b7141c740ad44126717177b60c37a7e9987dd3ba14b4c46c75e15287dbe29363bb290fff8f38b39edc991ceab022e0a0774cb519830878d66d276fea2889255ac826ff500d864e852df3cbd44f3cb992d65f2aff5c156049d9e9e56be46f9b9a7ceb62bf2604844923c41e0d5ceaa847b9800e792ee1ec2351111ac5edc35d77c3bac2ea5f141638dbf9aa735f6ab8507955bdf05ace607ce8e850d7f4c2c69ca2d726d53768971592f8da6de5f8e19a1b8480f668eb6c21521d992f10b623c0567144dcd0e8b6a4f13723a8af5eb0210b9d1614cbc6d678b194931b865e3b556647e2caddceb7ff781d52d81bfc0567d49c1578d22e753baf694986cddea430d6373fcd27ed4ea7e1dd7be22266ed5921c3b8b084ca4adc24f5bc2fbc7507f4713714613e3e6409b77d702ed6e519e780a2caa92c1db3cbff600a124cbea2ee0097f61df1fa21e3aa06c7029d06c40f9815712c6f1077171b3a31c0b2dc637e4ea73667ff365b895952003ed9a4db9d4437572371b0760278cb68d1b47cae370b62efc4fb3ed69e41dbc7b60191fd6496000f40017d82219741f9e9d74b00611e05b37349bde60bc5fe6837e7cdea44d6d92ec948013bca29987c3311a766acbd14b46802bbfe4a94abe3c9bbab29b95f189b53fd5f2546d3fb602ab4478e808a9357fdf9a745d9a1e32b0b96134d9d418f8c3aabc4c5799216565d7a9506368bb029c9abae8ea3688491f5cb5bca16119cedbd97e4fcf7b780214e4aeeb22ad6b3dd0850c56d2c6afe4c439ad35dbbff02059da7870e5d6d0fd34ac72d6f535cdb34f1c3c4c0389291538f561edb7e4531083e9806fa17a7696bb359448a6731dfaaf5220281b7f950b62d24f1c6cc7eb61adb175e0de297d2e2978389d3da910888b8916bf91899e3a94d8ca4a38222e3213466748f1fa559a1216da4eac8d1733240d92c60419326ebd4b8a5e1193fbdc868a5b960bac68023cdfcb19ffcdf2844456adb6e485a6e1c7237736628400dd12a8f658f1585a7599757ee18cb0d230a929262d8caa426b2dd143ff85c07f73960e7a254e72acaa6eb0b6235de53be324b249e7d33b2d70d267a31d6dc5659cf05b5ce8c8e3cbb5342ec182a83960934e179c07a5fb8b2f2ec1bb8fe0ff8405e3fcd44dfa0fe3f79bc2a2e1acb236d52679cd0d65afbd6f1bd77f1d5a34901295bf24d7c2f6ddc563c81037f6a6103d445c7f327198cfc2c049ce443b0421bc86b512a44c3c26547afb402cbf12b3721f152944c133e400d430b4288b119b19c1c1472487de93d81648ad5e380391d3a830482cd8b41f57a4a966fab22d896781f11be4f85c12948e89ed54ba7840f651c109f9028abf990e3c130dd891d762c0b62674cc5de7c92457ab0c34d9367d074a79b807e3c31b1c4234a494e6a9868127a37ee0cb55115542f2f232b782c767167685a8eca3f960884a88b6b2e2f693b601bb273738020b7b1bfb992e21bf74ae4620f8e42dfb2387ecdb645017f901b1eb2ac557b461d5dbe429293e7013a72b1f1eff2ae436b148ae2bf5a49daa1ee8d4fadefc081e4e6f3ba21c91d5fa8c80b0261f09bbece728d42d57a2bf3db455bec1837b7716e4329b26ed13e4c4de3d19128cc849e055d7a7dbbf1f5fde5f9195f4565dae015c1bc1b0cbe993c2bf8723944d27152d7af50b4f03bf854162569d89ef615de87c9e7e8df6928e41c6fc0ee4e9104a40beff466329b572c4c39c92f779e262e35a287f61b5aa1c928b7b1eaa4c8b3fc9dab5930ca402991c722f28be719d52165acf39c3aee6a1a2198db9779a026121fff5e436d84e946dc56c1dba04011c62779719650a5a4bebfa7d60c5bb0e630b43fd06ed5ecf2aaaf67a891ddd114969c496ca4604001dd43971a3a878af36e041cacbc4b68075ce22a4e457f716e86f3c7ca884f779f9eb779a726368ed48e30fcd9198ef3664ccb3235e112ea5622eabda3558816764bbc56360744d9dc9d8f12a8ae967d30005d05e0caa898feb386563d3cd9f8fcaec0f4ee764067afea4dd2c8b50036643afcfda1e9cb4e99450beecae91b5ca27a1f7ea14ab99ad640cbe4ccfe23c2161fe3b1e108f790991c415a3f18015a520a08a764b85a5f733e51e21edfdf781e0b624230d7af2ce1b09bd1f4ae3fdbcb88436358031d4a190fa24ac44a5e06b37fda2127c83144659eaa94253c62e23a5daf1b021f4f4c74841a362ecba0d1ccabf89efcc5be557e0fe697d553298bc53699cc70df9d71b2be90c902caf55a3237b4817e5567c471a7b7d198db408c94d33086b0ecccb3e4bfc577adff2df7f3e69e36178da88825fc86291561a3043e42634e470e2fdc90ffc73bcf4865e442b8c7086ea92192274bec5fded30e381ad258d1fbdbbe569efb5a1004ed841e32364f438bc068ed718e213a3f93e8b1652bac347473e9d15805c6e5742c9a5b3654f815a05df6e3fb4c73d27c3fff9c1ad013ff24d65d8e0a860f1c23a0296f8c11a6dc65a6a34499e9f8dd8aa8e6485dcd3b68f034850334ae2585a3166d166dd03c8336a6449f25a9ae279d9eedfd7a7f08b7a94a72e174f99bec966b464e9c76f575597f6cac98f01c7bcf46edee282922a56567d7c80810fa18084d6403cb54ce98656205b3c56802fec846a56e897a3e5c51449a2611a82dec2287728a3c797b097dc7a61c946a45f52e435fd9cb07e1874e7d6f939180c5b04e3ec9c60097999d413301d172b17adbfbed16cf8d5da09c63039b257cb71051b1e5dbaeb109ed8e710550b903384e22cd457c81e435d2f628787544878b27722b6e31be48665e81526116a9cfbdf89e05833743fb331eff72e2679ea607fb9f356d608e6ad87f7011e61e00b4d8eb017609c8457eedb06071473338145f9b31d864a64a87192835dec66288b431f0130a010e76e9bd07783cc4d49bec28044f12ff57c1de410ec0c31976ecd9bc5ef0210f5e0906a57b8e32cd92107719c962f14e9b418b81c5eb7679a1efbe130c5896adbc16846c3ac46d4631f98e52a5af4e4b2dffbea6ee216ad499bc972eeed53b785e8698bac636c9889322603eda343bd527f246a77de80ff69d7eb993dc4881a3944477700417d2ad4451067f2edf7e0972ae59e7a2c0a95ab7cae39b993ed640f58df87a216f464bdf39ba3d32cc3f3213f08a9af98231660f9612731b5ceace6d72ca50ebea3336a08b0b1749c7394862c76b2b6ce7b7e5c77450695032628e96ca78636b103139bd659ff72d53cdc2490d28a4837d560e232e81bc5db81acfe277804334fe25393a6083d15cc56b6dbcabdd8e34b5384e9dc9cec28bf5a00ee7d4209f3133982280625cb0523ac89d253fa3813da2c3b1971c41399e5f2ef2fee3f804039f733b012f61f0c015d49e68842e7544d8f7745dee8b6969b999e84daf0b4181a239d51c4818a352f7614236a2b0d2c6ce90f7a2d07a122b40cccef7a16e655024c483ef7077515030451ef4066e54878f7588803780ec8c74fb6b04f8f112ae841e3cffe479ec9385b912ed88a6333625a6c11aad300191498688cf71a30953955214515e90d9aead8ba0b8344296726fe17d8b0e08e6bafaa939d29d03504a2a0aab4955bc51ccc886f80931cb9cf0aa9889151bdde037cddd47ae49965a73d82e7e80d2f03cce08ff4351ef4b2eb3697e4cfa5ca5d3fbc1c1f6251748ddfa0c1e1b0921401b0071d68cdca0ca45734ef4ff8e0c478602ee97e695ae4da54291a0c54e381e02d3b04a23bcf89d6a557c4f2f4034bc6899f914b5c650a5a0f2396d9f54232287be9c69dcd1b8c989e00b35dc0b226a4a94b0648f94284e3f81d6847302374fb9e6a1088877a9a036b73af4a32da5ad62cfdf38c34657f1c701b7e801a172136b9e9a6447ccb70df0430a731b2ae48f7b16b74e5d041e456836f0c171c406a96262cd0dab356348cbe10875cef23b797c60db0567489243ca28cf8f6be41e5a1d3e01c8621946f9ef21f75ed8bc05754cc5b298fc7aeac91983174ce5d51c7823e39238445f9677e67c60d493f4f246f660cab776a5c4bdd33a19ac2f22f1fe698df389bf6f3cd80e7f00b16c88bd151cc873378014c5010829a1eaa901cd24995a0a94a77b44148c23fdf78acbbddd5bef6e1c2c7e2cab9d1ad9a1692be2ac6c5a3c920ccc1f7d04fcb25cc985ff49e4fcec0819a04c02087f4f6fd5888c77eaeb38949a8c259f62a96c2f277ca0e61cbe03c4421983d54bc946660588fde16e9c98cf7e21f10a59600f0b648644011e91a328aff128a7d176f19c786222683dc906400d77dcd0f01c9e2293882d5d8db7f25c56b389daf923473af94c6c253b752f16077885e9357c462bf9a20ff040f6887b1926405be0f3b97d747779cb1896a4ac9358e4f6b3a4e71d2861a615c9cd1c4d2bc4eb569f54e4c6e9e0f7694106e8c1e5b6e11334947f0fe5ccf631244725f87bdf2a4ca35024058bd35cee6cd9e7670f5fe306d93dd8de50c0f6f19e4435169cef1fdb3eb53af038f0470c08af91f78dad1170e97498b60881cb0f7b3abe28c97446d573ab550606c1396efad0da725d1fa5be1132b7c7d728b354c00340cd304f44de73d0d7e6540cf635d7af97414c1fbc0b00e70fd422760872413786bc25ea83b4ba96b7a95e897da19660413dabbaf9fdee75dd0b5ed6eec861469bb9a8a49001b653816d9c2c56fd14a9909c9da7fddb30b3e58723673b862048fe20de7ffa7ac7e3404c4da9d4d2805e6f674e0e56e9e48ad2f9ebee8021d3c538cd44dcd91fffc60521026275fdf40027bf274982d1851f390fb77786287e596b7f467f20912efaea764182a3187659875a4dca635b174eb19dc5983927aa2a197769917f5bad6c9d5adb4d1ff408e11b04d74cfd29f2a4edfb80b8241d66ef01105f25477c49c52cd90af5be5c31d225329ee6d5a5b3a7f5f884b8398c1886c28595dc531113ef8a9c822c7be8c061ac370af3b47e32e4cfe64738c25eefc5ee2f779e6d2765bf2096ff383c2d5ad698ef80fde8e58988a0f4daa4128dd3fa0af1ee63f92d431570ebde03befc8db42ed2ce5752572c95fe5ea3ae4cd613060910882590425327bdf5c64f22f00038d70a5184c962896e321f2d970022a6efcc6180fd82d4dd456a15d5e6a96002dfbaf5173739fdf0e170e8f6e4757a4ab132317496a3e4c3951ceade90bdb611ea55fa5fc7b7bda13677082f97f1b370bb465eac06279b0b08290e10649fb39c75162dbfa04182b1a53d2cf5d18a8c6b6490df54876c4b37f1a3d9bfedd9e26f7d4161d3ce678475dccafeb855bbc8a8b192deed0858d6f4e9e3ea40457819a3d823f9d1bc4e2189fa69ae8737f3db2992d4d04b4aa7d65f2ed627fe3ca305d1d496870a783dce5868a63a9f7a6a899ce34dd186e0829c00bd8dfa0bc3a0d80107910fa9e788359293ed41ce4bf91745ff18ea6c66ff27a6a85a7d978780d0978e57087a9bf0e8b475a5382dbdd66bacc76329ea8f34e0a284d4b239701bf0f7d6d897c8bdc4ce55926de41bea1e60d3c3cecd9e68c8f20a040b5151a0f33128333841912bb348f7f3b33a3084f937ba0d4d5b3fb1717888c18eea52857c1ce703c98dc36491afd6db8367080925542e71f8b1c2fe81ba85f508f85d66cb7f7c975644b11c2e39b8aed68b2a9a9c1926a541502510677dd1a7b27cbb74ae3a9588d8399e1d227d28854822b8d4bb054f001f48fc923ad318aed4f091bdc35040e416a59e4be6414a67724a75a544082c952134a30583a112e0c86ef7eb136f4afac18b750ad68b818e7920a73bd0f0a6dccbc246012bae2812af6866130f88f5c36c922484f9418969e5a4840517c288788f98c06d096cb7f953c0dffcdeb5c7d7805721bf19219a5b69e821febaea7aacfa8d375fd992bc3de3aecfd03ed766b06bc14de54032767bdc6907b3dfc0f5c908329fbaed1975138c19c0564587f9b3abe4a0cd10c8d2aa2d78e0aca300cd54a8b881963efcd95696b6aa5e93d073afdb47e85294ac718b41313f02f5f24af9dbf097c12645f29ae40a7a0efd89a611016640b6b78f161b429868c5385dd003aec55b9e1f0e517c5d876fa6647db2f92d8df659295f4dfa384357ff4a317a392c8baeadcfed4ea1ea87ef639a7965ae1857fd663032c5810ea3a40c5c9805eaf63de9c2460ba90b948fb53483e87c3b14b549f7cdad2c83510b493b989e3a953412c9ee7ec4a8fcb50e5dad648bcef270156e4109f9133b485c96661be9b972dd89d152cadb750abcf83ed6be66459d9d4d576d872d5b9b7b047d865caafb40619d1a26f08e90d83e80c44075c2b53db0bedf0a150dfc8035568e67ef34c695cc4dc2fbcbe05d8c4a1762beee1b6e2c5ad644bd2851881116dea70748c53e79bad9d8ac5ff869ca222254389e5f751042c142329bc726e1d443057891ad785d395308cb47ac0272cf54c02ed88d71c3bda1238cb023b523b63781a3038db5a6b88c05ad7d0b063b3523b6eca6d6b88203c16b5d3be8059d081de66f984069ef9707f2d491e2dd421f0147c4e37ae17183f5ac26743799f80986f97642230bcac5badef30b86a7ef30246165dd3e1479245482f6955e06888837695ee3d970e250410f1e07fa19576b3fb2729d6711b6466365ee9897f2f5a2b298b718818223ed29f5ca3ff1f1f375dc613c9bedd61e4f70685511947c2a3448b88a71b41c7e1a457c09dd5a7bc0f2b14103197b16dd9cc6ce055ac06361925d8e66c2123006de5cac409580290aa20f04a7649000a4cc4d89f6f2330f9f54949aee1e3c2125366d5cff1005fe27b0fc0ff569cf5686def4680dda8f5f43664a6d5acedba1ef0ddd8ea98584eaeea8e90d3564ff006e3fce850ed82b51281ce8c2de69046af7a5b1517d452624ee2fe40ae391a189524810498e6dc4764fbcf52b0dc034c28b722b78d91a191c8431dca605a762e654bdc2c2b51e5026bcf25d997694edf78b68833a8cef2cc5ca0ae0c6b07615e37bd37f9ce404f6eed5f0b3299306134703ee0fbaf92a34fa2ed0caec3eb0439acc5109acf20b36fc11ce03480e5a146eb602824cac34b5d0710a934364568456b8680035d5027161396adc56a4c6401055e84a85bb342a866c28204af135997e4ca3785608c58584c3e1929043fec0d1dc4dc3f6873818a8ea143ff93ba09f2a7b9f71db893eabaf75650dee057afc2a3bd4c39d144c043f09b5efcce9efe9f1ccb7a6b912d2180705974c6005cade56d1f6cf29b35db47e6ceddfe15fcc1db0c17021368d494bc2718bdef4a9934e329cf0b5be4bc9ff8de7873288d9ccbc1f22c54272c25cf3b7ab38590efb18bde64d1762d12330966760e7d460288d99228db24285ae33c583c4a8dbaaee8b509483a8608204988185cef627f808d648c9144fb7673468e234a0c15f94f57b40e50e022428cff7cf99c3e3a55c3c8d4f525fb641234a73b0b131108d0c70870d329956ce2e196de7e9faa6d99a7dc74a3c06b23d110b77347434fa88fbb9567d2f9ce07c44b06264fd921fc003b0fa6107260f7b43a9aa440516d45b08764e208455439ece95ed43ace0a7c98abe16636a8c267d43f22f0bb2f67a9de2afa07d2148881152dbd69fca1e7dde73d36dbed5f58b611db2b4964dc4a54684d9c296a823dddd0157f70e6c654e166dbe66c7a0cfd7cc32fd0e100051f3fa326a89113555c76cf2a99fb992abb9df032e89348cb8e360b7a61816c62bad83484fca0ffdbacf7343e766d1f88148858ad318521b5d3b9f1e782b9837680eff545efdd2deb26eaa89d9376a24206e818ff7cc425954924515dce11dfe5b264b59d6b3dc6e1f789cfdd11e6c3de5974f4126bea400f82eedc17dfc063e21593beb52578bc653bbdfc819518f45924492ced4779d50ce609f2f794bb9e06a589d4998c66173026f5a95e35d73ba6217e4d48d7518338094bbed0e69625812a529208be77e03b8f6abaaf19f8f1c94bdf92f45222ce82d6cefddcbb9959cc646a63beb858f35ee46a95c2de41e222c94958485cbac6059fad8780fae57ea15e4ccf6a079eb0a4890fcc8c79ef5c38b3bca96c375f10146ab2a2f3552db4253f53e228dc911709adc1a0ba73531f1924ba665d19b23a6534164ae731100f28b425a140d15b4eae9e9b5dc399366948caae4de56d25f7898b86ccb87694f5fdf7205a64dc3206b32acdc16d26c8dd7b2d8c6ee582a0705d1e3b30fb580c520d945eacd7a255a1ebed13c1bea2f181a470e4dd7c39b517c7361629bc1bf29cc6df08655ac42d8a76cb352e9d2f0ba091f1b768c64ab70d0af115283dd20745c870ed6bb837fbf6c48523ed041b00a20575cb3ab9d94c7b704c4d2341ec86456fe988d7944bb90c38881b9dc5d1b8e53fe48f128f11432f6dd3585bdacda31510cfd5411e39d4d27b4e2c711c1a748fb59a721a1025acdd7e324d2e71a1a658b21b84c2631b8a88a27b45ba1e59e04e3f4c193e38281efdf340c47db2ce7b34a6018cd3c5a69d087378f392f2cf1cd5b657f551bc1a6e87f884f5543475967db5f5c16d95a8f48000565d8ee0427cf50a82a6955e0de15fab2675729ce1767e2f361e1f1ea64c031cda038254cd6dcb0cdd26b257fe1d98497654b0e9e070497f60c71af5b74a92d6bd335faac47dfd98c732aa5c1fdeb40ffe24c71d963b643d24810207b4fae075eab64ac8aaa0225e8b07d2e277c10b98e654cbb70ff0dc83defb4bc810ebc41a2419b9a656492c75670d1b80a77454e1982478a2a2f0871607ea90ac27be7d2d96950fbdcd2c55af0631b4b6230f937bdf64de99ccdf435d2464c7101ff412f000627ca0c7d7d9e8942d2c695ac670df28be5b3203232ccd796487a513767937a89f942b07e7d8b391e4be30cbb38781a80932515e402a0494f5de1e0d14228c992a9348b403b4004ea47b265a27ac7f0956dd4512fba9fbaeba0e75ccf6208bd6498c5be07e6d6382a4c01c0de017f26f2d07517d268d1e488b151eed46c8db41f2428dabc8582ef6d5dfe86003a08dbaf2982e1a695cbaf6f75e4932c66f4b94309d3898b3dda2fed1d3b8ecd616cbfc9311705245b3b24521938ea43edd1fc5c49d0927d37c057aa1ec4fdc15ba3d6bdfaf02d521dba4b7dfd9e56c7b90d9bddcaeef39061018fada3593071d489e2709b99ab7dea40ceddee3b7a028396439b42d69cd434b84c7a15f1d357cbe3d756716912667f389280d8af2572b2443dd397ee1663ba0775fe7980755a1b16df89c8b002f543fa951ff4b507886813884117a993798d214b6861ae91e2b2a8d9382c27a3239767032453982c7ee7ba1c3d4d481b655f6808aa8b6bb570bd282792e4cb69a8a6d3a9ae37d92a18211556cc02a1c95842202caa2d8c64fc4f48a7c5333fe7a2e8d15884e3af023e0ea3a01e8f7cd4093096198dfdf48f1adb09d3e755fed78b55e4e6680a700f610ef4b28d7487d8400ea6a500decd1341949746c07db4d7c89828eb4d942aacd8d0652fa269a8bcec1015addc3413ac392c6f2266c7a367dd751608e2322ba2e6d831679af7ace1cf167a82be06031a2bc28ceefdc1f900afe73accafad000f54ae3ed93cde89ca545015780868f5498eee31f95a9e221e3ba12a71f4f2f9075dd1cfb0d14735359f5425153dc355dedd93354b73122b9a2b125a0af98b3f10be9390af89fbad1c419a6b1757026b99ca08865449f7a9b79242d352834cb8b7074f4b5f9b5e4763a676ca7aa8df717b3989c15174182d14e8b3501050415ef8848b32f856f0cb89e17092c9ceb5cc1f27e543c0fa68055c0435e18147d2195dd4804205bf6490bad53ef60cd64dba89983791daec79b618853ca996eed260ba96181c379cc365fbf8555b5011d00ed7a463d84d88f67264d1a0012745ad0065edbe407cfc0f16b499b2a203294a8b07dbabfb563ecef5e39c46a0b49240abb2d1870d2bcb24c2ec3763e951cf3ec0b7f8d8060793980a2618cd79b913c7994466a20dc7e033879b0b42c17d409c91cd7003491eb9fc0ddb3fd59f8b065dc520bd7f8bd56edf1d0fff7daa07bd2d2b69423e2d535a986f31c8fd0006ea9a6bcaeac7b56a910b09d8b8da58ff3c4013b3a26c17636267ea012f97dadf60206550fc5f2ea139b7940f4344d73e4d0a7861e0884996e2df8e75a7cdd9db92c1fa05e6bdc7234bec70a96d6c8521fbb51eca3c85e4fdd994f15aee3c509ef977e0a9f8d531e87cd73da5f0f50889dc41b9770c028b354e64689a7577482d89191fb0e77801e857742e76232767986799f08f0f2090ecbd5686b97c525bf83188c7f070a48de7eb7b9b633eacc53afee352c3faf1014718e3e5787db0147916acd76f7e797570a50ff0d239a7dae55d093cad48823066eafa02c3c9517c51b39aee30f8028ee0a35d069cec3185fa0b3acff2f75f401f3e8853e8c947e65e1d98a57a4ea4affa0c399639f6c33144f7d7083442b4f345abdebdcea65d0cbf90a1873819cfc25ff53c140b18e1f8b8dd19eedaba9dfc796382cc587b2e406e4abc6f29ecb464ff8ee791fe8d20b70bf178f0f420eeb3a36d95664a0fdf4a359b88e98bd70bbb96df4429e7da03b0467052e95fcf9634c170a5bf1310db18310d9941ddc8619308037bfa9503d184be89dae7bef18ac595133c2573d58687e5b70b98874658031d1ee9576c2de09332d38e333278aed93791da99e5dc0c41cf8fbf02085c5ed833e5d24f9a8b5760e55868d5e2fd8a06bd2e9444747ade4c2f8d4735cbc86b923c79c773b7c0224ca719bef9e8203e7aad496bbf4eb731c412fdb9a25291fb15c6befc4484a04a945c2878375b9f6c091be5b5d8d497fedd97a2bd4da927e21270751bec4e96fe4f21def5cd4409a2a38499175bb41553bd3b36ee27e1c4f3a81897174357c6fbc48655696b1c88bf02c6eb28828719e2a91be52b8252e6ce103a4e970bf1b6cb21cfc9956f6eb76822340d831194c1efda41ab5caf40fb116bf630f4fa4212ae67d41e55bd35228074967b678cc7b46e0b5d439e02171a79d657b21e97f1bf7bedd0dd532a3fb673c301763fc68832de026938ca1ff7653d632246ad1b089113cd80003e8393f32acd31d28438dd725fb7a8f7054c13a3c40c0543f6328b78fd0bd8ee78d611b284bbfe4c1b58c0269ce70692cb76ab58f258c02bbdb90b9c2679541497a51cdf77f51bf173720ea8862ec8d92ca6224f76a9f2e19587ce892bdb5b5f901e0dd08232f5e1d1986cce03700eda71943b9ba5ac625b52ba793ed3b395c3ba3fd82a5dc7f82aef0e1cf1e6dd71cb58c114576570a07c7daf4b977e36bc6084aed6f29442c7e760a4aa235918ad7ce9a354a6b194b0de012342daa265488ae7b5da39d5f81222d4d2434a0e4f8117cf7b380e5fd73b7502c84c4ab6c2dc9404e36a8e94ee8fe794218872009184fb13d0aa44088b775290a694e5000bb7de3aa94ad766bb9474e127aface63c9c392286fb3af3d59f92e0f9b96f552f4b419277631510d7b933924335cb9c17c8218bea54dd6f1d039ea206b4a0cfd73f702a36bb6f2b7f7414dafe91f3221799b8a4c0f193e59363dccf064de65bb8e4ee5dc678ee028a1df99113d4a6d317db2f38655d48a760d0cc93c5edf634675ef310a82072d086d88ca840a93df9382f2c2d2ab8adf9b8ff25a351f9a5ee4f3bca9591bcba3c838b6cdde45f1c3af39f3745af6881edfeb34cff9326b36544f1b2415600ee92635a167359967f90783c26a5bf7fb87ec0927b7d0243d93df8e68595870437c147868ed72ec9a29a1a3a891fbe70a0c0e63c24707d654109a3849f1a7885ceacf36551e35b1d0a832cc5290a59ba41e83613eacff6455fc522d10203bc2b6578f484bca7439ea548649514cb8e28c487ccd3eebad17f37e5d9779d1dae2f65ad60b0609f3c9908139aadf0f6acd1883fa06e0cc3845b72c757b2ee80f87167985738fe32993a98ff1b928dca1c47b630eae963394ff1b05ca141c1d0df4ca00a788805ed720692eaef6768e938b030d500142506636b1fb17eb9f4e992a4a2f793a53f68e83245b4085dde5d547dd1078f3b42cdb33e33668bef85fd95bd88045c7fad98b2db80a35e2683e73a5f60746bf335579ef0fd0ce74443b52df61f9b31231403ecdde10306f0e3cb85c0639da1f2a273c3b44b9f3c8e5ef5ae3be19067927561ac944ad88ae1c722fe5a987996a07eb3c68bc2cd853c0061ded6ddd98135a0a0934e22e9d9f5c9e675fe802737e2c7869daf20f9c86e3d1b59e9cbccdc132fc66b3b46d5d0d2ac1f55f071467d83b8a95fe14856322d42a8b7d7f85c6824ec79f6c2850cbd3c588dfbf5390afd857e47cccda03c2a18d85e62f43e3ec2f29642ae45641ee8ec6120d33e17d6260312c49b7a22d355315cefeae3faa15172e14b30284d8c6879a0b903b56e6c9f87ae6003a103d8b3dcc23a27f93467a334d1cffba9e81a720dbaa40bd6041e6d67b16f80c94a576a43c96a5bc4d23ccd377354d6cd809200caac9053ed997d6fb35b00d35c2285c959e2651e94bf4c026d7f2af5679a7914cbf90890ca901f7114730ae1b8f92ade7fa1498dcdfdd6347fd084da0844affc833235194e247eb3c07cafc13bb0a8a9c46db37d05d1fbedd7c6e46775b3e49660bcb37d0014d9ce8c4aa9dc194e2a119b19b21159709558476d50420608cf6b69f356de973e33541c31eb63c83020f5a7ba7624bb67f23f76ff778c5b1b46135dc682da9a1e690623cdd791a27f9abe237f9262117dc099c20c6c3a69e80ee39fec1a496a374af1d7e0f66c82ab0749c8a0ef656b6c135780ea4ae3b0cf06ad8978e3ea70b572bf8e4ae292d59d0ef7a600537fe9b501beb5c6b159d1f973858b9ffd2b96f139313d68b6127f067506620c7ea7066c37af9cb4056d7a4ff8924fee994cd99a72399ff22e4fabfe0c9c30d27d0050d3cd1bd4389ad6ac9f17dfdb6e28861dc426ba6f2262de58aab0752d183871ecfd6e1cef887f106a28a3c64d247b0444f1523db0407255ed3fa7d667ec479286db0e1c776635ca042eaa811c7f28d8f9dd35e8fd9ab18915ce4af7cb438ff0bc21c6a7175ccd577a2f4a50d8cbc97cdb25db8310a130c10ff8cbd2fdb0ec87e6ebcf5497930cde55a74e71919956a0014066f29b8ce79c7298c1fb62f98dec228dfb6145eedcad220f8cd6675d2f914976ba482151a82708b592d1a9c2c1ee79829a87bfdf045e281f23c1a13036d1e852cc21cc2b3b0a9dda2926ac2d3b40c6f44d145719a9cc6d01272a469a887486e2caca81e970ab4ce8b6b4070a8d4aefb37a5dc45ebdd4240a5d51e2332eacd978b4fee1631c911fad2de3ae71345533eccb2ed31c8df56ce5bdd4f43d3aabf8b24378e75aacaf0530e8276f6d483c35ae0d1ff3a9859c285897a87371c92ba725a155081cd7f0e5e3123e28d0ca6a8dcb63af820d06bb7d0ffb4fe614679c8c509f6d144ae9948fdcccce79464284ec2fb676b67fd64892d26f757bf4b7cef027e7d000323de7d4f1ef37aba09cd54a4550a92505f0fe08c529b6928ddc840601a06a0b25d02880f02003cdd4090ca1f893e0cc93b4335eaabca3e84da3c85242f27f64e4c5385154a6063a4ea2bf72bcd7d601dc324fe6dcde7bba6bbf6b6b4d1b5957b3e8efb02f16db2fdded3aff23366af8dc4130da8c822649ac02c4ac7b1d2f4d7024df510f054e7e2fed0ceca5244d38023f57a3583d5c13a90acdaf47215e8121f66b992c3afb960b299d4d4b04925887bd9e62853283c148744f96518001f52afdfb012e81b103a56cf1fc8905eda15e9c9d06b9681e33d6cd370758e124021e7191626ccb703c899e7c5653b48edbc0142651c4063348c1eea9860ed37f2f57595fdba4f244c38335f0b3c104e49d0eabc903dc10ae3b2086d5fcfc4e18f660a8ee434ff3225f8c50765d484b1331cb2398c446c15c9c0f2bebd3472ce060021a854c12a285cf4d847acc953831c49de02d695815312dfdbf728f33753c8f2743b45c92b1409f1ba75672e6598e6beec8d9b4e50d1267091f38eb7658a9319fad21300fb9e63894f4f76ba64dc0138e5f62b822ed91feb07b29f9d2c3057eb1d8ce156e5d3bc49e91d3f8409acd541e0a09118135db9a7a36bfe1dee0defd92446e1cb92505bfb31aed2d72af8f2d2f898ebed0f3376cdc12591f9a8dbcec4d5122d40a4ee3a855cc437a88c547e53cf1df7bd2f8516756e3896182de7c9fd57cb34c1dde482c88c988e0009a7764b30e0d7dce0feef5fba5cd20a39044fd67de6564ac3a1dec742296958cb8eea96b4dfd5f6e30e29172882643de2eabf655c3ac53446f08421d8d11f872ed324abafd55f1ba7da6d1255c7a0f8c794076587722670d18d1c3cc571d81fd1f997194dcc5ad068d82ed1785d09a9701d3820f675fccbc102576034415ba9fee7b8fda8bb2e08cd08c4c8f0a4838a59e77cbc14528f4d010d27f7bb8ac19747a005e2ba5444ed1adcde09e7dcacb5b01fccc4ee87e6bacc9407403f4e44b22519180cdc7a660061fc4a9d7c68310e0ac001115d68c4efd5cfcb34d1dc66e208601833a41f4990cd6357879bb2c708cfb7d423ab0ff10ab57ed1982f6f7a65b781a8fbd138aa57c4aa4b8f4450d9bb0e3ce7ce86c1f7c7f0d3fb162ca68a7258ac98cbc728683d333afe69a42694fbb04be1bed38e3ec4446c748dd4bdec0f8ee0f20a4dd18749f6051d8f6c474febd282a88911ac95ab5a125b49b34b4923ebd3267dfc73d9a230c9b5fb2737348f5a484b76e97d6f9e8958c5f785f2ae887f5deb158293e3c361298a8f2556fe865c181bcf8165fc66d59c97b5c9033ee457d8ef5fc38576613b28e9ab687d1e76241c3abf786ab78bbb4f28a4831dd6b0d9ce649b00d17f2d7541dfda6b77a99acf9ee3326cd8f0e545ac6f8f55539fd8bd6b047a7d3c11a06903eb57f6d5ae36e695c5cb1e4cfd1e8705da13ec14e302d5a0b11c7eed2c402b20291e4cacd54697eb71bbb870e3111f227c3a76a28accc0c050c757a9e134c6c36fde58b4720e3470d3adad9ecbd9fa071a5ffccc962c9472e4d29202132dc47af32d04217c45491890e4de5fca5af1cd40087dae9ef5635466e8cf79f219d86a791d3068220137d3ee05c8d79098afbe7329b39c4487c40a079b6b9b24c1f3bbf10fb901dcc1a6b849810a2e9514219bf228465a1cf6c92b39d67803cc5866569bc48b0a8f8cbdcbdbf6ddc2b1b35a01386f72000138b722d52760805589710487d6574def9ce0426375d48a2cc5a904b0482a20e22f07a1e852b8e35f3076eeb816d9b48207bd7c782ea5ec30344607a3ce02074559d4e23fa0dcc323b270f49c4fcab644500238f86859a0abeda5d4cd6b52646aaf2f29dfcc0b59fb2fd3ec697e362177574fbfe7e1356a85d147feccb136896bc10e04fc69b5f6f9a3728befbf74cab5e2f42692a39636970de89039850b02258a8947c7dc5bd0f20ea2e539d37efdbed6a8fb3431e29eaf553c3b04c9b009d6b88f84c3be0f9d7e6cface601b60d9327782fa3c09a7287ce6956719d3dc336f80fd50ff88590ad8543086683f389c126e3a154ee87bb0dae2b667eac060c883d287d5ecd9d3f4ac4e3bbc6659e7c193d7ec7a84bd5e14e04d3723c70f1362c1ca6a99b9ba4ea90ec2405aa881daa9f798992a95cc304c3a61d271d503bfb7a65555ead3b4cc1679d66b3524d7934fb7a22f9c9da1218012ac004c80566b238ff3db885055300d7131e727e5e4c6c2754edde8981f7ea44b4d43bbe27ce0113bfde062eb3123d97548ad1e7da40a82506931b094d1360dc9b04f7656d9ec3d90a3cb1ec3fb8094921bdcabf132395454c9a230532b2b9df58c33075c912054e11e245a85e9619dda4e9ee2e86adad0271580dd1495b619f944c32b0a7983d99d54cb89b5942a509c5907233e8262f8525264e70f0b03000addaeb5caffd63df541f6825a6fa4e81a282f58173fc3f4d88fb4f34ab618d37b1c1729bd95c28c3a5239ccc70800bf0edf592051dcadf3c0bb532cd1f5d31d11f6e9df692f6265b9b843d42b81974c839782fed59d0937099006db6dbef0ec72a6f1c555f301925fc19242906926d973e0d4aab97e9db4b5d29e9030786738d3a02141419840a08016c275bf33007091a4bf62be2bc6e41cad5d834af1a59cd966f66325e69c2370728243520367047880e0fb99c2ef65b60dbd017c228f4eac196a15be6ce15f01989a8e5e0eed40189243c4378c1855e122b128673514d277cc1f2c76bae060a8d86fc0463eb778c357b094145ab59b5cbbb1f9ef5a0e13501fb47cc7295742f0e0b00850a7a654687b9b20fb85b2c355ef8f9b8af187e103a6911fc40cd220f5b261e65f27f51efb858e1215c95f26b8360a4c92a750f99fefb958a5fdae2ac46fcdbb36783fb5c45c5fba0a588c6a42ed9f0ecc6a0b04f5769f2d488c5cf934d0942fe87e27fbced33ce0e79aa13a6203d52bbdd33df026c77a16eb7adc1529a5844c4230ae0061a213e1d76784d68d02dc31431d5d1641cc7d55217cfb236ee272356f7287383861f5b3d23c50ee3ae6da1a70209ad5de4af28345e9094f24dfef851b1940fa157c32d82e118e87d210e40ab981d73f48098ea87a3089334f73a7bd27e1840f6c4746bf025ad73d521cd0f7614b8961d5c9a962f3d2bc0aec45cfda0230b3efca4a56e3c1d1b71211be30ca5bd1845805903f49e14d4843309d6558c8e2960275fa76756dbf4a14c9f5fdd3579c2adbba46be88f1faffbea79288cc8fe36162a67768f9cf231bcab46e896aa94f7b012caa5805e620d970edf0cb744ab2925f3cb70f03e6105aea3efb04f3b8740ec1eb157c0c2b171916999878461ac00f2d97090cde871bf13cc7000181a7c84e9c664baaf152ae71ac21d799e43f6263c23f9277e60c14dc01d7d580ff838804af1df5c27982598ee245e1259a93451d8e65060c2bf401827775d6627790923915a70a125ecf105f36750a71828bcde988b37a31d75140e19bdc84655c5ba4f315c1e425627a0492bb32849614eabe1af669c830b2f07e947b444aada222b638d5c81249aa46c0d55cd54b0580aa7ae4946d8010657d7b5be45f503384fee9e6523351ab2142e2f15b5fdd94dba5c91e44cb23f99a9a7e05df728f160ac7368d97f9feeb85c8e357ee2e549b5c661ad41121f5686836132818f2c56e16c1b99240e2dc93031d5dad95ba1f9a1ae584546bd2bb821ed376b596aa80fd2900ecca3f752ad78d82a417859f1cb18302f4f16082812d90210379ea50b1d67eacd6a5ec5ee954dcfbc1252a8570872228e5f13e4f3c5be7da338462c315ebbeb7b9b555a1e1f81636ae70eb5964b5b8ded499c09120d474ae844b73d87baabd5d0966cd053cf088c640e509ff684c4a9d32647a4867985a3c62ebd64eaa29b13dee400c2619ae905fa89833eb14f40aef528fa1a92a42ac674287ce05535d550044b2c4ba09a2aee13724568700079a0265c43333b190693ba027c40772317c2d7b8e498394c48d3e7ab4e2464fb5c03f82e200c172737e50e68820036dab90e4549825ad798d1bcce2d1f866b859c8da8367f713b439682349e5508dbb221aa6d4c08ac1e62b44dbc8752ba90e9646391bf4d72fbfe9c762eaf919f242b6bd85955d0e14783f0ed4e1baba6d01646f837e04a1644fb6b90d6193f5d959df6a1b5969442d9cb1c027b14be95995eba7f74c33d22f173df06f2f12c2a5c6e81b06c2fa9ada7922c572392084938a1ba8c6e29ca585898b028383bfc8ffc292c2d6a20dc917e8a2755654f38cfd2e2d5ce465d1e169e01984a7e7512e47d29e2c0d06b65fde50d990a172c3a73ee73773ae4981caf491e9f79cc34b61a2e48f80150d56e96efdd5d8f63ae16910aa24f5d6ae48dd78862f4c9bbe765f39b48838a5a9c3e73364c9d1f7238dc693b7490c6905ee41d6e7fcc069664975459ffef9b2609ece1f86a4d2a7fb9f227433c9bb20f8db7fd08579d74d001ed669d2c7ed87190eba8e487020abdb505374bb5c1f6108f8f2ec2c3a669113a8fec895832f43029feb1bd33c51d8982d72ccfd4abc2b946c56b8bbeffb8db3c96442cd503dad77fb2117269f9c40e819687b14ab04eb9ce92329bf6255d0d9e45b08aced01315db3528d6e632f59a1d1f34f89bf18d6f2d7372e024ecfd5e56ef9871589c63d7e2be3217cc6a01d9351145563e048cf7883e6b388641c665ad3e931e1f39ed9b1808bc7a85320586b75c948e05db9e664e5ab859f1a3967cfc2f309c01b361e0b9ad6f7ae4a36a9f81e83e3e7a45f74a97ca694a7b46b1a10202155a467b3ff131c7cdb2b2ec131691a4f5ce78d7e93d1d841c715795b948ca98fe928543c070592f0fdb512b8a9fd2bf9ba07e0ad166e4d701e8b5abf2218d1ed828b57ee50ae00df92a906575be6f10056f01b5b246ada4aac872ad0db22789f479c2ae58031d8d11b3e8c66f41a7dd95d793141cb34a717adf353c1f88d571f9198d3eaff3174444fa37ccb5028b18030e5946c4e236124640b5f87491c8d2f3ac56ad59edc89a0ca51592e027a8c0e9b19794c53cb418aa7b2ef5b9b309e8ad6ad1d8701cef5627cf701909b50be399f113f16f93de1e086af388d0bcc956115630d5e870591021079ab9aed1b4eb60f057d039e3284b6dbc65e1bc393316ca913ba192dfaabdc36a1fcc2519e7fadc9d5ed665b2f0ea5532feac2260a0df4fce38f381802a4ee0f4d34334348feb9876a14a387734952e4a8e74520fe3da131b5b56e8634cf548b0f4a34210728127b2b0bc9cbd2379f0f904b6b7e791ddd2a2396e25b2892081f6a87755d34bfa8a87bbe3f1c9012afcb54bdf74a6a4507dd32a2c96411936a800be0514da0ef663a338ee482dbc4695e34dd17229278ff55e6ae07b1183d991da223e014d09da7afb6b2871f3a5bc79b1bfb6d11a69efc64904e82d6e82baa638929d4f6e82d8ebd0f0ec169c85d4494b6875f89136aa24f00b31e5ad2dd9735490972c76a5dfc3f2cc13296588a3eb7201557fbe7495087e10203926621d401d06bace07382ff5e72b5eb2c9f4639ee78354f6b7527a592d7ecc3c4e1b3fc05f238316381c1499b84d9aea766f713c7ad2feb2900f09334c5f6ca75efcda5c9dbf1f79369b9be02e7156fcb7a3c52476e70e88081102481089b3b8f7edb7dcf9748db22bdaa651453e4b2eceb55ce3ae6fd510e42a7f2445b40b5ae799e0856a08b813dbda46b4ddc908d8482bf485f969a1c4677a3e25c22e7744ab7d164312ee0a9cc8d4cb5c965b4f1f6937dfa22d26bd1312cc11ffe2ca26e93fafb14fa7ddf2ee41ae6769d8d35006e1d453e78363d34eec3288a205c022511ec53b6b58e8486b7539e2f5fb7c77d57e1298748f475059d42ea284b8e826ef66ffac52af10fc4a21dd942772aa3a8576304e6bf2d1a4d9507889c934c33bd2ba56974bdbf82854b74cd0786ab4bc85b92cc00edc76fce5d5cb36dd99748a85db4f6f928d843d9ebc83aa8dd49a4c3ad638496e1ac5e38666e54cb261af226b563f2fef768cc3b034eaf82d972a3a25e13d271d861f86c8e79d3c76ca593a180205d039524186859ff5556a306468b74189cc98955caffce38a625f5f5ef40c18c36406309909112c9f11d49fcd652533ec9713b0562e8d5420547dc9011c7343741d977576b8fbdaa595ed1542c16241e965ab5e5abec030c406d90a415f0a7ae98acaff4410283f3e3dc49ededea1eed5ef79efc8d5f90c0fe6a3aa3eb2be06bcd182a614852dff4644d615a72d318880e08f09340db5e9711a6097842f6e14f3fd90e62a4a685f1f4610ce48fefdc513ad24014d62426ff7ee94cbd52af0661e0e1fb629c9831ad38efcc6bd806689def2de7c9c3824e0124f7344ea0b54ac65cb6e6704ecc36daf23331735c8df8655a501b7292cbe686a8d676023503d6389e262a47d602aeb6d400dc25b035e12574000d414477f82776dba2aec204be5348b9375a1ff90366a5b0cb66b20b6b68a39cc21f07272185ab87685c1738a8fcc87c11fcab004f2c747522db1f031a3b3235693c0b8f232860ed0ed4cfcd3324eb20e26f139831cac91f7c72fde428ac0cc7be0ac3db632ec911b67c0008f5bc8e7a30fcb7d58e4e8946b27ac353ae6f569f3070f7acfa184a85f363fd40da49ed6a87b2369fe454ea2761ed2ab24e5a6cad88d419750d4f8c7f3f5a98a27d73dc220d0880ca667d5f6391b1b8b008f0f64b036ee9532b9678681c10feacc033842503d9c6ea44cf2b0c3ca0cdabada9bf7bcb01027dfceed69caacb6043b2e33e6e2fa7460322a5c539f098d9f38c45b04be8e3a304984ae3113dd8bad288519a63146fbc28eefef88882a0392921fa680729ea37f89f7f7044c87f16159d5b4269ce7feef290d5fd45836c2d99e3004ae0c370cd9c07d83c9685a15d82ed11f81bd6b3271a98ed31c9679f5830f9a108e1c09bebbd7657c9ee54ecdb075a9c60553badfe1553904949e356108a98a17d706c4e53ea53bffe6e9baa694d8905ec70b3fa501e6e1807b418a69ad61119a8ab4954a110d3fc363fad5b085b2520e7c39ee55ca54d6ae8d32e8a3921c0fde5ce7650185c7764943dc231ffe49d8817dbff8db21fd40a7f6c49f72016110e2ebfefe7e98f9073c7b9fe3fac61de7fef83e9cdbf8150de522badeb2e1a4c067f7f3674f0ed0aee40a23b3ad74e0f256867972f9b72f6cb4db9bf7c09f03fd3b562084a900d0a72f843182688840af0b9a23cbb5a731c7f13444581ff3f40ccc52b540c4a7185299b153cdfdefcee1a2d2665d27d04c0a4af2371cb5d60b1e23afe88a938f09e19f25114e890482574ad2a00bd2cdf3d94cb16454f0d0cee256e40d724df6c5ee4436431f146907e3df89295b6bb415d4d09d0ec629696f3df24d158153d96810fdb2aa22fafdb9d3644739a05be0359372ace33abea0286e735e45940a8d18711aa1cbbf5b6c3a571170df8d0303b97203e4719b998a2217bd601d232e6601c3d4aaba61ccf2ecfd9644bf6f45de9342bf3b61bf92c69ecf42aaf0e9ed19a9dd9a4f07351fab6a13298fe5897238af051ca73594e2699c7d0d3ea8dac4fba081ff946baec7c325dca40fd24d5ea1071ee9cea69e8efc5c3277a42999d1337d040bab13d569699afaa5e704e2b934b543c7ac41941caeb51d699469af2a4aa803564557a3ecb787e271d046c3e2e26b17ab40480e479e5e872dfbf92575069b98d60d4a6ae56a963da298df3291eeba582e461438736a7a913972a8562806ed6bfcb2eeb24541f893e5499e7263f0c793865293c86cc805e5729a2bd3eec44854730799d9c93edf47b1888c3be3acfe44200d8df00ceccb9e74b7ac433abd8bec66d9b8f882551b260b058268b444634655b74ff5f82c1009190469be1730b9c9533c2e43fa600a7037b420ea90744fd86d5fa4e89c2bfbfe2efd56d1e7f86fb29a1f180409cbb5fd9b9479e7b1b40c44e0724abbdaa4966825d23bcede9e279b703cfe3486d2625b4a4e18e4119ee2a3abc872624f35149a75b1b1c741733eb2f36d2f5c049559015e005d0af454f637335772cbd5d420f3f3dbe163a2cb40a595c47846b872bb44446b1e7ea051b8613f2101503519a2f4a34d2d47437e00eef1fb517aef4b3eacaf8329b83051c8243534e125bc9c790d06c33be79e630e1579c0dec532c9f99f9462c88a6cf9bceae58f69af13c90a18846b0d8c43b8c631dfe9e01174b9e69fdf234b1e64253bc90695a7205fa92d4880a9ac0b18efaa197c6e2bd65b18f155e78b3980f2fdb8731b95449884e7f7a04405866a3b3dc80f7759201e41fee3801108596df3204a90b30c484535569cdcc61235f048bac323f7287d712cfb91ecac84f149357d541e3fe7b9a964e7c49ebbfe89e298df38cfcb2184e08db4856ededd7ee3bbcda48d62d05e2cca770c0ec9648ad15dc3c7fea48394e7b743ec2011f81006019b37f190c4d2a80e6353d5affef1bc4c3873e3072a44fc0c92756f82d7e8ff7ee2e424ce733a0857e447617b8afd4b1665f1b29e9868f04c70c7a9c92dec82abba3c7090efd73e6201752bb94651218e093a0bac221a1788017e6d6772997de91fb1445c45071ad80b02f919c9728089a7e9a22753874af88f33ffc900d689545a716872df366f175de7c401022b5a59e48e617b6526b338a3986a7b27f35fc85ae061f34baf795f1f2d8297888964d492c74aba85e50f375328bf88ffe7c355ebf6179e9c5d13147eddb6ed4839099e19ca6f5d44cd8b493c8193da2186104936a6d216cd078c7ef4dbb5d4f4715d0edcd592db8e76f2b21e75c2b48b14d5740ce63f5f165cd5f73e2172180bb504f96c7a2510eb500dc7f852c8119493a0dc587ee097d1736d74757b200f9e90503ba755c18fb75f2ef34db8e1a59a0f40055b898ac0eaca1985de171edc51aa102296f4bf44de5ee58df355d3297b1677806879f855a1831c30a4c3382183876ae1149d919547a42fcfb8e1539cf732db5e161bab11398429e81b04d819d07d655d5d677e309892b4d03d32520be80ba6730317aae7a4087df75be588b3a47367d687b1855874df1bcd20c20ea3f1716ebfc9774e865878978e620d6212b116c93eb6904bdd7b8254a4673b7438b59857150d8ced0b9d0e164b840342aaba0304c5d1cca7f4bc8abc51b41d0496e6de6d433849892d87e83bfe463d087f2621fccbcd5213bf9919e06a463924141480c02c7a61db1c83240b531dbe0f5a31d309e320855f40735f350890a8e3c018920b8a379a343b6737141fef60967857483f7b1e3a9a34ef8a6195d2b33404aa74e5e221168d30e7b8a63ee30cb20917318529b8568e2a23a8478765bc1ee02870f3713ea4d8db59565da45231e15bfb65d1c115af5cb4a74286e449cd0d75e7906b588016bc41e89312a9d25ae18964e0b418ec2cbe305d7307a400c09a10278425d9706ccd3c9674c20a7d97260af4ca77a82e084fa12bafa780d840fb19d3370d0c6e6668b317eecc29fde1b86f49830443f759cd9f9b713e5e2f0f58b62514d8c22f2eede598515afb037a4cfc4f2e0c6240d19bc81544fc8968f681dcc7084723f5d9ea1d2e13375400df34478cf16a4898bc7f0af9b9364e657fd7167dabfb5e10de6527bcaf33253b721379810c0fd20527c97bc32093c4803dbfe428816305dd585cb08247cbaaf3d964d1b7f0a420ea7a97e0c4410f62dffd08d1327b67d9c0e6b369a1965d4043f7189790b8aa3e1e486f42d895a91bef2deac4ffee6046c663d5539271df0f3ba2660f2d6b8749feb6e5a88af93afe733db719ae11e2819b62347903c0c5935e25c0ffd325829129d3992d6a9938bd3b62c8e73138dcf4fad8853c0caf0e52899cd9dc5d76fa7c7c1df747a53651588fb9b7889d970c2d5c149a4f4763fd7e1188ec383f58c64ea99f2943d087359ad805dc55e99bd4087173fab753537a58f9925f795247e880c4af4567bc9b8a2950bdd996a17c8b28684b03bb2392ac114ad548e71e1a0826844f553c36282820a1a5f099409a8939c65d2dc8176b1424e0bb366a0ad71c8f3fb0d743d1fe0f6524cdbdeb14532a13a294757b861cb63badbb84aee7813dfa1adb5f4409d7a877910f4b93c998dd517eb4cf4411c8dbafb49f07fbe337f625e1983319e3eeb3acaaa2cf38199c09dc8b57c4179b974a93a4855a9293822f421ccfcd62e0ad414513d7243498c8337cdc4fae0cc382bfe6d12ade1c76193009338c9f3118937ef425a828a15bdbdf4a1ae471450805eb614b1c67a141a9600f632c745909462159910613f914a611da5d6cee86dc7021f612dba479b89adaf5c850c62a66f7d13f9344c3d5556711240e0ddf4197500da87daed2b5389289e2b0f4fff2ab4d521dbce255a2579190d4fa0c407699a762e1a2ed29e56ec941e2b3fe04723a6907eb8c74c35293139048f2218a52208c86d387c981f455b85574acf4b19a82e8e578228975ca7a4c82bafa3da6f3fdab2e1b0794990cd79655e355fb727450b1f210ab5a3947f6af3cf4c14298b9425c345fe2cce70cef0e29b8a47ca38f548fef4e5433cee04ec1233e4c865fcf9db703d4648ad36a526184514e0572b0901a0e164b2ed73e9fc08b3d57234d15e5b6d6b8857fdf346e4914344972496af0dc94ccc0f2be4622f0b0f09a8bf1f572fdceef4a8a567374ca39acc1f3f650bf92ca6ee8a3b5622ff8b955ba54fea30a609d4b733a1e62b081634bea60b00d338f3a3f438e86db47d0d140114fa1fe07a83c6dea430c4b402ce676e707b10e1d627616176071c6adb25bcc253295a1733b8fa2c71079d2213f53696ff81544b94e2d175d407e18e2fdda4a6d9cd690921d3dceb6cfa09311d25e032109922d89d10c33be40834611cc28731eba41cdcd6c6e49fc345b104d02cf58ac289e5745d832274a7f5135a2b42193bf50828798f401c4eba4e0915e3d0b0c9338c6b06f7cfb9e25fe959022f66fce6e7ecf2efb46213f452faf128ecdcdbd0e130faf3927174c3d732260ca90e9d1742649416ba389274e3345ed0fabbef1a4c889a1e2d39b7ddb116933e67fe1b32a36a21e02a84992f3d3d507fdb462f49d6b6c3ef81661ef28af38fcecf986a8b2730735796be9a30a0f5cb08736733654f153a87ba6e801bc463b91f0ec65f9e1f0468becb35815e97dd88d30e057798990476e810e0e19552fa8f3c7142665c90c29f13a99c71b1748b2944419c06998bcb921bc76612b0e605f69c32e9608ecd19440c481d34096bd55f037acec62ea1a09d148b5d44e2878a53c1c55aa5f4ae5852b295819375e49a930d1996e24fe9db56c2906211ca39448380b1241dbaf610b15a5e77414844d3561165d5a8144f0848cffd987c967d8789d82ca3ec856b88f8e023fc7fd49bb4f635d0e329f48d741e95e998996935a97970d6ca45be06ad7729d9e8573c7fc8f9abc55a516ecc55a73902f01435d03eb0703c2914f8c986cd60019f381fea19f7605f13def17941ae7809bbe8132c412bf4d9c420e809d744fd7483cc0a3315ec8bc0148c526c5ece4dfd15962abbefd8d552127ecc81bad3ce52ba54294ce801056461bdf0d5f727f79476e215de6b22d497fbea55db95e3bc8a952a06a2e7f007b232cbb64c94dc86c288e49466f638b011a7bbbb2f3f6b36f535ab12f07cfedca396a9183b7c3526ffbaeae8e7adf36b32e9821ecac5d2f9f866deeb07cbf629758464e980b732ae9468fc45e1d88aa539ebd7224958f03401d4a628a793ea83f63e85c2c675eee94915a28a62071650eccb03b49057e1a8a51ba2777c76597237594755da87e5c88bab0d9e28d2be2a64bbe210348b010e241bace51b908c7bdd2427557b3331e4de2bfb061903a50a76e8ac799780fe2a911c57ee507bd9070b28e83b0d9943e72ba525b6a6cc746d3a943eae0a46947b29fcebae336af551349e95a05b41f9ce2897d49411263da1b70893c4db44d0bbc076bcd19eb55ce6facc3af51e68a6ba71955294da6024d2598e5fc0202083a7e9ef74fed3c34c3f1475c720728d73d6eeeaffc7f878828ea5a8bccb1b99b77184384282e32df967a83984a16338408fdaf8b449533151e93f2004440a5212867de2f8c67838396a657fbf83b31e9bfd49869e4f50adf1f73bfeed7075907c823c35ffe1303ed618452a0a1ab734993e2f22865b8f75082b1c9f19bfd7423205147cf22ac3e151565b0a165e020be22e0697dc6f483584bd5e1e96a9b87985acb8754f5ba70c6ab37b8d1f65d67481c22211ead5040218e990300510e3f5a2011450388dbff4bb3a349c9016d86bf7abd9318d2490dc82f4d7a790a50a26177237011f9d868b862f2b4f18aba944ecc44acac1f008870e8b463115f9059ccd111da9b99e1e5b9cb562bad778780becdc9b6ce2f2322ed176044b88784c76c411b17aebf91889c2577df669df21e3e893367f1692ae0d8def914149c929407894f203e4742b632239f00e82396da2c8fd71f9f25cab509af9a575552bed2a0025bc435c05a69ce1579c94945574badc06e2587a09bd34c5f19f4a95c6e5f9949c0420c19b25e8ab34a88de7e74c647fdfbcc5d13269366e18ffcab397a586fa435cf8771f83d2f96306ef9354d68da3f197eafc8f37e357d448d2e697b111b70042d055633f82684d632a4be97d30f44f9cd65d9749f12891c3f6a642487a900133711be8872bd4d2eac2b8dd96ee9aeadee27aebc5105f62a7ee7872624060cbe0eb5d8dab4603141bbb37374c185f52f5d04ff3f9223eb2a749c96502b3ddd1b61d3eb48e2ba8f02e04b044d0d1e45f8d2de1d8e7b080a7c67f7f207e2a7270a7ecf5feb214b8a49fae201dce99b6921d218b21a8922796d392a41b9ac4dfe8735fb41901f73446d0d19632ecadee0b1ab4babf562702a07ea0ccb05039286782190efb85f306e2eae26aa7fd13c02f04aafa9bc96505b3e71b5edf32669e2ce7f7530673917c679a11de3b4e1e215b87f690f9f2af90ceb09b0827b5fcf82f3568b8fd27fb526210d78dcb8a0cfc2106ead4862d20e6d5ec0b5ffe42ae5111fee30b34a5df1cbc984dfeace92240dfd315b2bf28f5f499c0ccfe71e8b561c134283ba7b0dddb23be1f1f997823041c8708f768f20682e5f45d5ef583cc1b731141ac7bdd784ed29683fb13a9dc6a14413a31e1a569ebbcf3587754d20f20eed9c2e937fd5b27e4942925f25ec08bae7af82caa72c271cb34e57f3fa5d56a95b2a01edc5ea128b634080ee3045726a79444e1e64094b3c21f36ef8e5dc09d9a0b58cac1b3f40bd9dc99ccdabbb476fb5615cfac028e302c99df39b6bbe0a7de4ba36ef41a5077fa410c893adda88a48e2de634ba4bbaa6036e6ea06462e03d66007bfa084fc44ae5b2056c9e02a248eb08dbae536022e7bf85108ef87da1af04a4528d264000869406afed601a86c9740dba0dd967cc6b340e43d7e9e4c30101daf266bef635a78715d6894aaba3bf2cb0fc1cadc2f67aa06e514efbb1d654fa7c16f6fbae8eecf84c47e9ebe7d4512d645a03e937f3f8c7c5f890ac0bf15303a28a0a97d59ca5a15dcd7fed43e868d48c8d9b0107a1dfd44c7832922c260d308704b173b82e8590df358e0235efd9a81943b385d6ce52535b00a95dc6f72bd536f4d5b6ecf1d5d731a1d16b52a0361e9babcf3ff2d9dedc626cac343b2adb5f62613cab1acb8c95a56b557f89ffd9ce825368637b722e7816a1a27956032be434ba3012a51d84fabbdd779f221fe6000e62011649841546006619aaf82396bdb0d2c0c5a12ca47321265fc697bbd2fa6ca662fd700ec930f6875fb99d5083818a4ef29e8f238fe4df84fc207cc4d46f31bacf7125ab56e5db6cb11a994bc7652ce3a6de851b9c174cb5dd456567046cfacfe77301d7f37db34bf9fa85187bdc11925f1de478a87ba189b21ada9927a7bb054f770389d1b2505399402fc2dc48e737d3f00d2aa4839ecd8c541ef2854b49941eb08ce9d02cf1d6aa7d21ed6961fd9631633d6f5b3959c49cad09520bd3901d0b3b9fcfbb7f61bc3ac957e960fa289a5ec4b6b11bd929a09385ae1989c1666f97153768c600aff6a8a94bf34f859a62bdae4cf82475bff196bbc8b43bcd66a64031bcbdb5337cd628fc027b781b1274135fbce05b058ed31472650d0b5c75d54a34a9bffe30acb3c373e3ed7734c24164acde843a1ca87129ecb24f716379f76a81a16b508741a51f740cd0f65895b60326803a87b3430865b9e932fbdc8bda72cca1700498ab700da3a178faeb9dc0fbebbfb8e5e9c94fc766cc55af1aad802c9ec0fb4e62eff2cf0d158dab4487b96066a341b5ff7c7bf41eb90b18ab8b30ce52c74946336743ff0b6431d6926ab105a420f876e4b4f3907c061056c717513a6a5cadbc596e4332d11aa07fc9f14bedde46c5c316e4e4ea507a07aa6d65afa7dfba5703b9c151814d54c49af750c28d7cbdae33a9394696c9bfe243589ac1e6872bb5f6a6e127935e14222e285b6c754561feb2e631fd2c79d34173582ec7bde665f9e3c9edb0319744adf29b57f1d54d2bb4ee36e6046820f4d275bd32e0b5a7ff70483cd0fdc13b7d4a40eda1f98764d450949daf6465c7f980946dd344f0254a9246f7088fc08525a454e63a2c78bee33b20595caa47795bbb706735cca16993fe0ba8f0a835bb44a37ed60521d584c30ae4916e8406376d5fec890df711608dc940c3e911fd16522c9d18ad5a724faea83cdb0209c206e96f09217554e7b536a2f2b6fe9d19ae30a518ef701ee03a626ec62e88fcd7d2e2df0bd43ebf85417e5437088c995659d97e3e9281597dbf9703ddf221740a858ebfeaa89b02aa1ef7df2069b23432ea4279c0133eb7012b5cd03e7e7ac6a1554d543f9b7d9953f54ccf74c8762e5c7a7aba65c325b2115ff7c46b490ddb4224e50e3d3e1bbb1dc37bbeca61a49f2dd1e2f3cd5f0dea2aa5c1c1e53e89c792bf2296cfcf8cd21c0fc4de7d1d91f453759b19804a84d88dd7d8b0a10f9f4a0190e1296370a7927468880790cfe65c0c16a9b4863f6344f3b67db375877e358902298f0c8b571e10cf9bb1740bf862403dfbaa4cd2af74768dab0923acf1a1b15b6b9e4e8618e6e4309d7d2b0a142ded299a56a4158feb85bbc2e6bd67f5d14e61458764396bfd33ef1378285254d8033068c51fc5090d9a3df709d44796541eb60b51ae52e40db3df55bebf29294be6b2556fab6e76914749aa21295250952e6bfa28463162b487b861fb37e8e94b12a985444f263bd9d5ecbcd4d5c39a39ba92dad5dba4fa70bcf16b330b2146ae4a10b7b9cf24e65111f6efbadebd40b41e573923b960e58278e0e610f5e122b62012e4b4b4bb1c9cab3359c4dcc0a066038de508c48d475059dfa5d730e44137213e4cd694bc1aba4ec3167777f7614e5322236bdc320c5a1d3849b9ebb49f605fbf101a1c77a1d883a1861705156379c57800d44aa8fd56fb2c8827b04413e8d2e4c6d71202b3d4d4ce0d6b795729ae8f195010779519902ba44cad0d0ee76a57cdab04650e850f28b80cb22878cf207478eec681458c7a4fb9a16396383a43b1c3a2083869fe4e9acdb0036a0b6c2fdae01a209a67c03d3f6d375049ac5309e0150de571020b34c7f31af3f8c549e8e66238f8c3e078db08d302810410525701671e600e7d0721943e126cb4d91f2b24102283177af196499ba5f431660e8e019e8b18692ea333dfbc005bb6f09c50eb1e645a8ac314b5870af997711c9da2348bb66a166656010015b36a64bafa97ec1deb31e60b0ef1e61f93780dd4d14e1e376dce03fc519d03c778c2e1156d7127aeaa0074fc390121fccf341942111662a40ebc3c7f0f8f92757fec96cedbd2be777fadda4896e279f7a5e8c8df9e1d9fb6b4da13cebab12dcc1700668c2fa4f7fa05b6d806452363e15d269dbad8bc168e6e13f44d9e93623ff0c20e9531cc64528ba2436c3eaf1409493ed386e4739b9bb495d2cc767c16b419e603ae6575b6fbd86460c820f2bad7e373d0397b2fc13df7521e1e033e8c7d3b40a9bbe80b71c8a3f77161c7e3bc9ceb6a2ed9d05ae853d9aaa5ea12f5edc13b326b0bfca226a58ce09d3da765b0a9c0192a559c8a81992fd22be83641a044398880555d2f9009f12073651f5075d3456fbf974a96fd797b77ce76e4e46cd0ff4556de6f01eb88aa0893926533c9131d1db9b5a374e8a675e032a59593602b9f0f9a8db320c29110e4a955e05037f10d170e50b1c9af07741a7a30d9a2a6fcfc6421d490cf0ccfd1a1c4914553d05c1962094d5c4a4c577f5a9d5ca7e2bfee8c7559e14c4e3bd637c9ad5237996af15efe2e8beab7d92892d1bc535b2706d1099a0dc4310c995ecfa11240f8ad1f3d5ec871f98ff63e1dfba48f8b7f3ba1548b566a2d5301b4ef000653c02796860052083c46f097d8e66923a7bd4ff2d4aa92266017ef80f1e3d703d93c5258c298124f441391550e24793a2252b1c4bac0993effb6abb7ee598b7f31fee64b1c23f12037a6a085ab4434c1bf77252e10746dcb0c4bc71d897079db23f58169aea82de53e82057c1036ed3691f208c5a3a94abf3b5e948add61f789abf8cb8b4511b49c6c599d6a162a7511c3881c7dd4ae0832379a44d223ff8c8f220b44e143ac5b7ce8658a06e2b2dbf9f6654d6f890ff1002d1071c20cbcc139b682e03ea3a45beb209945efbe237ec460f3da06ee0ffc165b8241db125a8e7dcbfcbd941ec391da671c0c670e1cca71b66531e72ad5d44f99e1a442a9c9774342ba73272e5045ec87bc581d2d9e33011d8f7ad2571513ca3b4fd6012d1ab73a42817d50e16507aa398dfc52d7367863f93e5795125456c0ad2aa8f1bdeaff5d009d24bff9d778a972dc54272d85de96b579572d7480b2ad786f3a660b2ce998be959dabd1af8bcd1d205ea512c94e21d2c89579ce54ac6ea87acd3943cf519dd180311656754f5995635a84d2ed7201681f2e59f976d906353ad63d580b7739e49bc6e90b9440f6f6f53becedcd1a4513dc3aaa5e20013e2fab43c6183f13c2e4575c287c1c0f058746aed9e109524f826e3aa268555d9b8460a4bd2b7bca455f32b7822400c4231d046a8dc8833504d4bdf13b0b04230560c90deeaabb352e684f4d996ccdc9e60af95602e51f7665043ffa01e758f4cadcbcccf2094341c9a3876d77d74b7e7c8743d24213b1b0d6d57ae25725c55d54b62967d3539207c0983241f88e57d3df32da90f84f705c7e27a372729dbf78f78620f046e1c51b21e4caf447319e47986e68404a9c1cf493699d5cbc421a960ae1f171742b9236b5d2de59e286c06060977e281a85e636a15c980a0d332c5d56bd135237fb55500947a164f59df86e1b8e572c9ed2c76db1f08c9162536c97ef173412d27d1d01165d801e4f69f67c5bf85485fdbe1d438490e0a200cebaba1ea2ff49ee4cb9a9cbb16fbe5818f34a1475d1b808d3587cad63976ce2fca3969217163c87690776eef121e8e14817bcdb4fc2ce63c3519db5ab6302ec2a02a8656b4b20ae663eafb75b3f8bff853b48a27e05d1dae05392b5c05a147206f3218dad26af6a2757a74cc206acfcc901302dc009a608ff0638c648cc2ba6e8272b316d0f23214cdfd46abd32fa822e1d08e35216f99dc70b1c9159847efbafac8ade8578b0984fac5a94b662a17a9d06b06bd832394e36877504fcfac262b10e46460a5d32dc4770fdbd91097a41b0547e8d71316f0750090a3749a9a550a0766a8fda4c9a22b484be8d104f0902f4eaeb810c985f0e97579873fadc76199cbbb5376f780b93d0e7b58268f55ccd51e983c6fbb0e97f1f1919f9c1a769a9aa4ad6c1beb5718e8cb75c056caa43d0e94739e1dae35bb0464b5134f4f1afa4dc6fe589ba9c55279f802ab8aa99c51a6859cd53c81e8d1e06b075be0a2e43bab63c4db71e9c92a4379b94418eb038685b837fb64f4aa0869310606cccb9fefd34f281fa40474a93238ea600ff490aeddd92e9e81ab8ee30bba779efa3fe9ef3ed6f51e875e570fe22ab068978457408880759e533133560cca761583142498881d6bb0d7c3ecb3789686b6473e87a6f135211d756e49bdfd1da0433aa801e4a818acba75ff12906638781430abddcfdff0f349d775529ed9109b732bd60573b6eaedfa816364ae752d405c793d1b151d9897e548812b0b0b730772d5a830a3788f43fd4652da8f7d6543fe258eeffc03116006e7eb464067fdf8b9600d71e6d9163bcfc8a26659843325df6f3b2a38769fdac7d0325310a3725c1bdd12578e5af96918bade150ee6bd5f0fe3bfdabda9cf5d20b98c50e6fb933f238430c9c7b4feb47092ac554a2994444a92d75faa5fbacad9c7002b81717fb4528076e38d08b9100fbb552c6260b73350a9d7b49440690b7e3099acbd86ad68202eec0e7976b5f723c2c06338de1333169aba7e58874a716648f5c70b49c5f39e2292165f40968a8734c10aa7166fb579f08d1ad620683a1db5b978f8ec443af3ea30319becf4716f3d48fa503b0719ebe5616cedc8c4864b1d23c25aa38fcd1a85b2b8ae7b4fe40a7e9b8d3b5f196ab98a95b6ad553d17785d3a9fcaa65392b5f9572f8072b4ce74228f3fb19decb809797b62424c44c1e8e1776ccf5a68d58cf6f0de6f8639c2402fff5195b6cb87c83fb7bd93fec841cab10d7a885ec738a080f74448fb05a802758b8244a2d51447fb5255cbb332cfbf0a6f7b1968e0c9e768250ceee6aa1f43c3c4599ce5d2a9f666659908d6378a470edfa5d404c91b85dc57ff05c108bc50dbcf94829cac19798203fb635141f7f984c2e0d2f46a00939bbea2eeebf88cd7a161da08f31303f6fcc70d4b8becb70a906fc20c2d0b7c083594aad41e162f1248d7644d2d12fc9c23efc1442a7e2c69780d22180a0da9617fd53c245ffa48a8ee3eafce3ca5973d9e492bdc176177bbd1fdc12e1d269422cb70c461c50c8f7ef4d8459b9afdbe2acabe98e6cb43d22314b0549ad86fb85fd55717df42e6177f1bde35550027237889fd386f65c0fe539e7962dffd2eb64d03e3a377eaa18d64305dfda875baddc148fbc0afa8ea36b56b4a9c80afe6a5f899bd02eb9418f27b5ee3a45eee34af84b0572590d619b8dfd6b79a7da9ee1351f5f9aadcbad10aea4211d0aeeb1cec6cb53ca1fe6732adf3b568238ce40044c4393df34169edf05cf645de451d1fae8cd22160f4907238a16ab56b435930488de03f3c57b301381bc9503a683e7a290fd6ef3ff46597f217ef2c79e9927e21bf7281bae8e7195296cb288449670830c36eedecb9a04184a087b4fd6486ee97564d88b644b3ce62d10e2014679e5c72e48c783dcd18c341afd41b3c61edc4bb92ca594df9aace142e8aaa3b96a530778be708ae4276d5d3d45a80272956ce4e169539fde7c41d952dade15a1cc038f83d38e19bb17b6c813f2012f18c7abbaefd02147d66c7a400bd431b0d9a2761be40f05c69bbc2f8e786586d6922a7f74845d9629be5b625e1006ccb3af6c55ea7efa99cc97a9d632e2f64a9088e48ae020680c0cd84595c5200ca19911e8823cf48ca33d56681d433b60f34c3571682ca8097183bd67764930171350b4a77411077d03b4b5065c510463a5cb12f432f4b4a8ca389c67b865fe822895b52090aa346a72273d170b6120d519e76f53b98ce837ea87a059ec3e82b750a2cc9ac0750b5eae9759c864b0d79bcb9d89ba7dcb86a12adc0cef148a4730efe439bf66be643bd74dbd3caa94a47bd2214257f353aa54deb0f3cdfe37f0f85ca35d1456ff7591cac1891e4f653651500c600d4f674c4849e93bef442727806f0217ee9aa7842b2f209e2e6fb79105a9b00b73fcd21b96438901a210097f008ff756be822f7a729a7007c31cdbc0c4ea350d4df8807435eda8625d86ee89f595b606c3f2d7071467b3bea7109552c9f867a5b5aaa348615e92f582dc8e273ac831c71116c6b92a4d3a26c575452f27305cdb2e4b0747ba6da826750ce43067c237fb870f24c831e4268bc91763cbe3803fc73c364951c6b02700fafce5f240f1280e0bd1035b7609fb2ab43ba559fe65bcc6d5fa2164cbeb6a1c4bb855ef1bbda3d419d9bc39e20ddf1540ba2e94fe520f9501e19c42d374817e70397138604bdb366bab31c4c69bd3d5fce685e2d4da7817c9ef3905c344207f55eaa5dabd1a308b09805fc96e428b1b7c4940f42778358604dcf356ba214be963303db71ff95c938ee7ca23fb38a3321eef14902b43c2f110a6c17ee8ca24641d587def7d04fd8f6cd02b027b99f064d8db3ffd22e4d7b525bd8c092e78f594af2c50f0f4597fe45a586a039281bd184825661edd8a089842267ec52affae5650e3ffddff8be973dc1af04d6a41176fe9cf78d52bb1500e7976d26fcca722f4e7ddde37ad7765cf8c8c553a5af3fea1ace8bc378814fcd54be448d3707967e641d6d046b104eece1b00a332144920bab7c2ff6bb4071f168b418a7d37866f7d72fa9e6314cb53fef0492ab09c535e1188151184a7b2820ecd17c1b6321faaebf54301c33fcc4f876a09b6470cd3a52f79d5a4de955e0980ada7228238b005b8e9b6c62412d46634e5045c92dc6854e1807301604d5c5701e5d85654b0efd88ad5aefda7c51ae52527371ded811a0feb96da8908af7a3793120d3edcb6d815b03bd610966ac487d5031d75f36dd05cdb5ba0940b77bd51f0fbfe044f0c9a07b1cb9eb7b3ae5793f3f7b653f57c60aaae704cd2928344b806fd3fd5a96b2884e775a7a8d5d57cff1147e118b73668a9d388e2fabce4de1da09ae19bb67c7715994f982fb186cb9de568aa5d44624a9fe4ec95f57b053cf8ac4a44120fe8fbe1c5ff1b2f2a5d2168c3148c946b05242e4ba9f59c0edf31e4fb4bd085b6e5a823b34cfb1afce8d96fa42af467556497857466c6f8f20516cb170d07d56a65f2bad6a155b196c2c200eaaa486c891d30882f4beb062fd0af19979233a50158a34632b30d32cf2d77368f807dc96968cd2055ed2594010ec41234473a64b279987a321c8b74d3e3475ee4e566cdf6f99ed07b2e0d78143233cb1dae57ac67dabbbeda639b60c556fdd065d0535f85ec83956861635df1cabfb6c4c4319d91e7342c7796ac248b98f765a610e4ad55eacddd456a254edd1cbea24dcf5e1a38954e7646d5f29e4610b8ca8ef9c48383ab0a52989304af21fb301c854e49438d3eac2fb0a2b1cbc28e2e99a78768cba426c773a9c88333e8a3fa57e2c19e8ba5d506ef451946836113cd5fa5b038f18d3f3eef00df0db419b28ec8fb4c0f7434ba4fea2c7e8b29acd7e5d1764ff9cab88b59095b80a392a0bb57b184c9609784e4ac71fc14e8c9e5e789a8cfd38b6d0ea777b34e807dc2826cc5f8cf1b89a2d6d2582a4010c70f99de7cdb9294402adfb553eeb6dd8a764cea6533f91fe3776cd8968c797d4edb2e50b68abf3db21598f465e69693c4b6b485f6ef1f1650a9d0671616b7676a4b4ee2d92a5a43a2904f90fa86b55581580a4a5d37d999f2ea3af060555642204f0f12a0b4da39d8f58207c7b1e9cb8d25a4725fa3344ec8a29a578f5664b7f415d5e6fd30f3d873793aa6404a8597f31d10d5858498bf4bdc553eab91a701f7afad42735a5c815d6487a625b37ab2b5b64f123e2d80e14cdf85d98d511484e18e41400ed906c3debaf9bf470900c3f823b2613944462800143a779666b8ea6621cb8076d25f0f3e37cb5c8eb64cb86e8d5a7180f13e3137efd31637132df263e32a3d44d0ff9dc22660a2c7a4b09af4b37c60ae567a192937a1c20b3ac5c55e26bbbf23f556b69abf7a49b38348b8eb90c5aa627090a1bc6af95a8b650e0658af55d426f0ba8ba713dcafcace71f603fe052b430c8745e0bf60bd902c12e6dcb2276eb4bdf5c2a2bf6cc0760cccb748e3a3a72acfeb6421eb65faaf8e1c940cf4c4ce8153779d1f0fe630fd6c826f20ca64b4d6b61426e0a8e795d0e484aad5dfe658338d4500e4bc368e9d8506671a5c50f04547b3975ae5d1d272d57f4388c396d9065d4941beb5453aa7327016f46e3da68edb1ff1d6d83cd95bce3d8140748280cc72487b308a6efa20f6f2f38b936cc228d013c90030c1414b3f64f684fca0121385e81c9205d9a328da464b41be5a8d623ffc1230b72e754f525e6f6d6e9f4972bbe216a947c8c606843916ed4f594d8ce5e7876a9336310c50d6afee6706d616257f6c74dd0c96eb08fe086da079bc659b6791871f71cec532f97b88f86ffd9e7434f21c1ee6132bbd5b79ce383d0b28d16f01ac987fee0f098001954acaae339d1a447db060bdffef35cdd924e0454136b7490d0365cde4c78a5473eb9b5be1fa9243bee735376d86de32573d1c3982082470f503a5960c00eec5e7d72f03a38a4478f24759a74bee1eaa0b23a08969dfe246eea96e71fdc67f9713991b2043d7679e53b2b75bda10a51c768f560d36e15631d013625b14582809a938d9ef213e2201e7a4bdac624b259f7130f5a7bda10eac126423d436c696f44e9bf1ea719deb359dcd182596b8c0f30524cfe57adf62bc729f1547ef3328fd660b7945301f6984e00b5894938e901a4d9a350e5ae3365e15bdc96b6f89bff55ff6b470837fd9e00a3cdeaf3c638dc4e0ce155186975a61db1a2b12bdeb8e7a82ba22cbc113c3b76d606983689a2bbd6ae35eeb35cf345c4a4ea68b40812833a0e67de932a9f913b7f44aeb579ccd25e9ba25fb46ab3707ba88d0efcca2a6e05053400aaa0a216de81044730c2efcf77200498515a2266ee8479bf5a38901f91497ff0e9789a5ec4ddd460ce6da7051d541ff3b2c4a13c27ece318e6d298e5dd0b870a322dd6e0e6f436069f561c8e27a2c578178cbed79173fa7a76bed6c57bfcfa40ca660287cdd64fdd7a8bd886ffeb1fd65649b8c4d36b0ab328d056baf29986e419f7c49add4cfb5a769aa0141edbd6e6462576029b1a639052abafc39d075fd64accaac0834e43a7b1138c13b5c20a2eb7081d67093dbcbc97ed98aada776274fbbb996d060836f7ebd96fc6233ac898d1da3663700a4a8301654d709e26eb304abd3dd2f4ac760459b0c877822027f952d2cb1e38d961df3b0c5043ca496354c877f712ae4b10c44e68d70f086241d1061139b5b56971c96a33de71e4d3cc8b390ccb3c44a9dfa8e4680ecc7c9ef1f918cfa3ec0de0e50e3d572db7872e8df7a29995fc054d7f7d86dd6fee10cdad9f72fec915f801eb8cdfbbd5da34a1fd7a70fb4e69da23b2044c1bbc4fe81d56bbeb7678225f37a572ace99beb0e00a5aad18b8f690d730f3c4895a6fad95282d0a56c26d2220cf7860be7eb724f865b7e821003f22610cc29d35146e340cd2c7c473173bb74d974a0974f36a674597e94f4f415a54fbb6e87c8ca2504937e7de31ff903b7c58e34271737d36d9fce2c3954d8eddc4c42a4f3beab5422fd13c4b2d735300502ed2b152763f88569d4d328c550f5fb3059dc75694520ee79dc744852a2e88ddf12ae7d6a5577014e461845cd813cd65bdf1954d885612e6a0aa14587489a36901a3bd9ee257a415638da4aac37bfaf0a5467acefdb09f60f8d9dc5f0fd54b2ee64b72f68495abefc67ec3155ced505a2c6ce36384b020ebd50d912af9dad20d1a81c726145669279134cf891c2ca13b767010d005e7b0f50f03809ef45e236c37b67bfb9898f4ffbdf0e15c865bb803eca03eb2ace403adbcf0d6f82396311f294594e36da0cd287f59c3bf9a8d7e9bb2ce6f5c0060ecba490a19aaff93fcc4fc8c3c5af6148c9e4c1fc0e4292715d052011ba06f06387ce63c94c2043fe2faca0f0766f381184fa5331cdf615a7d679d347ea3cf8e5f793a30cd0975875f0d3ca6eb76dc32588b995717539f8e79527a525b8682b0d5d19146de597f000eaabf2b88e1521a2a00448aade6056d94fcde13c265012521bc60648a3286a44734a8b46c25e4ed56c00b1050b7456a16e34d135d266df76aa714e18777672bf90831088d3c0fbb993b06a8138a20deb24869c7bcdd422977983acbcf1f69ca261d41a3c16b86d3a50945abcc137eb20f77bcfff4ecf3b3623b9bbb00a2f432521818bfd99292a2f6d5fb63689ffd7ed1fad4e1011679de04f70ca981bd416809b05de8d16f3f449f2cc75eff14bc5ab2ceee19ea8ecb1d9156b5ba7da15c102a748e01b2681133a9fb440b30dcede19e1e4374a604ebb89ddd96242b551b69df12d88e936a895bfe8fb4d0024bb48115cde72f6c3e17ce48d6702c360a9cdf161f06ec1085b44169ad549d4d5e80d91ad74368d7f9fd6809c0f86be378a3a4d0386de33fcb789de43e22cc14bc7347a5768f64e708dc9a4c1f4e8a495846573b23e304134e5f2cad7acfceec4615922e20f0a4f85ae8dad527c188e0f5d896c57a449a932f2adeea6c55e89d423e03a60a577c05066bd98466f72fda86413c47270b7f88c380575ce8a72b1f3fa0d3eadc35260a49ecf33a2b75c91381155988bc3b110cc3adfbac2daeca15b74509b0ff14e1891782748197693ed5b852cff6873e316cb79c96478f1706c484872b2e23f004d31994594117033bbe0dbad6113b76a6b87aede5df478319b0875477f6d4bde873a9469f1533519d7ef04f5e2aa1d4a965c3ef72ff33437209af7f93692201571b32f367aa3fb383c9d6970c5c474b47a20c2e0683e7ead1c94a3d3f3a3c1549a036ed3cb7da8175e7980295791a52dee90fd01cb780088f48d8a9613cb8254433c7962860695de0fbf2f34e3c28f977c0266473d03f117cddfb01816b66d9fc40bf9444de9b3c47d4e89c03b9e17d1410d9efe061924ecf2031aa0e2998ac809aa4f9b980f5b79a6b6b7ce3d02bbbb009c5287542a1d4b25b69e26825d7cbe0538dba808277fd83ffd4ff20514a5dfdcf0d287c854cf143620f245e2df3965094c4c2497f8aec7f473797325699ace1ec4f88127b2e0a57a4bffaafccdf01098cf1321481ce499614a3755966230227685d777ba3c9560136b10dd44e6185e85dce357dda6c8c628b958687efc2413e31221417bdc4ba404c499424d33217f22db5420cde1369262c22faf02d62a3bd7837d94e49668b0a9f96131f7b6a3b6bff7d2fae719290e464ee81d119239ff6e96e4b5b2064e9944f6b8c05b11c21a01798a56f2e65881bd9a997c7e6c0f38a54216f39f3e4508405d8bdd4a91cc2327b15a5b52ceb86e0c328f8a090a27bd0906bdf2dc31a9ddfd3d13fb2f96649dbb5fecff79386093b6564aa5315f40e1b6e42168b4b2915338c7305b7b3cac13a02a3ebee2f6ec9ee07699f965f74245b9b929fcc491433f83cc78101bb498000a64c0df3aa2d211f66e32437667dd3bb6d5b029218ac10d3baa072bd1397c6a215036cf58329336f16bdbb11cf3519e097d28516e20a25625dbd9ff07ecc7d829ec9ff97cb0eb1a274ab6972bb048e3d12566f76b445cf444183d2f9fc33d09a010efe8db42339d0a67c26d220344d7689dff9e5f86b5261d88e24c0ecef71a5e54f1875c30284caa77da6e6d9955ee3f459c3dec715c980179f7b65eb029ef7e139f8a322679ac815140eca815636f66fd2754c03ef6a40c2d751e5e7c94c96dd1f16e0207b8713182a515618f4fa976f5e2b426223082f5beb8832da263e92bf783c1dca0e65eaa1efb5d76c68a0ba7faf6a39a086b82315eba10bcdccaf31d85b4842c7624a7d143e4d94a2c9be5dc495dd828037fe4a5d04f978c571c9bbdd28a9fa46bd4a2a7d856a3996c99aa7d1722fe73aea4889513b86855aa5ba7e4cfb00e9375d9dd4a1e407011c3e3f9fad4871606e2b73ff3c15ff7ee3cc30aff222439eac561b0bf8f12aeded841aa8a2800442cf2c81ac82a80a0f9a897f40ec42052143db14f74d8483ca1bfa6e52ede7d9df61b24a61bc9843a8429d7f1b6a32c0d5c949ceab79be6285ba7eaac6f0593eef3ddeabb716485959a352438ab55c7833d3b03a88059f8e6a0f258284a4fc06febce583a296e71a788782b2881311b1826879e907ccb6581019ee6432edb98c2b455c00a912dc2bc09a59bbc89bae667d0255eb4bde3814723bf323a666616da9aadffb17f4dc3921a3abcba2c6d23ec805fead41ec03458d126e0d4b25f530911299d74fedf6e98edb1a37128815dc95b95d33b7ee649ea1ccd3998d3bfec6e32c3100bf67c61d70dbb7a09eec7be7dfd9f6f7234e4c5f8eb1168b1dea07b5d3f9555d416837651b59179a4fb2ce12d6bc741ff7e9752fc34ac2bdd6999a2db5204b02d6edcc026795f82c0d24dfe81e9b5acf875fc0d4dca3f61d1ceaf12e22e1dccd0eb81cfe0222e726ff0b5f39513b7c0c298d3cd3fd3d22a2a7cb072781c47cf7346d1efc1f2fa3506088a0c1daa1b43525d36c1233fe6967edaaa9e8daa2dc347e6b99e9ba2a4ab8dada3fc0aa0072ac9f84cf52dc01e3bafde85daff91e59acef8b607f47721510de30ddcb20ca053cf2fd5d1098dc27b2fa569430e8a67cd579590d8de0a27e212e53c2d16f14b5e923f24409be9fc19446c9cbc93f329a806136081f8e87d47bfdb3364cfc58cdaa5b5a8775361155351242f0f49d95120a279c08d4348fddeb1adf86fbf60dff91927e298f092a3ab8a533fc4b906d68d1e85748f6a9e18d39d658008f5e73ceb549f5e03d1ea8e905ae9e671741db3902ae5240f6f638b1a890cb096958f6c208cf8eceed0be1e33c6deca475a63d137f67f8e9f93767f5df2862a601e0b9d19b4a0092fab90f3e95ee028c635cec22151728a512ac05a6e93eca5761b4423accc68b23f5fd567dc70f24b4578c15744a82a38faec890194b3455059c8cc6ddc3d774e3722afde8256287672b7befe5e45e8da6a09f7205817376461c32032aca6d187943d9bac248f6f9aa13b757fe8862150498e19f2d47b6d60060553cbabbfc4a4cd0c80b506e5e6ccf2b9ffce5fc501c88c9cf22de5611311a75e8015dbcb7629da476b729e82cef8addfcf06b1e1da640bfba2fd5665abae8f5b8727dd274d044494fbbd8613e00c85fada7f79a080c725c7d9b89c94962d57c2ae5a1bb85ea1f052de0188781bfd2ad2fcfd41c0d67e85b5a2c996fdb48709626ed794d1cd2d970a5f51e597b26dedf75247ba1845377b202e6e0be32b959b8352e501aaf36bc7523edb66c970e36ff0691eb3daa493ca5f20f7fc8076c72b10c31d5f0d5f26fc4e5ad5c1202bbfe574eb6a22d9febb98f0eb2ebb304ae2a1495a2bc27bd4470f2af704892bf081d8aff644edd6848127edf1043a0127bdf40a51f4a636636bd3ce520f7f387080adfdf102324e4eed3bceb62829e129f0d69f34a53032155ac424f1c5873c3668f0236078105b0b1faccf6da161085bd6e43cc3c0c6cfe46ec825a6f9923a7be36e4e4bd784b765b86e5749e8fdbb6e5cd1adea62356e1c8ee7b5c53e8a21508ceef33ee4db46ce488e89ecd9aac67319bacb3a0782b66f326db14e3ee9327267072e41c6b0b08eadb33a664b85cecc396e2f5c124526e4762eeb95aa74a984907d2e0fb1f6c12fc120ec455bd48a4307b77c52657effddc3a6b426ad3c770150f06974690694f9f8ab3daba1bb784206f8c856f85f307009c482dd80acade9b0cd8017204d948b062970a749b731f39a88a54b399742cba2e778a57a3b6c12942d3d7c06af5d8eec59391405fe6892eef53bb454698cf8dc767565f1372bd3b6129bb96d5c315295c1078818518095551e6e033b3f68b738a227df0ac39a3d7ded846dfbd686e10fcde748735f32706a606564c9f169a7e72fa4392066d0a1d6bbd169cc9f58ce57fc0b8937fc071ad85f1381ff77ac479546e03c0e8d885c756851666b78cef306cce87780483094a426409cccf0131226ec16acfc9e6acc14e0741c64ef166b26f8c4308c480d302253760b38dad61fc5683ad902cf98f7e6d54ece135f67cfcfbf0801742331c021ddfb8b3fe1bead541d85fc4494409e1b889ec2a808e978fdb82c761bb3562ca60592ebde72ad21cee9bf9d92e93fbe26c08e1a1abfdf6b202d31b0ff8535c50246d7a3abdb02c88e93266600cf797fd9563fe1516f7fe19b3093c8b98defcfa0ed0596560e789dab00b99ffc572c98c41e2826b85064d4ac1de90da74bb096675bc788d9c9159662f311181951b19234a5ae3aa0d9b74262891997b66e3ebb3221fe7464cc2f68af43d483e9d5781929802d092faf46f4b5f328822ea5f60fc9dd4aa6c23ce75f6bdf01136cf5297f4f12e161661c63e28bf83327a3073a52414432df34419e4a42aad140a0a44e5167c058e40470344cad1512fba14669039a05f605d9af547640297aa3351b5448de0fe6f495a1538dcae3f2cdc161b0878255787eb129b884b63bfc0404fb938df1ba02783b0d2315431130faee19c90c351868910bdf12ae75e73033451e9921d3a2b2344ba34a39ef6385719b95c7306c255bc781770ada1dc1a51b0a9f67f062cbe351b5b219f2722d8f11753227669fed63cfac33a45b217353848ae50ca01e8e5a6283a4cb6eb7e43b9c4a1a64ca15d7777bebde1e50d482ba6d6eb133b4c41f41bd525ecad2881ea1b471516002f6a7cad4adb99d733fafc7cd092860329f9ec88757500a224dced41085aa6397b1d20e0643d2f13aace8a991fd021fe71fc6797643dce96f4f0b9920bdf9a0b587350aa6a4fff696765f4a44fe46f087b894d883a0bccb76eafdc425eb01f115f149fe539d49cad4d1fcb266f77fe700d7882eeb89fde35d39d2b2bf788576bffcf9eee1969b7965358bff045870cf2396eca141e559d9c30cbb991da5d919e9cedb4f5f72ccdbe59907afb4ae5a6a37afae8707a7d303d7be2b010ac71f1b997f8b2f7de8b826d008f4e2d0278c06289b3a8c35fa7ba6391c911bc3d0044d2c8320ab992048d4e6b4be32dabe677e0cc99bbeff2f0556383aec8915de947033fc96fb7c3e2eab72dff1dff58c74facd9b1cba8ac65906b96dfa0aad3f335d3cfad8890f42123f4b0da5566414edba3a3e473810806d7c5cc39b77b07d2f740c5b4cce82aadf0828b7f1a56bd87528f69078e2a3aeca930391ca5c090d17be3feb789f8dfa56d20ca1af1b79d9ff2b7dba6633969037a907c3351889a01d0095b786ea8996eb2d72df452d7ab7ca9b6ec8ea176f7fadf41c34312b755005f96d7992dc48147685eedf075122653506d07487b7603e66d36e4c0003ac14bf40924f5fa2932389ce8099af9ba05f56b27260076cbcc828f98102fe6d6c2efb0a105961f6269a7d486c749ce6c59859a2b9d5650e53c5f2017f09db518a9bcfd8480cecbf9c1b9d8ec9c4caaf79e7d72a123e376cf5fc5f32f5e53826a7484b1cf88fdcc7ee89e101d8e530691fa648e74224a7f54c4e6d660ed86e7b85142e1cb9cf085e9bc2d457138e6e0fdd70ed5ebe2e048e3537364076f31628735cdd1547c4d8388bf817485d9554f5ac37dbd374bf0de28ee41392a50b821ccfbacb3a99ac134216c82a739766d059eb1e0b1e51744bf28d2e70920c55d1909853b308e8be620df48bd16736b6b569671eb974461fe5714ec4e92d9cae154ae40aff44c9cdadfbf362d83e147ce7ce6e641e2f81ccc9cd288555cd94499e88741e7b5aedf296e2f928e73399e262374d371dd9c7c1b94721f2a353b14fd817c4e75944d77572516ab4488e7ddcf96f041ce861d5c7983f6fe1e466215367828dd5ac12f2ae54e11d505d16a31d6be5bbdcfc8195ef5551af6aee0b7253db75387f265693157a00f3371b692df4a734a34bb6284349642b4b96fb20471922091b0644bb38afa567708faff96925d1e54f7d6c1dc6e4d65aa0453059014e7d895970e6d75cce702e5377b6a868dd37e169f603f7c58abe427dc8d9aa1112f811c8b3582875a79ab9a4994e8f1cdfd1808bf5637ef4c20ba919798e12986a4e13296b480cf67de07852090abeb08a6e045b59b8a9af0ff096f701d265cead3e25a7498ba9f41141dcdcb51cfb6b23bcd3e491c9d76cb43394e1f5f60a76499b9e5d03398533ad57a197d8aa34804245096edc3c666304fe9f2e16dd9da7e3e6e6d4f8f6e00931e85ad281f19bb7c32bf6b2b5643df0e1d8e2f787be520037aace1ef02df1a5d551deffb4738f69b2414092d4b01372f11995f64300988a309baa1c423acfb3cda3a6284a80714e09f78d8f5cf8720f09c5ea7dcbf5d42fc57fcf3ac6b89fe5c7f5fe38fd8d88ebaaa11d91aad16d7a84d84317448ca3a5f13872abe509f94dec42165ba79868b446cbfce23c22583f160905803a3ac91d71026c55d1134094aa99e50e778089a81ca4bd7b5248f0c826770284f38e5420ae5dd318e697bed393803da2bef09366dbf14f22aec8a1f5a116fd7d23bb210633187f81eae7fdb7c0a1ac9a3ea4f93bff3b281b1df3d755a1a7eebb1d7f7971bf59808f5f2675c9a006668d5eab0b3c84afee5b04f18cb5ffd3fbd380bb33b5a8591013649b6169ff44d35545635cc88b9acf02af95c8de3526c37f93abb3c77ca0a897eb88cc6ce8391a02b87a9e01722d27818e6ec3b06efc1f37675657ef93ad31f495dedeccf436733932838a987e597abc38fdffebb172433eccd330a53db44f08cdfbf935c436650d19090025f9ec758fd00ac50cb1736d3175095480ab84ad2d2d8b00bcc44951c075ac2c67fc4873b7cf9ddd4cb761a46bb9d346c4be651ffc6ea7717c35e1803942be4aeec59dc7e9b3503fcc66c468c6d7eb9b3403904ccbef7092d676d4fc9aa1327a9d3a6c89d54d19b09b0a8715b67b698994546bb7f0a65c624fbb837e06e78ecc555e8175913f45ee3ae7a7d1e38e8de005750a803c677473605d4c338a191ad97e347090a649b7f49dc02842e8cce30ad2143b638c49938f3a614faad852988a429c84ca38a2e144f0e2cab87800d5939835db2e3fe988b9c9050a52c8513fa7bb15654a553e1f06ea7ea0ea7a5b48fb7613e41464664c0fa0f04e4d39597d334e974e010d2cc172b98453f7548ee63abd7a48f7eda7d033a24c224500d1adf392bb5a37251efb106b5a196a9a7749853f2c568136d0e53a98afd5c9ffed1f424f80479a26dd4ff6e138ae60537d429937f4cd97e7d09b95276578de24808c95df50c16169a6d212c2f0e6ac1884a482fca5b55e13ae7ead387330932711e5f367ecc269c58d985a1d6d5059845f222affeec9cf7e022744d31693b1ad7e18fda137ad795c9c91407c45b86197b9f18f1cc7531f38ccb7f30bd49441e468cac72e69d3c41ce9b12463595c63882914dcf6ea6cba27a0d21c43ca4933d0104eb1727069e8ae37b8d9e3c75f8cc2f209a3d53e9f0d66c6fe79d204662091627fbbc2cffa80844cb42e4363d18e30409e31ce9cb73a8f61f780bd7a022f30c3d0cd787f89f33c92abccf9398ad010dfa50abd179f2cdd9361b8be4029d4afa49ea8c0321120bcb11db7fc04f08866cf7b2da81bf189f974e17f9216adf9e53cacbd88e5224cd580b8dee4e2b0198662b633b236ade52cff7c2dc74ff85dc5ef0a9f70378d4bcdfd9a0b8e941601584b10484acd43f5adbd5cd05198fa1d2e9807085ba3672d50554cef703b1000be64ad5206320a2d5d7bf282e746b7f398cfaf9f59b3ddf1770a91c4b9885c41ffbdaa8668c467ab64685c1de8834259edff1524d77e3a55573809ba414e0db868d28ee5d0b338f5fb235ad00041ebf723426b1135bdac6a33cbcbc983fa832a6cc42bfa59c829e91c6c356faaf45b33d69e5f22028d4c1b4fef180fb5dca5b910d417b2367c33b6d0d881f82a024c4bb8c9d49f51a122dfb4458a1ce29ecd72f35426accb3acde55c522064df3f7b4ecd0b96917ad28cc5f4e80a33ee43535e65a3bd12d7da416eeaa35bd016d0ec3242330d87236115a0926651bb615c2a1eab6afa72f461c378e243fa08f5f2202a6f992de3825dad7c2693ce025373aa9022829c1018bada1e5b1e384705ea378dd88b5176c2a4104bbc5b7182b1dcdce947b96ec5bb13cac47d8db1789598138a8c163d4bced795c90690749632576316759c4c93a85634471c24d565101ca7ef941774a478ceddb4e082c17832c67b10896c9d7fdd131397afd6d04b6b734103c73020bac2e47fa93e5c7dbcd2448bbd8925afda50ca6d005636a62dcd9a2d82df18cf682961fe7b582f35a8207a37e793f9be23f797c7e6c09bdb35753f500151f3dbf298b375bc0baf549827c72c0df73edf3892846d6256958bf95ef42b0f4e2f12b7ec94798f28f31eafda45f45bdc4c74b8c8ff3096c4e1732812c0319f2dd41fd8de5810609f773103a7c2f50f30b61409340ecc836161002657af780d7a763f3b8c78537ca01cda4532649127927dcc3ec2142764a2dbf530a982637eac311053503b3c0d66c6b1c22ce115efdf6dd01b062f43f918173eb6e4be5fff4c78ff7522ae3364772ee20c30ceefd1ce27c874f7f7f80cd042eef6bb3cd54730ae9aa6282e7df8d1659f7ec103bf805b8f690f7c607e23bc4d89fbaed3634aa22fdbb93a349edecf87d0333ad8fcc3cef7d968497c59ae1237199b25b8d7fdc287a3a162cc1843a0abc232e72f2d03ba4e4acf536278c78bc3002689adf725911e4ea400f4a036939b4e337cba3c1ab5e25e7bbb798ffd10b1d1d326c68f219db585aa85876a1bf44825abcc3f819d4d6f28f1b5523ec167e099354889c7605bd08b46e47c3bd5e9599d24e26be51743756175f85b55f74b702cd5e9311248b0dc5647dae1e617bdbf2ea3ed64c4f8949981ba564d38555d5e27cd5b48e3d1c3024dcda4f6cd9e182e22a56ea5f102d269c5920e3220c327f8aa1e0e9f5f922184f4e250a0ebf748b2a64f9ad5930c782465cf6f3e99d6a32b1a573f0aca3288efc0abce91975c7678152adc56244b4754e1329ae3edfd66b285301116dc53f1c73bdc42c2b71cbfa6fbdbcc8607f67964b2e79d3ab0af6105a4ef2e8d2596e903c5331fd5e4beb4bbfe6e6becbb3a9f38cd83dd3d90abe3f5c6be74d5fddad3f1b3cae28299a4e22dc9590a9d46fd64998b8f4df8e4b517e07f764e20caf7b5501291bf0f420eccbe20df228bd788d159dd71d120ffa0c4a5af2ba0d62c9646d0c8d32efc804970f36ee00e1c7935665a46c6f9737ce6458585738f93c195683c8a1f8fbdefc537d9b35b591011c74f750db4a7ddf8d65393a741872929a3b9e8f2c9ecab46bc589822bcdff0c61d24f65cd121fe82fae4480c83ea25b112f440c6c4332a95d40a9091522fbd8d57b174c5f122961c2750b69184c8e66a318a28e48fe6a65d672e91861e7cefff2f64976e009a9c21784605bf9bf882c2c987b7736d6a0d5735a88f8501e22f4d93c47714e91412ff20cf8a6276672f6c7d11c234b554e7eec83d0bbe020677e1f4124e233cf9a10876b0efb3a765356bdc7bda9bebad40db8e0ccaee81ae7dad32fcbbb36cabc32eeee395f27a2d55b852290118431315d11278f6796a1992a6ae3bb89edeb4fc82b84364f75987363a53a132882f4792b8bd243e40b32c2a0fb0d3f90362b141417433894711d8bcbb65720ed4e096ef400fabfea089d77bd8e232af88e46717f4f0b5b0f6e78393efcddcafc9599eadaae0c2995142e93277d540bb240c5f78ba921706a2acad5287bd79d45c0af8d293ac37e81f16a88c7f49d119a1d3e547e51684098ff46a35555e120d68a4f4653e89125cc1599f55b7e41337414cbb172c7682ea737e9f73d3c1d3635b7e3f28f765416059cbf3a2f6fdf237861e648d3a9a34eedfa8d8a2b9d1ffbf499ddafe6d3b1091c75be890d936964a9d58c6e90ac9962c9daf5a4e3f585bcf65a6838d61d52d54b0c45febe81658ce171cd87f4ecb3bd92e2fc423388e4f41bec28db570c8f39f6dd9f000f52d8de46163738ed485c1b23a1999b5ff7ba4177a39078005d955a4b357f43a025de3d857478d126ea46f07fbdeacee93a29391f4a19f002d6179acc90a1dad38f59ba0e30370b545a1cfccc8b3cbde80bbff9340caec1adbdcb0f7baeb4c35c7f2b4eea2501947bd7a7a4eff2d6755ee8dfcf8e8f91c5da0f912aee8cf02d1b6e02a4ea2d26c30067e6f3a7227a2f23bd0c8268b3bed847d7745bb5dbf52947226673645302559bf7b160b1aa6ddccf234323c3663bc6417507d75457303ac096d8517a77d736485a62ad2aeb33a4c64c6d06d2e714b7812d7dcaad2aad86e0b0b3863368e3760eb18f2d92da075833521ce99860589b41da4826b821aaa2cf87013fe040eab825d6a492feece03439ae26a51ccd5fc1e6b66cd063670f57bb72a8659ce67050fa46cc7049a7212ed4bfb8f6cb6cff987c782baedb50e736039e3346e77833fd2cf7755cb791bc43dbdb81abce134a23714778fbd6be4870388975bf24680de1db2f03f071d55cb4c83a67e1ab80b71dad6444bec76bfde2c62f03fbc2eb75aba56fd566fc78fc3278f2efe2e1a765cd8a02c59abac5ce87d8e07b7b1c11f87705c613b1d6dfebe7492f4b4a304f37742aacc57a165a9765b20df8521d74042f3ad556a4e472f574d49c1dfb4f9e5e645d56d9059ce1a5a618b743dff319495097d1890e024eb1d4b3c93eedde1a48aa31628fab7789b465295f7eabee4d2e27135f16dcc0977cf111c753b3c2a799385679b939eb781b91f6a18bcab87145f323bba718c786d7c46ed133055abb4012385f09eb67a65b1b7e35644b8cede89d638e08119854811bc773ed82a10df39646663e8911764632f7b9eff5c132395fef67ed38019a22f5fd8e59103d042d6375132866b627d81e6be6567c0cba47003ada2169e2a3d9276b362cb7084baef80fd4da2c2a3212c1ca29caf78b907dcbfee3baaca641254ea70ad6930ccb19eaf632eca4bd0d34f5f0eb0d8cb529e808baa165a7114a4c20ef6a575770a4604b8d7df8ab1a9e8531ecc6f424d0f75e58e3069c42f8b9e74f9e52a94451063972be8f112f64fa544ea49380f9f9b79c265d95b87067e4e21b70a6b3b38c2c1e03d93fb307270b06c99cfa772c8c8f2bd0e3106598a2cc6e65050b20e9d9d4c03079fe698a9b501b3044323e24bfbae2263fa6536612c7d8445df1e2e251fbef0de8a3a3e073e9dd38f4a75ad712f448ac48e47e2e5894245e29893bf295b6401d677d91ac1ec353d746c4d559c7d786c377d6e30b312d849dd7f6df9a10bfa827872a4bd69f2c74ba60e4a6d0ab001725970d09128c21028b22b8224162d5be9b68314bde2c005f68f034cf4d8a52f46a1570edf5b2727f4d174dc0a9def4783cbaf602ec43fc92e7240fea88a574ba10fd08141120ade2466e246544890046daeab8937a55819b3840778cf66ce9b9f19912ade0759f4727cf93544e562e437d6deaebe45a5c2d3ca424cdffb04aac2cf8bb06988c6f8c41fb666fe934e77ae49c5d2925b85c4b5284d0e5b8e656dabaae7f1197d081000b1e675bd5d38749114d3585146142b195cfafcdf84fad9067114ac467d5df1f43573a0bcb7a8d00de5577bb5c56bcb534081184305dc714302cfcc416d4dfe81c9b5da68b1e731d4d4a602baa9e6a4415eab3f8b000d0d8bbaa7056388cbc6dfc72dd10a60525788987a337ce6152b673ebf09ba3dfaee6a661ccfc58b562de1d651ba3032b3e7684ebca3fffef266595e537049f8f8d0a040a0367662faffbfee35d93f624aef819e07a7809b95d3ed23fa095e7158239cff71bf571b8f1137aa1320a0d5a65a4f9adf0054b261f30fb1646af68f26e79474ff367ef4f4d43750092d067e8b3ce5cd883e8df7d40a276e2b0687ed105e90ad66fa464fcceda169289d58d13ce6b3dafbf5a7bef3dc8b4896d2951c5a2d079eb94c51d045db2caa969e4bda9c28c98aabec397513545e6e4b9dee8c889755f4741f720fd3584436189ee304c91671d1ac9316737ce270f7402c291923202ef0841e356ca90244853e81089a53428827e2115afc222807fd4390c41a1c2a799eca3e665e49405558bf5e905c2bbbd3243b94fd95fc5c3493be14e0b44edd6fab7220b01c27ec984d30b4c2a57612766a5c6120c9e1747353df602ea77df7a812db209caeefc9e443be2527c32b32c81fd8909363abd6d407626f2dbe6353f9c6e68fd21a1608e9b03eaa690d45d516a32b688a2ff5c0d4b13237e0c920da0db44e0e5ed560ee880bb091d764c650a3b61d97f1e6a6126e0a659b14f59813537dd7575bb5525467dd5b5db8578cfadaa0b3435502d40696d3b981a374446639aec1a346a9f50952ab63a6d47c5796466add390915af380de21c167df71b7853ea43a3493c1865bbe4cd360715e3bd8a14e3c5f3b5c687e8d5d67e91d6a24c1132d5aa33062b4de840582bc004182bcbce44f34ece743284d78da6b633cd03aed98786f5ac55a5827dc6535385398932ab1eefe4c353474a03312305048f3f7ad2372c12c31f460e37d1359f58451c8dde2a0901aef22fb607e1378f6250447db389bd8027cde1e30c8213abeed085055d96b3037e19611589f84aadfa8930a980047e7ffbca6ce750217288f9b87eb4b1a24207e11e48a7afedc710a88233d513adeb84e5213f1c99ba2b5d6b2855ef72c519b93fd53ecaa687650f2208e81daeb448cb561c0c5bec16dd204a54f19156873c76f0a63e2629f14d4b6f45be14e9705590e15eb0b7f523ad87d7c5b9c1e13f2b8fbe11e9e57260dda3380dcf80987c5d4620c457316254738e7ed9150d1fa807887f9f83161d2665e7c70b068d256d4ed6917d8d2fa8250bd045b46569a933d87b64b053d7cc3dc83b75715730028998e9e717bd19bc3e9a4d0eac358006bef0f1f0ca9c6ac72600252f333debd5c865d682e4e9f4bbf7865cad4327c1c0c9ecd0c758ed0a7bc913e9dc406a518d2e305b883edb6197d8a6652e77a157d81775b10caa4daac155e5c120b7add9c374caa50522ae53e698bdb40b7c4c59c31998d49f454f63abfb9c50b6fa6cd0e2f9783cb8d81332041b6bea9692f90e52dab95fdc0fd84d14f6048b57eb391fbf10c92972c6d969cd1bc445bcfcadeba6b30698a69a7b74cd14b7edf8e9760cac2ecdbd77b23e3af83ff062a5dca47630175cf3cf0ec183f51dcc05b632ab2597f53fc242387f9e2edac08c904c51ad199d863362c4ad26b71200f72f2bc2ce689d3994700ec8ae4cf8393cd0691320ff4732e41d9458b0569854fddacd6f1c3ec72e5705ceacb2c07db373fcd430c660942094ebd7e50296f66835d3fd6ba7561126ea07dc592b03adfd725bcb5ea4143187c42ffd4651897aac8638f8fce9dd89f5d0ecb43e7b4323c0a453fc4f5a438c0b9d84be2f21e7f7d1fade9e12d4ac35661a099c87c86f533065f99d568fe93ef58fb549c4fa087676327635a358da1f4b9b384ecd217c3f6c765c9e0bd7b7e818a4576ac3c85cc0073e941e147595398506c674516c8aace271e2c34611a38609c30e18b6ecc43e5cfb93300a4332246a8d3cec3e628b81c249883d6dd297bd83b2fcf9feb2f13688604918bab9c21412745aa46faa0745f4764de0401cf6a32b93357e42aa0edb53dc541ec107c356636d05e89f828471c08ff4828518b4104130b69a5806c0b242c08c5bba7693dba6c437d44ccf572c46878d147e4aff4eda608a18a73e255be9faf8ec30d221fe2bc339af9c31de8aca3a8f2fedceb13fd0468e5241f094b3179d9598859300a0bc94d593b0e8e81d227a7fdd638949a550bceeec6e1d474ef5c1b8c8501b1663e249bb17db28643c49766206ede47ba7dba039b4c7f404a48ab2263dd16f350b1d33a80d0eb0dc8ad0a6d3c5d794b2bd6ec64af7b3a5cfa53513e09cf7bb92e145037a93ce441c65daa34d0de740185d81c952037cea187b1248a5886af24d5d5661679b0a1ab91bfb6b6d51f8c4ce16bef44f1246d13411576a1214320d8c02d7f6ad9c07ef2de989b48947fc42c6c1c65e484b2b70c59b5ee81c33ede4b696f9c4fc05c1d423956be0c1e1ada6c9b2e76c98b551463a5ee2e0f4d28b7425d3b1db4458fc2312f5c64ce72b07c449090a4b9bc24908b8ddd84fc6414278bc2f189904ea5a5a4022145178b3b43aed802387ac14a8443e95e302a5373bfe0625dcf2457dca679700eb43a46505921136cf1a9dd40c8e8ceed91f5fbb8b3dab8c3765844d6f85a507a6b2c9fc06095916ae239eede9390cd1cec05c8c3de77a9a8b1475576e41e78ba7f729d6dc7fb594b488dca04b8eb8fa6a697bd86c8fbd6e2ae1e8028420f6b078025d3e058227979c67c9a036a66ea348fc85a1e33fd7cf5684d44f82abf3569da6ae9b3a460eb16a836096a3282290864be824f367ac30404e037e0994ac9b48e6663ebc9faae49acd82263c15c4c29f5821bc7a7c01ed4ced50a3d038d1956b00de14cd3e2a85ac444d328717f1cab933cc8dec0663cba86d2f4ac223befb8eb2f27d764d737856508c404dce41801c042ba8bb1b5ae0cc8d3e0f8a2351b9e6e36e39c13e0b85ab8b319e39944b1521232313c66e33cb7c117a23bdbee106756ee2274fd9b39a28ac6307405add88f56e071d1fc3861b496f730a4178d9250e3bedaec18877abe69ca4e81b399a0b3aa77bf85045c88b210625f5aaa5257dcbc3b434f2a8ba0955e16ed9895d7a27e4050bc0e07b329585eb6a76e0a273b9942e7e78785a7fe49d3800ebeef0ccc89ac725c26f40f1d5d4374988098c8d721cfe9b88c7fcc4a0290754410e7e80f454495e812acd08b48d701b7f152448981bf9b5980a9e73e303f6b00858e1fd171cc3b278ffffeccdde5b988bc554bd3b0d6c0aa8c9e41b6454adc69ab63e4eb353cf692ce14b5952fc2cfa089da0299336e8b2c5c25c514cc480ea0f5cb1375182cab6b314f8a69dc71dd8ef52ec1f78025863f89c08f5a57974b87a1254d1de182ba87136c08fc55d1633f23059cf59671c9f617667915df8340b96601f2761811b473aecbc13991d6cbb12c287486e8a275ad183bcfb7b9c0217829c57f6f7dbea6cad2ab30db82b8f7b296b2719d1659b9caaba55a209fae19b1db86c03eb12c4e9866d64c527abda688b374b06bbe806c0c6ac00fe21ab5d3caed4b3c40a1f33d2dd81c48515f1f8805efcc506019be9770f2fd9d433f38416f8651a55a244775c7348af422f29a785180a733073b28058aad2c68453b9cca53cfc54e09253398f6e436690dc045943fd09edd4b98c5d2ca47bdcde11592d438e663a1fa5816afcac09ff1c959a14af74db1427a417e3b0e3f9e9e9132d8b7910e16fd6c6051722965c06f4ff1469e30ea284c6e4c06faa661a4dab0b6a0cff9a5234319d32517f01efcd94a7a798f0e534c13647baae5ca65036a575ee41222c962fbc62af077f04e9a7f420a47353ec2d561e737d144dc705342d7cde7a1b7a04a4c33619a833a87b8a5f0e1d57707059e6987c298a3c8f08e958ee0a3845a07d071dda6c7508302d6e0e88b585ca8731cce50fd048c3f4512eecfbc6f5078195f609f0db6d128948dd159868065317f0277082a43a87b184ec398197798233316ff296c2b9fd530f85f2d813053cf90b949de3d78d29b5c8860974ff2cf1d7090b8a60a1acb36d1ef6e21453393999ac97d36a4f488eeacc52960fab8012ce68869b690c014c0f3c4ab24204bb6b1fc2ba8bcfa805edd9235a3e7d1187dc67965b2bdd774008006d84c1940721b1c80de6cdfaea08a2b21afb21631b4ba20cc9607212dc851c4253bcb873d5dedbb773ce2182d1cc8f6f55fc31c8e04245c4d33e6622e4d57339b7220375b6bf0838d95e5629c9c23ac618d20192bc0c17536941db75a3b7927077e08571e2257e5e069b48e6b095b03fc0fd0bdd828e7ea27607f549351c8781e69bc39f7d5ada8d0bfc9d882234a3cc3032f418b87f827438c978175570a666bc58d576c485ca86f49ca066ba07a96e8e6c81a6694e0bccfa2fd26a5f55a9a60b77142f46610976c6174a032ca0f3829a0a6dec75d2c5cbfff6a983f4d21d294492fb6954d4fbdb97e2fd5b93bc17596470ab2e743f859a8d4f4b2dace775105b3d8dc5059c0530f3cda6d8df391207cb842d43f6d3a07f1c64e908f9e5737526628bcdd4a032e0c4e65d18171e5f8d3c7298b57c62fa81c85992d6fa825a7752d283453e92d46de50754625c6f9aa7aa</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 文件正在施工中，暂时无法进入！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🥧leetcode刷题笔记</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="https://yanhool.github.io/posts/20230327d.html"/>
    <id>https://yanhool.github.io/posts/20230327d.html</id>
    <published>2023-03-27T10:19:03.000Z</published>
    <updated>2023-03-27T06:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="9c3077b562102ac113dd50dd624dd8959ae533669cf775ebfc01683259727d5e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 文件正在施工中，暂时无法进入！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🥧线程池</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记</title>
    <link href="https://yanhool.github.io/posts/20230326d.html"/>
    <id>https://yanhool.github.io/posts/20230326d.html</id>
    <published>2023-03-26T01:19:03.000Z</published>
    <updated>2023-04-29T06:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><blockquote><p>范式设计<br>SQL<br>索引<br>存储引擎<br>事务<br>锁+MVCC<br>日志<br>主从复制+读写分离<br>数据库中间件<br>分库分表</p></blockquote><h2 id="1-Mysql基础"><a href="#1-Mysql基础" class="headerlink" title="1.Mysql基础"></a>1.Mysql基础</h2><p>MySQL的服务器模型采用的是I/O复用+可伸缩的线程池，是实现网络服务器的经典模型</p><p>采用select+线程池  不用epoll是考虑到磁盘IO</p><h3 id="1-1数据类型"><a href="#1-1数据类型" class="headerlink" title="1.1数据类型"></a>1.1数据类型</h3><p>MySQL数据类型定义了数据的大小范围，因此使用时选择合适的类型，不仅会降低表占用的磁盘空间，</p><p>间接减少了磁盘I/O的次数，提高了表的访问效率，而且索引的效率也和数据的类型息息相关。</p><p><strong>数值类型</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/05111f79938b494c977c247839e41b01" alt=""></p><p>age INT(9) ? : 整形占用内存的大小是固定的，和具体的类型时强相关的。(M)只是代表整数显示的宽度</p><p><strong>字符串类型</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/383f6ddcbf214e34bf0cb33d0fa2e5c0" alt=""></p><p><strong>日期和时间类型</strong></p><p><img src="https://s1.vika.cn/space/2023/03/26/2ed7e3e1e1204303b5dfd94f36a0f0b6" alt=""></p><p>​      日期类型也是做项目过程中，经常使用的类型信息，尤其是TIMESTAMP和DATETIME两个类型，但是注</p><p>意TIMESTAMP会自动更新时间，非常适合那些需要记录最新更新时间的场景，而DATETIME需要手动更</p><p>新。</p><p><strong>enum</strong>和<strong>set</strong></p><p>这两个类型，都是限制该字段只能取固定的值，但是枚举字段只能取一个唯一的值，而集合字段可以取</p><p>任意个值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sex enum(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;W&#x27;</span>)<span class="keyword">default</span> <span class="string">&#x27;M&#x27;</span> #给其它值会报错</span><br></pre></td></tr></table></figure><h3 id="1-2运算符"><a href="#1-2运算符" class="headerlink" title="1.2运算符"></a>1.2运算符</h3><p><strong>算数运算符</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/3d6a949ff53249bb970c17128754fefa" alt=""></p><p><strong>逻辑运算符</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/4afe543c10f54413be6afe4175e1079d" alt=""></p><p><strong>比较运算符</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/b855b00581174fb2a310d3ca4b2a483d" alt=""></p><h3 id="1-3完整性约束"><a href="#1-3完整性约束" class="headerlink" title="1.3完整性约束"></a>1.3完整性约束</h3><p><strong>主键约束</strong></p><p>primary key （一个表只能有一个主键）</p><p><strong>自增键约束</strong></p><p>auto_increment</p><p><strong>唯一键约束</strong></p><p>unique （可以为NULL，一个表可以有多个唯一键）</p><p><strong>非空约束</strong></p><p>not null</p><p><strong>默认值约束</strong></p><p>default</p><p><strong>外键约束</strong></p><p>foreign key</p><blockquote><p>两张表都某些数据有关联</p><p>比如说学生信息表有张三，考试信息表也有张三的信息，如果删除学生信息表张三的信息而不去管考试信息表，则会造成试信息表张三的信息孤悬，造成脏数据。</p><p>因此需要外键约束。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT<span class="string">&#x27;用户的主键id&#x27;</span>,</span><br><span class="line">nickname <span class="type">VARCHAR</span>(<span class="number">5</span>O)<span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户的E称&#x27;</span>，</span><br><span class="line">age TINYINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">sex ENUM(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="2-关系型数据库范式"><a href="#2-关系型数据库范式" class="headerlink" title="2.关系型数据库范式"></a>2.关系型数据库范式</h2><p>应用数据库范式可以带来许多好处，但是最重要的好处归结为三点：<br>1）减少数据冗余（这是最主要的好处，其他好处都是由此而附带的）<br>2）消除异常（插入异常，更新异常，删除异常）<br>3）让数据组织的更加和谐<br>但是数据库范式绝对不是越高越好，范式越高，意味着表越多，多表联合查询的机率就越大，SQL的效率就变低。</p><p><strong>第一范式（1NF）</strong><br><div class="note info no-icon flat"><p>每一列保持原子特性</p></div><br>列都是基本数据项，不能够再进行分割，否则设计成一对多的实体关系。例如表中的地址字段，可以再细分为省，市，区等不可再分割（即原子特性）的字段。</p><p><strong>第二范式（2NF）</strong><br><div class="note info no-icon flat"><p>属性完全依赖于主键-主要针对联合主键(多个数据项一起组成主键)</p></div><br>非主属性完全依赖于主关键字，如果不是完全依赖主键，应该拆分成新的实体，设计成一对多的实体关系。</p><p>例如：选课关系表为SelectCourse(学号, 姓名, 年龄, 课程名称, 成绩, 学分)，其中（学号，课程名称）是联合主键，但是学分字段只和课程名称有关，和学号无关，（姓名,年龄）和课程名称无关，相当于只依赖联合主键的其中一个字段，不符合第二范式。</p><p><strong>第三范式（3NF）</strong><br><div class="note info no-icon flat"><p>属性不依赖于其它非主属性</p></div><br>要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p><p>示例：学生关系表为Student（学号， 姓名， 年龄， 所在学院， 学院地点， 学院电话），学号是主键，但是学院电话只依赖于所在学院，并不依赖于主键学号，因此该设计不符合第三范式，应该把学院专门设计成一张表，学生表和学院表，两个是一对多的关系。<br><div class="note warning simple"><p>注意：一般关系型数据库满足第三范式就可以了</p></div></p><p><strong>BC范式（BCNF）</strong><br><div class="note info no-icon flat"><p>每个表中只有一个候选键</p></div><br>简单的说，BC范式是在第三范式的基础上的一种特殊情况，即每个表中只有一个<strong>候选键（在一个数据库中每行的值都不相同，则可称为候选键）</strong>。每一个员工的email都是唯一的（不可能两个人用同一个email），则此表不符合BC范式.</p><p><strong>第四范式（4NF）</strong><br><div class="note info no-icon flat"><p>消除表中的多值依赖</p></div><br>简单来说，第四范式就是要消除表中的多值依赖，也就是说可以减少维护数据一致性的工作。假设有skill技能这个字段，有的人是“java，mysql”，有的人描述的是“Java，MySQL”，这样数据就不一致了，解决办法就是将多值属性放入一个新表。</p><blockquote><p>应用的范式越高，表越多。表多会带来很多问题：<br><strong>1、查询时需要连接多个表，增加了SQL查询的复杂度<br>2、查询时需要连接多个表，降低了数据库查询性能</strong><br>因此，并不是应用的范式越高越好，视实际情况而定。第三范式已经很大程度上减少了数据冗余，并且基本预防了数据插入异常，更新异常，和删除异常了。</p></blockquote><hr><h2 id="3-SQL语句"><a href="#3-SQL语句" class="headerlink" title="3.SQL语句"></a>3.SQL语句</h2><h3 id="3-1基础操作"><a href="#3-1基础操作" class="headerlink" title="3.1基础操作"></a>3.1基础操作</h3><p>SQL是结构化查询语言（Structure Query Language），它是关系型数据库的通用语言。</p><div class="tabs" id="sql01"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sql01-1">标签语法</button></li><li class="tab"><button type="button" data-href="#sql01-2">部分显示结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sql01-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># 库操作</span><br><span class="line"><span class="keyword">show</span> databases;# 查询数据库</span><br><span class="line"><span class="keyword">create</span> database ChatDB; # 创建数据库</span><br><span class="line"><span class="keyword">drop</span> database ChatDB; #删除数据库</span><br><span class="line">use ChatDB; #选择数据库</span><br><span class="line"></span><br><span class="line"># 表操作</span><br><span class="line"><span class="keyword">show</span> tables; # 查看表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(id <span class="type">int</span> unsigned <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span> auto_increment, # 创建表</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">age tinyint <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">sex enum(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;W&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span>)engine<span class="operator">=</span>INNODB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>; #查看表结构</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>; # 查看建表<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span>; # 删除表里面的数据也删除</span><br><span class="line"></span><br><span class="line"># <span class="keyword">insert</span>增加</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(nickname, name, age, sex) <span class="keyword">values</span>(<span class="string">&#x27;fixbug&#x27;</span>, <span class="string">&#x27;zhang san&#x27;</span>, <span class="number">22</span>,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(nickname, name, age, sex) <span class="keyword">values</span>(<span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;li si&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;W&#x27;</span>),(<span class="string">&#x27;888&#x27;</span>, <span class="string">&#x27;gao yang&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;M&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="keyword">update</span>修改</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> age<span class="operator">=</span><span class="number">23</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;zhang san&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">delete</span>删除 只删除表中的数据不删除表</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age<span class="operator">=</span><span class="number">23</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">22</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">select</span>查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sex<span class="operator">=</span><span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> age<span class="operator">&gt;=</span><span class="number">20</span> <span class="keyword">and</span> age<span class="operator">&lt;=</span><span class="number">25</span>;</span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sex<span class="operator">=</span><span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">25</span>;</span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sex<span class="operator">=</span><span class="string">&#x27;W&#x27;</span> <span class="keyword">or</span> age<span class="operator">&gt;=</span><span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"># 去重<span class="keyword">distinct</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"># 空值查询 <span class="keyword">is</span> [<span class="keyword">not</span>] <span class="keyword">null</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"># 带<span class="keyword">in</span>子查询 [<span class="keyword">NOT</span>] <span class="keyword">IN</span>(元素<span class="number">1</span>，元素<span class="number">2</span>，...，元素<span class="number">3</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="keyword">select</span> stu_id <span class="keyword">from</span> grade <span class="keyword">where</span> average<span class="operator">&gt;=</span><span class="number">60.0</span>)</span><br><span class="line"></span><br><span class="line"># <span class="keyword">union</span>合并查询</span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> tables[<span class="keyword">WHERE</span> conditions]</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] # 注意：<span class="keyword">union</span>默认去重，不用修饰<span class="keyword">distinct</span>，<span class="keyword">all</span>表示显示所有重复值</span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> tables[<span class="keyword">WHERE</span> conditions];</span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps <span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br><span class="line"></span><br><span class="line"># 分页查询 <span class="keyword">select</span>选择显示数据段的多少也十分影响查询效率</span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">10</span>; # 只显示前<span class="number">10</span>个 相当于 <span class="number">0</span>,<span class="number">10</span></span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">2000</span>,<span class="number">10</span>; # <span class="keyword">offset</span>,lines</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit (pageNo<span class="number">-1</span>)<span class="operator">*</span>pagenum,pagenum; # 当数据量大时，后面的页面查询速度会越来越慢，因为都是从第一条数据开始查找，所以需要用索引的数据段辅助查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">&gt;</span>上一页最后一条数据的id值 limit <span class="number">20</span>:</span><br><span class="line"></span><br><span class="line"># 排序<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sex<span class="operator">=</span><span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> age<span class="operator">&gt;=</span><span class="number">20</span> <span class="keyword">and</span> age<span class="operator">&lt;=</span><span class="number">25</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>; # 升序</span><br><span class="line"><span class="keyword">select</span> id,nickname,name,age,sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sex<span class="operator">=</span><span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> age<span class="operator">&gt;=</span><span class="number">20</span> <span class="keyword">and</span> age<span class="operator">&lt;=</span><span class="number">25</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>; # 降序</span><br><span class="line"></span><br><span class="line"># 分组<span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"><span class="keyword">select</span> sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id),sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id),age <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> age<span class="operator">&gt;</span><span class="number">16</span>; # <span class="keyword">having</span> 保留age<span class="operator">&gt;</span><span class="number">16</span>的数据</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sql01-2"><p><strong>查看表结构(desc user;)</strong></p><div class="table-container"><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>id</td><td>int(10) unsigned</td><td>NO</td><td>PRI</td><td></td><td>auto_increment</td></tr><tr><td>name</td><td>varchar(50)</td><td>NO</td><td></td><td></td><td></td></tr><tr><td>age</td><td>tinyint(4)</td><td>NO</td><td></td><td></td><td></td></tr><tr><td>sex</td><td>enum(‘M’,’W’)</td><td>NO</td><td></td><td></td></tr></tbody></table></div><p><strong>查看建表sql(show create table user;)</strong></p><div class="table-container"><table><thead><tr><th>Table</th><th>Create Table</th></tr></thead><tbody><tr><td>user</td><td>CREATE TABLE <code>user</code> (<br/>  <code>id</code> int(10) unsigned NOT NULL AUTO_INCREMENT,<br/>  <code>name</code> varchar(50) NOT NULL,<br/>  <code>age</code> tinyint(4) NOT NULL,<br/>  <code>sex</code> enum(‘M’,’W’) NOT NULL,<br/>  PRIMARY KEY (<code>id</code>)<br/>) ENGINE=InnoDB DEFAULT CHARSET=utf8</td></tr></tbody></table></div><p><strong>分组(group by)</strong></p><div class="table-container"><table><thead><tr><th>sex</th></tr></thead><tbody><tr><td>M</td></tr><tr><td>W</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>COUNT(id)</th><th>sex</th></tr></thead><tbody><tr><td>4</td><td>M</td></tr><tr><td>2</td><td>W</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>COUNT(id)</th><th>age</th></tr></thead><tbody><tr><td>2</td><td>17</td></tr><tr><td>2</td><td>20</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 同样是插入两条数据，上下两个的效率是不同的</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(nickname, name, age, sex) <span class="keyword">values</span>(<span class="string">&#x27;fixbug&#x27;</span>, <span class="string">&#x27;zhang san&#x27;</span>, <span class="number">22</span>,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(nickname, name, age, sex) <span class="keyword">values</span>(<span class="string">&#x27;fixbug1&#x27;</span>, <span class="string">&#x27;zhang san1&#x27;</span>, <span class="number">22</span>,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(nickname, name, age, sex) <span class="keyword">values</span>(<span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;li si&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;W&#x27;</span>),(<span class="string">&#x27;888&#x27;</span>, <span class="string">&#x27;gao yang&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;M&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们编写<code>sql</code>语句本质上是<code>mysql client</code>，而<code>mysql client</code>要与<code>mysql server</code>通信需要<code>tcp</code>通信。显然下面的<code>sql</code>效率更高</p><p><img src="https://s1.vika.cn/space/2023/03/26/4f0cb00717464204aeffcfe7454fb544" alt=""></p><div class="tabs" id="sql02"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sql02-1">标签语法</button></li><li class="tab"><button type="button" data-href="#sql02-2">部分显示结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sql02-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">explain:查看<span class="keyword">SQL</span>语句的执行情况（也只是个大概不准确，mysql的优化查不出来）</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;zh32gsan&#x27;</span></span><br><span class="line"></span><br><span class="line"># 便捷添加数据</span><br><span class="line">delimiter $ # 把分隔符<span class="string">&#x27;;&#x27;</span>改为<span class="string">&#x27;$&#x27;</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Procedure</span> add_t_user (<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">WHILE i<span class="operator">&lt;</span>n DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,CONCAT(i<span class="operator">+</span><span class="number">1</span>,<span class="string">&#x27;@fixbug.com&#x27;</span>),i<span class="operator">+</span><span class="number">1</span>);</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line">delimiter ; # 改回来</span><br><span class="line"><span class="keyword">call</span> add_t_user(<span class="number">2000000</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sql02-2"><div class="table-container"><table><thead><tr><th>id</th><th>selec_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>user</td><td></td><td>ALL</td><td></td><td></td><td></td><td></td><td>4</td><td>25.00</td><td>Using where</td></tr></tbody></table></div><p><code>possible_keys</code>：可能用到的索引；<code>key</code>：实际用到的索引；<code>rows</code>：扫描行数，因为<code>name</code>没有索引所以扫描了<code>4</code>行，如果有所以就只需扫描<code>1</code>行，可以通过主键或者唯一键给字段添加索引。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>  <strong>笔试实践问题</strong></p><p>下表bank_bill是某银行代缴话费的主流水表结构：</p><div class="table-container"><table><thead><tr><th><strong>字段名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>serno</td><td>流水号</td></tr><tr><td>date</td><td>交易日期</td></tr><tr><td>accno</td><td>账号</td></tr><tr><td>name</td><td>姓名</td></tr><tr><td>amount</td><td>金额</td></tr><tr><td>brno</td><td>缴费网点</td></tr></tbody></table></div><p>1、统计表中缴费的总笔数和总金额</p><p>2、给出一个sql，按网点和日期统计每个网点每天的营业额，并按照营业额进行倒序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 总笔数 总金额</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(serno),<span class="built_in">sum</span>(amount) <span class="keyword">from</span> bank_bill;</span><br><span class="line"></span><br><span class="line"># 每个网点每天的营业额</span><br><span class="line"><span class="keyword">select</span> brno,<span class="type">date</span>,<span class="built_in">sum</span>(amount) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> brno,<span class="type">date</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">sum</span>(amount) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h3 id="3-2连接查询"><a href="#3-2连接查询" class="headerlink" title="3.2连接查询"></a>3.2连接查询</h3><p><img src="https://s1.vika.cn/space/2023/03/26/2304ade370cf4ec0a505bf2bb74e5a51" alt=""></p><div class="note success no-icon flat"><p>连接查询的时候大表建索引号</p></div><p><strong>先创建数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` tinyint(<span class="number">3</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` enum(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;W&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`uid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `course` (</span><br><span class="line">  `cid` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `cname` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `credit` tinyint(<span class="number">3</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`cid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `exame` (</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `cid` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="type">time</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `score` <span class="type">float</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`uid`,`cid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, age, sex) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;zs&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;M&#x27;</span>),(<span class="string">&#x27;ls&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;W&#x27;</span>),(<span class="string">&#x27;ww&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;M&#x27;</span>),(<span class="string">&#x27;zl&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;W&#x27;</span>),(<span class="string">&#x27;sq&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course(cname, credit) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;C++&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;JAVA&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;PYTHON&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;操作系统&#x27;</span>,<span class="number">10</span>),(<span class="string">&#x27;数据结构&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> exame(uid, cid, <span class="type">time</span>, score) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2023-03-21&#x27;</span>,<span class="number">99.0</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;2023-03-21&#x27;</span>,<span class="number">99.0</span>),(<span class="number">2</span>,<span class="number">2</span>,<span class="string">&#x27;2023-03-22&#x27;</span>,<span class="number">99.0</span>),(<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;2023-03-23&#x27;</span>,<span class="number">99.0</span>),(<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;2023-03-26&#x27;</span>,<span class="number">99.0</span>),(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2023-03-25&#x27;</span>,<span class="number">67.0</span>),(<span class="number">3</span>,<span class="number">3</span>,<span class="string">&#x27;2023-03-26&#x27;</span>,<span class="number">58.0</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">2</span>,<span class="string">&#x27;2023-03-27&#x27;</span>,<span class="number">86.0</span>),(<span class="number">4</span>,<span class="number">4</span>,<span class="string">&#x27;2023-03-26&#x27;</span>,<span class="number">97.0</span>),(<span class="number">4</span>,<span class="number">1</span>,<span class="string">&#x27;2023-03-10&#x27;</span>,<span class="number">92.0</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">1</span>,<span class="string">&#x27;2023-03-12&#x27;</span>,<span class="number">99.0</span>),(<span class="number">5</span>,<span class="number">2</span>,<span class="string">&#x27;2023-03-14&#x27;</span>,<span class="number">99.0</span>),(<span class="number">5</span>,<span class="number">3</span>,<span class="string">&#x27;2023-03-16&#x27;</span>,<span class="number">95.0</span>);</span><br></pre></td></tr></table></figure><h4 id="3-2-1内连接查询"><a href="#3-2-1内连接查询" class="headerlink" title="3.2.1内连接查询"></a>3.2.1<strong>内连接查询</strong></h4><div class="tabs" id="sql03"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sql03-1">标签语法</button></li><li class="tab"><button type="button" data-href="#sql03-2">部分显示结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sql03-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.属性名<span class="number">1</span>,a.属性名<span class="number">2</span>,...,b,属性名<span class="number">1</span>,b.属性名<span class="number">2.</span>.. <span class="keyword">FROM</span> table_name1 a <span class="keyword">inner</span> <span class="keyword">join</span> table_name2 b <span class="keyword">on</span> a.id <span class="operator">=</span> b.id <span class="keyword">where</span> a.属性名 满足某些条件;</span><br><span class="line"># <span class="keyword">on</span> a.uid<span class="operator">=</span>c.uid 区分大表 和 小表，按照数据量来区分，小表永远是整表扫描，然后去大表搜索</span><br><span class="line"># 从student小表中取出所有的a.uid，然后拿着这些uid去exame大表中搜索</span><br><span class="line"># 对于<span class="keyword">inner</span> <span class="keyword">join</span>内连接，过滤条件写在<span class="keyword">where</span>的后面和<span class="keyword">on</span>连接条件里面，效果是一样的</span><br><span class="line"><span class="keyword">select</span> a.uid,a.name,a.age,a.sex,c.score <span class="keyword">from</span> student a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> exame c <span class="keyword">on</span> a.uid<span class="operator">=</span>c.uid <span class="keyword">where</span> c.uid<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> c.cid<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.uid,a.name,a.age,a.sex,b.cid,b.cname,b.credit,c.score <span class="keyword">from</span> exame c</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> student a <span class="keyword">on</span> c.uid<span class="operator">=</span>a.uid</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> course b <span class="keyword">on</span> c.cid<span class="operator">=</span>b.cid</span><br><span class="line"><span class="keyword">where</span> c.uid<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> c.cid<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sql03-2"><div class="table-container"><table><thead><tr><th>uid</th><th>name</th><th>age</th><th>sex</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>zs</td><td>18</td><td>M</td><td>99</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>uid</th><th>name</th><th>age</th><th>sex</th><th>cid</th><th>cname</th><th>credit</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>zs</td><td>18</td><td>M</td><td>2</td><td>JAVA</td><td>5</td><td>99</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 已知这两个查语句的效率差距十分之大，怎么样能让后者效率接近前者呢？</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t_user <span class="number">1</span>imit <span class="number">1500000</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="number">1</span>imit <span class="number">1500000</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.id,a.email,a.password <span class="keyword">from</span> t_user a <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> t_user <span class="number">1</span>imit <span class="number">1500000</span>,<span class="number">10</span>) b <span class="keyword">on</span> a.id <span class="operator">=</span> b.id;</span><br><span class="line">#解释 <span class="keyword">select</span> id <span class="keyword">from</span> t_user 其中id是主键有索引，查找是O(<span class="number">1</span>),得到一个临时表，且这个表数量少是小表，内连接是通过小表找大表 id是主键有索引所以效率更高</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>索引能不能使用主要看where过滤的东西，且内连大小表的区分是看where过滤之后的数据量</p></div><h4 id="3-2-2外连接查询"><a href="#3-2-2外连接查询" class="headerlink" title="3.2.2外连接查询"></a>3.2.2外连接查询</h4><p><strong>左连接查询</strong></p><div class="tabs" id="sql04"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sql04-1">标签语法</button></li><li class="tab"><button type="button" data-href="#sql04-2">部分显示结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sql04-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.属性名列表, b.属性名列表 <span class="keyword">FROM</span> table_name1 a <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table_name2 b <span class="keyword">on</span></span><br><span class="line">a.id <span class="operator">=</span> b.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> a <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> Orderlist b <span class="keyword">on</span> a.uid<span class="operator">=</span>b.uid <span class="keyword">where</span> a.orderid <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line">#内连接可以查询谁参加了考试，而外连接可以查谁没参加考试</span><br><span class="line"># 把<span class="keyword">left</span>这边的表所有的数据显示出来，在右表中不存在相应数据，则显示<span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>,b.<span class="operator">*</span><span class="keyword">from</span> student a <span class="keyword">inner</span> <span class="keyword">join</span> exame b <span class="keyword">on</span> a.uid<span class="operator">=</span>b.uid;</span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>,b.<span class="operator">*</span><span class="keyword">from</span> student a <span class="keyword">left</span> <span class="keyword">join</span> exame b <span class="keyword">on</span> a.uid<span class="operator">=</span>b.uid;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sql04-2"><p>inner join<br>| uid | name | age  | sex | uid | cid | time       | score |<br>|——-|———|———|——-|——-|——-|——————|———-|<br>|   1 | zs   |   18 | M   |   1 |   1 | 2023-03-21 |    99 |<br>|   1 | zs   |   18 | M   |   1 |   2 | 2023-03-21 |    99 |<br>|   1 | zs   |   18 | M   |   1 |   3 | 2023-03-23 |    99 |<br>|   2 | ls   |   28 | W   |   2 |   2 | 2023-03-22 |    99 |<br>|   2 | ls   |   28 | W   |   2 |   3 | 2023-03-26 |    99 |<br>|   3 | ww   |   20 | M   |   3 |   1 | 2023-03-25 |    67 |<br>|   3 | ww   |   20 | M   |   3 |   2 | 2023-03-27 |    86 |<br>|   3 | ww   |   20 | M   |   3 |   3 | 2023-03-26 |    58 |<br>|   4 | zl   |   22 | W   |   4 |   1 | 2023-03-10 |    92 |<br>|   4 | zl   |   22 | W   |   4 |   4 | 2023-03-26 |    97 |<br>|   5 | sq   |   25 | M   |   5 |   1 | 2023-03-12 |    99 |<br>|   5 | sq   |   25 | M   |   5 |   2 | 2023-03-14 |    99 |<br>|   5 | sq   |   25 | M   |   5 |   3 | 2023-03-16 |    95 |</p><p>left join<br>| uid | name | age  | sex | uid | cid | time       | score |<br>|——-|———|———|——-|——-|——-|——————|———-|<br>|   1 | zs   |   18 | M   |   1 |   1 | 2023-03-21 |    99 |<br>|   1 | zs   |   18 | M   |   1 |   2 | 2023-03-21 |    99 |<br>|   1 | zs   |   18 | M   |   1 |   3 | 2023-03-23 |    99 |<br>|   2 | ls   |   28 | W   |   2 |   2 | 2023-03-22 |    99 |<br>|   2 | ls   |   28 | W   |   2 |   3 | 2023-03-26 |    99 |<br>|   3 | ww   |   20 | M   |   3 |   1 | 2023-03-25 |    67 |<br>|   3 | ww   |   20 | M   |   3 |   2 | 2023-03-27 |    86 |<br>|   3 | ww   |   20 | M   |   3 |   3 | 2023-03-26 |    58 |<br>|   4 | zl   |   22 | W   |   4 |   1 | 2023-03-10 |    92 |<br>|   4 | zl   |   22 | W   |   4 |   4 | 2023-03-26 |    97 |<br>|   5 | sq   |   25 | M   |   5 |   1 | 2023-03-12 |    99 |<br>|   5 | sq   |   25 | M   |   5 |   2 | 2023-03-14 |    99 |<br>|   5 | sq   |   25 | M   |   5 |   3 | 2023-03-16 |    95 |<br>|   6 | lb   |   24 | W   | NULL | NULL | NULL     |  NULL |</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong>右连接查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.属性名列表, b.属性名列表 <span class="keyword">FROM</span> table_name1 a <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table_name2 b <span class="keyword">on</span></span><br><span class="line">a.id <span class="operator">=</span> b.id;</span><br><span class="line"># 把<span class="keyword">right</span>这边的表所有的数据显示出来，在左表中不存在相应数据，则显示<span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> a <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> Orderlist b <span class="keyword">on</span> a.uid<span class="operator">=</span>b.uid <span class="keyword">where</span>  b.orderid <span class="keyword">is</span> <span class="keyword">null</span>;  </span><br></pre></td></tr></table></figure><div class="tabs" id="sql05"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sql05-1">标签语法</button></li><li class="tab"><button type="button" data-href="#sql05-2">显示结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sql05-1"><p>外连接<code>where</code>过滤条件要写道<code>on</code>那，因为写在<code>where</code>过滤后可能会把右表变成小表，进而变成内连接。左连接必须左表搜索全表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> a.<span class="operator">*</span><span class="keyword">from</span> student a <span class="keyword">left</span> <span class="keyword">join</span> exame b <span class="keyword">on</span> a.uid<span class="operator">=</span>b.uid <span class="keyword">where</span> b.cid<span class="operator">=</span><span class="number">3</span>; # X</span><br><span class="line">explain <span class="keyword">select</span> a.<span class="operator">*</span><span class="keyword">from</span> student a <span class="keyword">left</span> <span class="keyword">join</span> exame b <span class="keyword">on</span> a.uid<span class="operator">=</span>b.uid <span class="keyword">and</span> b.cid<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sql05-2"><div class="table-container"><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>b</td><td>NULL</td><td>index</td><td>PRIMARY</td><td>PRIMARY</td><td>8</td><td>NULL</td><td>13</td><td>10.00</td><td>Using where; Using index</td></tr><tr><td>1</td><td>SIMPLE</td><td>a</td><td>NULL</td><td>eq_ref</td><td>PRIMARY</td><td>PRIMARY</td><td>4</td><td>chatdb.b.uid</td><td>1</td><td>100.00</td><td>NULL</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>a</td><td>NULL</td><td>ALL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>6</td><td>100.00</td><td>NULL</td></tr><tr><td>1</td><td>SIMPLE</td><td>b</td><td>NULL</td><td>eq_ref</td><td>PRIMARY</td><td>PRIMARY</td><td>8</td><td>chatdb.a.uid,const</td><td>1</td><td>100.00</td><td>Using index</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>内连接：只有两个元素表相匹配的才能在结果集中显示。</p><p>外连接： </p><p>​    左外连接: 左边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。</p><p>​    右外连接:右边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。</p><p>​    全外连接：连接的表中不匹配的数据全部会显示出来。</p><p>交叉连接： </p><p>笛卡尔效应，显示的结果是链接表数的乘积。</p><hr><h2 id="4-MySQL存储引擎"><a href="#4-MySQL存储引擎" class="headerlink" title="4. MySQL存储引擎"></a>4. MySQL存储引擎</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>Engine</th><th>Support</th><th>Comment</th><th>Transactions</th><th>XA</th><th>Savepoints</th></tr></thead><tbody><tr><td>ROCKSDB</td><td>YES</td><td>RocksDB storage engine</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>MRG_MYISAM</td><td>YES</td><td>Collection of identical MyISAM tables</td><td>NO</td><td>NO</td><td>NO</td></tr><tr><td>CSV</td><td>YES</td><td>CSV storage engine</td><td>NO</td><td>NO</td><td>NO</td></tr><tr><td>BLACKHOLE</td><td>YES</td><td>/dev/null storage engine (anything you write to it disappears)</td><td>NO</td><td>NO</td><td>NO</td></tr><tr><td>InnoDB</td><td>DEFAULT</td><td>Percona-XtraDB, Supports transactions, row-level locking, and foreign keys</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>PERFORMANCE_SCHEMA</td><td>YES</td><td>Performance Schema</td><td>NO</td><td>NO</td><td>NO</td></tr><tr><td>ARCHIVE</td><td>YES</td><td>Archive storage engine</td><td>NO</td><td>NO</td><td>NO</td></tr><tr><td>MEMORY</td><td>YES</td><td>Hash based, stored in memory, useful for temporary tables</td><td>NO</td><td>NO</td><td>NO</td></tr><tr><td>FEDERATED</td><td>NO</td><td>Federated MySQL storage engine</td><td>NULL</td><td>NULL</td><td>NULL</td></tr><tr><td>MyISAM</td><td>YES</td><td>MyISAM storage engine</td><td>NO</td><td>NO</td><td>NO</td></tr></tbody></table></div><p><code>MRG_MYISAM</code>索引和数据是单独存放的；<code>InnoDB</code>数据和索引是放在一个文件（所以用户不设置主键，<code>InnoDB</code>也会默认主键）</p><p><code>MyISAM</code> 不支持事务、也不支持外键，索引采用非聚集索引，其优势是访问的速度快，对事务完整性没<br>有要求，以 <code>SELECT</code>、<code>INSERT</code> 为主的应用基本上都可以使用这个存储引擎来创建表。<code>MyISAM</code>的表在磁<br>盘上存储成 3 个文件，其文件名都和表名相同，扩展名分别是：<br><code>.frm</code>（存储表定义）<br><code>.MYD</code>（<code>MYData</code>，存储数据）<br><code>.MYI</code>（<code>MYIndex</code>，存储索引）</p><p><code>InnoDB</code> 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全，支持自动增长列，外键等功能，<br>索引采用聚集索引，索引和数据存储在同一个文件，所以<code>InnoDB</code>的表在磁盘上有两个文件，其文件名<br>都和表名相同，扩展名分别是：<br><code>.frm</code>（存储表的定义）<br><code>.ibd</code>（存储数据和索引）</p><p><code>MEMORY</code> 存储引擎使用存在内存中的内容来创建表。每个<code>MEMORY</code> 表实际只对应一个磁盘文件，格式<br>是<code>.frm</code>（表结构定义）。<code>MEMORY</code> 类型的表访问非常快，因为它的数据是放在内存中的，并且<strong>默认使用</strong> <code>HASH 索引</code>（不适合做范围查询），但是一旦服务关闭，表中的数据就会丢失掉。</p><p><strong>各存储引擎区别</strong></p><div class="table-container"><table><thead><tr><th>种类</th><th>锁机制</th><th>B-树索引</th><th>哈希索引</th><th>外键</th><th>事务</th><th>索引缓存</th><th>数据缓存</th></tr></thead><tbody><tr><td>MyISAM</td><td>表锁</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>行锁</td><td>支持</td><td>不支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Memory</td><td>表锁</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>支持</td></tr></tbody></table></div><p>锁机制：表示数据库在并发请求访问的时候，多个事务在操作时，并发操作的粒度。<br>B-树索引和哈希索引：主要是加速SQL的查询速度。<br>外键：子表的字段依赖父表的主键，设置两张表的依赖关系。<br>事务：多个SQL语句，保证它们共同执行的原子操作，要么成功，要么失败，不能只成功一部分，失败需要回滚事务。<br>索引缓存和数据缓存：和MySQL Server的查询缓存相关，在没有对数据和索引做修改之前，重复查询可以不用进行磁盘I/O（数据库的性能提升，目的是为了减少磁盘I/O操作来提升数据库访问效率），读取上一次内存中查询的缓存就可以了。</p><hr><h2 id="5-索引"><a href="#5-索引" class="headerlink" title="5.索引"></a>5.索引</h2><p>当表中的数据量到达几十万甚至上百万的时候，SQL查询所花费的时间会很长，导致业务超时出错，此时就需要用索引来加速SQL查询。<br>由于索引也是需要存储成索引文件的，因此对索引的使用也会涉及磁盘I/O操作。如果索引创建过多，使用不当，会造成SQL查询时，进行大量无用的磁盘I/O操作，降低了SQL的查询效率，适得其反，因此掌握良好的索引创建原则非常重要！<br><strong>索引的优点</strong>： 提高查询效率<br><strong>索引的缺点</strong>： 索引并非越多越好，过多的索引会导致CPU使用率居高不下，由于数据的改变，会造成索<br>引文件的改动，过多的磁盘I/O造成CPU负荷太重</p><blockquote><p>以下情况无法使用到索引，like通配符在最左，not in,!=,&lt;&gt;,对列做函数运算，隐式数据类型转换，OR子句</p></blockquote><h3 id="5-1索引分类"><a href="#5-1索引分类" class="headerlink" title="5.1索引分类"></a>5.1索引分类</h3><p>物理上：聚集索引&amp;非聚集索引<br>逻辑上：<br>1、普通索引：没有任何限制条件，可以给任何类型的字段创建普通索引(创建新表&amp;已创建表，数量是不限的，一张表的一次sql查询只能用一个索引 where a=1 and b=’M’)<br>2、唯一性索引：使用UNIQUE修饰的字段，值不能够重复，主键索引就隶属于唯一性索引<br>3、主键索引：使用Primary Key修饰的字段会自动创建索引(InnoDB)<br>4、单列索引：在一个字段上创建索引<br>5、多列索引：在表的多个字段上创建索引 (uid+cid，多列索引必须使用到第一个列（只用uid也可以），才能用到多列索引，否则索引用不上)<br>6、全文索引：使用FULLTEXT参数可以设置全文索引，只支持CHAR，VARCHAR和TEXT类型的字段上，常用于数据量较大的字符串类型上，可以提高查询速度(线上项目支持专门的搜索功能，给后台服务器增加专门的搜索引擎支持快速高校的搜索 elasticsearch 简称es C++开源的搜索引擎 搜狗的workflow)</p><h3 id="5-2索引创建、删除和执行过程"><a href="#5-2索引创建、删除和执行过程" class="headerlink" title="5.2索引创建、删除和执行过程"></a>5.2索引创建、删除和执行过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 创建表的时候指定索引字段</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> index1(id <span class="type">INT</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">sex ENUM(<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">INDEX `index_name`(id,name)); # 没有 `index_name`会默认设置 通过<span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span>查看</span><br><span class="line"> </span><br><span class="line"># 在已经创建的表上添加索引</span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] INDEX 索引名 <span class="keyword">ON</span> 表名（属性名（length） [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]);</span><br><span class="line"></span><br><span class="line"># 删除索引:</span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名 <span class="keyword">ON</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span>: student</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` tinyint(<span class="number">3</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` enum(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;W&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`uid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p><code>explain select * from student where uid=3;</code></p><div class="table-container"><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>student</td><td>NULL</td><td>const</td><td>PRIMARY</td><td>PRIMARY</td><td>4</td><td>const</td><td>1</td><td>100.00</td><td>NULL</td></tr></tbody></table></div><p><code>explain select * from student where name=&#39;zl&#39;;</code></p><div class="table-container"><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>student</td><td>NULL</td><td>ALL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>5</td><td>20.00</td><td>Using where</td></tr></tbody></table></div><p> <code>create index nameidx on stu dent(name);</code></p><div class="table-container"><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>student</td><td>NULL</td><td>ref</td><td>nameidx</td><td>nameidx</td><td>152</td><td>const</td><td>1</td><td>100.00</td><td>NULL</td></tr></tbody></table></div><p>1.经常作为where条件过滤的字段考虑添加索引</p><p>2.字符串列创建索引时，尽量规定索引的长度，而不能让索引值的长度key_len过长</p><p>3.索引字段涉及类型强转、mysql函数调用、表达式计算等，索引就用不上了</p><p><code>select * from t_user where password=100000</code>，这样写其中假设<code>password</code>有索引且是<code>varchar</code>类型，这里触发强转，无法使用索引</p><h3 id="5-3索引的底层实现原理"><a href="#5-3索引的底层实现原理" class="headerlink" title="5.3索引的底层实现原理"></a>5.3索引的底层实现原理</h3><blockquote><p>数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘块（对应索引树的节点），索引树越低，越“矮胖”，磁盘IO次数就少</p></blockquote><p>MySQL支持两种索引，一种的B(balance)-树索引（但实际上MySQL采用的是B+树结构），一种是哈希索引<br>B-树是一种m阶平衡树，叶子节点都在同一层，由于每一个节点存储的数据量比较大，索引整个B-树的层数是非常低的，基本上不超过三层。<br>由于磁盘的读取也是按block块操作的（内存是按page页面操作的），因此B-树的节点大小一般设置为和磁盘块大小一致，这样一个B-树节点，就可以通过一次磁盘I/O把一个磁盘块的数据全部存储下来，所以当使用B-树存储索引的时候，磁盘I/O的操作次数是最少的（MySQL的读写效率，主要集中在磁盘I/O上）。</p><p>select * from student where uid=5;<br>uid有索引=》存储引摩=》kernel=》磁盘IO(读索引文件)=》内存上 =》用索引的数据构建树B树加速搜索</p><p>看B-树和B+树在存储结构上的不同：</p><ol><li>B-树的每一个节点，存了关键字和对应的数据地址，而B+树的非叶子节点只存关键字，不存数据地址。因此B+树的每一个非叶子节点存储的关键字是远远多于B-树的，B+树的叶子节点存放关键字和数据，因此，从树的高度上来说，B+树的高度要小于B-树，使用的磁盘I/O次数少，因此查询会更快一些。</li><li>B-树由于每个节点都存储关键字和数据，因此离根节点进的数据，查询的就快，离根节点远的数据，查询的就慢；B+树所有的数据都存在叶子节点上，因此在B+树上搜索关键字，找到对应数据的时间是比较平均的，没有快慢之分。</li><li>在B-树上如果做区间查找，遍历的节点是非常多的；B+树所有叶子节点被连接成了有序链表结 构，因此做整表遍历和区间查找是非常容易的。哈希索引当然是由哈希表实现的，哈希表对数据并不排序</li></ol><p>索引的原理：以<code>select * from student where uid = 3;</code>为例</p><p>mysql首先会查看<code>where</code>过滤的字段有无索引，有索引则通知操作系统内核加载该索引文件进入内存以b+树形式构建在内存当中</p><p><strong>聚集索引</strong></p><p><img src="https://s1.vika.cn/space/2023/03/27/e410db32e7d748f185af63065dac78cc" alt=""></p><p><strong>非聚集索引</strong> 索引和数据分开存放</p><p><img src="https://s1.vika.cn/space/2023/03/27/c415976a775d4ea2b27f79490bd1cc6a" alt=""></p><h3 id="5-4聚集和非聚集索引"><a href="#5-4聚集和非聚集索引" class="headerlink" title="5.4聚集和非聚集索引"></a>5.4聚集和非聚集索引</h3><p><strong>MyISAM</strong></p><p><strong>主键索引</strong></p><p>MyISAM引擎使用B+树作为索引结构，叶节点的data域存放的是数据记录的地址。下图是MyISAM主键索引的原理图：</p><p><img src="https://s1.vika.cn/space/2023/03/27/02c4c3e7d17b4068a469580621d9803d" alt=""></p><p><strong>辅助索引</strong></p><p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复，如果给其它字段创建辅助索引，结构图如下：</p><p><img src="https://s1.vika.cn/space/2023/03/27/1441737370ad48b5b5df8aedf0ef5e44" alt=""></p><p>根据上面两张图，首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p><p>可以看到，MyISAM存储引擎，索引结构叶子节点存储关键字和数据地址，也就是说索引关键字和数据没有在一起存放，体现在磁盘上，就是索引在一个文件存储，数据在另一个文件存储，例如一个user表，会在磁盘上存储三个文件 user.frm（表结构文件） user.MYD（表的数据文件） user.MYI（表的索引文件）。</p><p>MyISAM的索引方式也叫做<strong>非聚集索引</strong>。</p><p><strong>InnoDB</strong></p><p><strong>主键索引</strong></p><p>InnoDB存储引擎的主键索引，叶子节点中，索引关键字和数据是在一起存放的，如图：</p><p><img src="https://s1.vika.cn/space/2023/03/27/b7797ae6e7054c3888bbc046dc06c633" alt=""></p><p><strong>辅助索引</strong></p><p>InnoDB的辅助索引，叶子节点上存放的是索引关键字和对应的主键，如图</p><p><img src="https://s1.vika.cn/space/2023/03/27/7559f01d83ac4cfbb1b1f38b36cc88ce" alt=""></p><p>辅助索引的B+树，先根据关键字找到对应的主键，再去主键索引树上找到对应的行记录数据。从索引树上可以看到，InnoDB的索引关键字和数据都是在一起存放的，体现在磁盘存储上，例如创建一个user表，在磁盘上只存储两种文件，user.frm（存储表的结构），user.ibd（存储索引和数据）。</p><p>InnoDB的索引树叶节点包含了完整的数据记录，这种索引叫做<strong>聚集索引</strong>。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（区别于MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>搜索：哈希表0(1) 平衡树O(logn)</p><p>为什么InnoDB和MyISAM存储引擎不用哈希索引（Rocksdb支持）？</p><p>1、搜索的效率要好<br>2、磁盘I/O花费要少</p><p>哈希表不支持范围查询 ；没办法处理磁盘上的数据。加载到内存上构建高校的搜索数据结构，因为它没有办法减少磁盘O的次数，哈希索引在等值查询和in的场景有优势</p><p>InnoDB存储引擎监测到同样的二级索引不断被使用，那么它会根据这个二级索引，在内存上根据二级索引树(B+树)上的二级索引值，在内存上构建一个哈希索引，来加索搜索</p><p>自适应哈希索引本身的数据维护也是要耗费性能的，并不是说自适应哈希索引在任何情况下都会提升二级索引的查询性能！根据参数指标，来具体分析是否打开或者关闭自适应哈希索引！！！</p><p><img src="https://s1.vika.cn/space/2023/03/28/ca6ca8d3ca9d48b5b52863d8c295e91d" alt=""></p><h3 id="5-6-慢查询日志"><a href="#5-6-慢查询日志" class="headerlink" title="5.6 慢查询日志"></a>5.6 慢查询日志</h3><p>当你被问道：SQL和索的优化问题时，怎么切入？？？</p><p>流程：从什么地方能够获取哪些运行时间长，耗性能的sql，然后再用explain去分析它！</p><p>MySQL可以设置慢查询日志，当SQL执行的时间超过我们设定的时间，那么这些SQL就会被记录在慢查询日志当中，然后我们通过查看日志，用explain分析这些SQL的执行计划，来判定为什么效率低下，是没有使用到索引？还是索引本身创建的有问题？或者是索引使用到了，但是由于表的数据量太大，花费的时间就是很长，那么此时我们可以把表分成个小表，比如订单表按年份分成多个小表等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name       <span class="operator">|</span> <span class="keyword">Value</span>                                                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log      <span class="operator">|</span> OFF                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file <span class="operator">|</span> D:\mysql<span class="number">-5.7</span><span class="number">.35</span><span class="operator">-</span>winx64\data\DESKTOP<span class="operator">-</span>E3PHQF9<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;long%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br></pre></td></tr></table></figure><h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h2><h3 id="6-1事务概念"><a href="#6-1事务概念" class="headerlink" title="6.1事务概念"></a>6.1事务概念</h3><p>一个事务是由<strong>一条或者多条</strong>对数据库操作的SQL语句所组成的一个<strong>不可分割的单元</strong>，只有当事务中的所有操作都正常执行完了，整个事务才会被提交给数据库；如果有部分事务处理失败，那么事务就要回退到最初的状态，因此，事务要么<strong>全部执行成功</strong>，要么<strong>全部失败</strong>。</p><p>1、事务是一组SQL语句的执行，要么全部成功，要么全部失败，不能出现部分成功，部分失败的结果。保证事务执行的原子操作。<br>2、事务的所有SQL语句全部执行成功，才能提交（commit）事务，把结果写回磁盘上。<br>3、事务执行过程中，有的SQL出现错误，那么事务必须要回滚（rollback）到最初的状态。</p><p><strong>ACID特性</strong></p><p>每一个事务必须满足下面的4个特性：</p><p>事务的<strong>原子性</strong>（Atomic）：<br>事务是一个不可分割的整体，事务必须具有原子特性，及当数据修改时，要么全执行，要么全不执行，即不允许事务部分的完成。</p><p>事务的<strong>一致性</strong>（Consistency）：<br>一个事务执行之前和执行之后，数据库数据必须保持一致性状态。数据库的一致性状态必须由用户来负责，由并发控制机制实现。就拿网上购物来说，你只有让商品出库，又让商品进入顾客的购物车才能构成一个完整的事务。</p><p>事务的<strong>隔离性</strong>（Isolation）：<br>当两个或者多个事务并发执行时，为了保证数据的安全性，将一个事物内部的操作与其它事务的操作隔离起来，不被其它正在执行的事务所看到，使得并发执行的各个事务之间不能互相影响。（为了能够并发执行，涉及数据安全性&amp;一致性和并发效率）</p><p>事务的<strong>持久性</strong>（Durability）：<br>事务完成(commit)以后，DBMS保证它对数据库中的数据的修改是永久性的，即使数据库因为故障出错，也应该能够恢复数据！</p><p>ACD:是由mysql的<strong>redo log</strong>重做日志和<strong>undo log</strong>回滚日志机制来保证的<br>I:隔离性，是由mysql事务的锁机制来实现保证的</p><h3 id="6-2事务并发存在的问题"><a href="#6-2事务并发存在的问题" class="headerlink" title="6.2事务并发存在的问题"></a>6.2事务并发存在的问题</h3><p>事务处理不经隔离，并发执行事务时通常会发生以下的问题：</p><p><strong>脏读</strong>（Dirty Read）：一个事务读取了另一个事务未提交的数据。例如当事务A和事务B并发执行时，当事务A更新后，事务B查询读取到A尚未提交的数据，此时事务A回滚，则事务B读到的数据就是无效的脏数据。（事务B读取了事务A尚未提交的数据）</p><p><strong>不可重复读</strong>（NonRepeatable Read）：一个事务的操作导致另一个事务前后两次读取到不同的数据。例如当事务A和事务B并发执行时，当事务B查询读取数据后，事务A更新操作更改事务B查询到的数据，此时事务B再次去读该数据，发现前后两次读的数据不一样。（事务B读取了事务A已提交的数据）</p><p><strong>虚读</strong>（Phantom Read）幻读：一个事务的操作导致另一个事务前后两次查询的结果数据量不同。例如当事务A和事务B并发执行时，当事务B查询读取数据后，事务A新增或者删除了一条满足事务B查询条件的记录，此时事务B再去查询，发现查询到前一次不存在的记录，或者前一次查询的一些记录不见了。（事务B读取了事务A新增加的数据或者读不到事务A删除的数据）</p><h3 id="6-3事务的隔离级别"><a href="#6-3事务的隔离级别" class="headerlink" title="6.3事务的隔离级别"></a>6.3事务的隔离级别</h3><p>MySQL支持的四种隔离级别是：</p><p>1、<strong>TRANSACTION_READ_UNCOMMITTED</strong>。未提交读。说明在提交前一个事务可以看到另一个事务的变化。这样读脏数据，不可重复读和虚读都是被允许的。</p><p>2、<strong>TRANSACTION_READ_COMMITTED</strong>。已提交读。说明读取未提交的数据是不允许的。这个级别仍然允许不可重复读和虚读产生。</p><p>3、<strong>TRANSACTION_REPEATABLE_READ</strong>。可重复读。说明事务保证能够再次读取相同的数据而不会失败，但虚读仍然会出现。(事务有隔离性，所以其他用户在自己事务中修改的值是无法影响其它事务的)（可以防止insert 和 delete的幻读，无法防止update）</p><p>4、<strong>TRANSACTION_SERIALIZABLE</strong>。串行化。是最高的事务级别，它防止读脏数据，不可重复读和虚读。</p><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>可以</td><td>可以</td><td>可以</td></tr><tr><td>已提交读</td><td>不可以</td><td>可以</td><td>可以</td></tr><tr><td>可重复读</td><td>不可以</td><td>不可以</td><td>可以</td></tr><tr><td>串行化</td><td>不可以</td><td>不可以</td><td>不可以</td></tr></tbody></table></div><h3 id="6-4事务处理命令"><a href="#6-4事务处理命令" class="headerlink" title="6.4事务处理命令"></a>6.4事务处理命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>; # 查看MySQL是否自动提交事务 <span class="number">0</span>表示手动提交事务，<span class="number">1</span>表示自动提交事务</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@autocommit</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;# 开启一个事务</span><br><span class="line"><span class="keyword">COMMIT</span>;# 提交一个事务</span><br><span class="line"><span class="keyword">ROLLBACK</span>;# 回滚一个事务到初始的位置</span><br><span class="line"><span class="keyword">SAVEPOINT</span> point1;# 设置一个名字为ooint1的保存点</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> point1;# 事务回滚到保存点point1,而不是回滚到初始状态</span><br><span class="line"><span class="keyword">SET</span> TX_ISOLATION<span class="operator">=</span><span class="string">&#x27;REPEATABLE-READ&#x27;</span>;# 设置事务的隔离级别</span><br><span class="line"><span class="keyword">SELECT</span>@<span class="variable">@TX</span>_ISOLATION;# 查询事务的隔离级别</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@tx</span>_isolation  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span> #可以看到MySQL默认工作在可重复读级别</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br></pre></td></tr></table></figure><hr><h2 id="7锁机制"><a href="#7锁机制" class="headerlink" title="7锁机制"></a>7锁机制</h2><p>事务隔离级别的实现原理：锁+MVCC</p><h3 id="7-1表级锁-amp-行级锁"><a href="#7-1表级锁-amp-行级锁" class="headerlink" title="7.1表级锁&amp;行级锁"></a>7.1表级锁&amp;行级锁</h3><p>表级锁：对整张表加锁。开销小，加锁快，不会出现死锁；锁粒度大，发生锁冲突的概率高，并发度低。<br>行级锁：对某行记录加锁。开销大，加锁慢，会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度高。表级锁&amp;行级锁表示的是锁的粒度，有表级排它锁、共享锁和行级排它锁和共享锁。</p><h3 id="7-2排它锁和共享锁"><a href="#7-2排它锁和共享锁" class="headerlink" title="7.2排它锁和共享锁"></a>7.2排它锁和共享锁</h3><p>排它锁（Exclusive），又称为X 锁，写锁。<br>共享锁（Shared），又称为S 锁，读锁。<br>X和S锁之间有以下的关系：   SS可以兼容的，XS、SX、XX之间是互斥的</p><ul><li>一个事务对数据对象 O 加了 S 锁，可以对 O 进行读取操作但不能进行更新操作。加锁期间其它事务能对O 加 S 锁但不能加 X 锁。</li><li>一个事务对数据对象 O 加了 X 锁，就可以对 O 进行读取和更新。加锁期间其它事务不能对 O 加任何锁。</li><li>显示加锁：<code>select ... lock in share mode</code>强制获取共享锁，<code>select ... for update</code>获取排它锁</li></ul><p>InnoDB的行锁是加在索引项上面的，是给索引在加锁，并不是给单纯的行记录在加锁；所以如果过滤条件没有索引的话，使用的就是表锁。而不是行锁！</p><p><strong>悲观锁和乐观锁</strong></p><p>排它锁和共享锁是数据库中常用的两种锁机制，用于控制并发访问数据库的数据。悲观锁和乐观锁是两种不同的并发控制策略。</p><p>悲观锁（Pessimistic Lock）是一种悲观的并发控制策略，认为并发访问会导致数据冲突，因此在每次访问数据时都会加锁，避免其他事务对该数据进行修改。悲观锁适用于并发访问比较频繁的场景。</p><p>乐观锁（Optimistic Lock）是一种乐观的并发控制策略，认为并发访问不会导致数据冲突，因此在访问数据时不加锁，而是在更新数据时检查数据是否被其他事务修改过。如果数据被修改过，则更新失败，需要重新读取数据并尝试更新。乐观锁适用于并发访问比较少的场景，可以提高系统的吞吐量和性能。</p><h3 id="7-3InnoDB行级锁"><a href="#7-3InnoDB行级锁" class="headerlink" title="7.3InnoDB行级锁"></a>7.3InnoDB行级锁</h3><p>行级锁<br>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB 会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)” ，InnoDB 也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。举例来说，假如 user 表中只有 101 条记录，其<br>userid 的值分别是 1,2,…,100,101，下面的 SQL：<br><code>select from user where userid &gt; 100 for update;</code><br>是一个范围条件的检索，InnoDB 不仅会对符合条件的 userid 值为 101 的记录加锁，也会对userid 大于 101（但是这些记录并不存在）的”间隙”加锁，防止其它事务在表的末尾增加数据。<br>InnoDB使用间隙锁的目的，为了防止幻读，以满足串行化隔离级别的要求，对于上面的例子，要是不使用间隙锁，如果其他事务插入了 userid 大于 100 的任何记录，那么本事务如果再次执行上述语句，就会发生幻读.</p><h3 id="7-4间隙锁"><a href="#7-4间隙锁" class="headerlink" title="7.4间隙锁"></a>7.4间隙锁</h3><p> 串行化使用间隙锁解决幻读问题<br> <code>select * from xxx where 指定条件</code> 根据指定条件的查询产生幻读可以分为范围查询和等值查询<br> <code>record lock</code>：行锁<br> <code>gap lock</code>：间隙锁<br> <code>next-key lock</code>：<code>record lock</code> +  <code>gap lock</code></p><p><img src="https://s1.vika.cn/space/2023/03/31/9f6efad7005a40cb9efe51a8eb12959a" alt=""><br>范围查询<br><img src="https://s1.vika.cn/space/2023/03/31/d380c5d3dc49460ab9ace2e3eda3d608" alt=""><br>等值查询<br><img src="https://s1.vika.cn/space/2023/03/31/c0356daa1ad74ae8bed9f07301069812" alt=""></p><p>age是辅助索引可以重复</p><h3 id="7-5意向共享锁和意向排他锁"><a href="#7-5意向共享锁和意向排他锁" class="headerlink" title="7.5意向共享锁和意向排他锁"></a>7.5意向共享锁和意向排他锁</h3><blockquote><p>用途：要获取一张表的共享锁S或者排它锁X,最起码得确定，这张表没有被其它事务获取过X锁</p><p>这张表(1干万)里面得数据没有被其它事务获取过行锁X锁，有意向锁就不需要去遍历每行数据是否加锁了</p></blockquote><p>意向共享锁（IS锁）：事务计划给记录加行共享锁，事务在给一行记录加共享锁前，必须先取得该表的 IS 锁。<br>意向排他锁（IX锁）：事务计划给记录加行排他锁，事务在给一行记录加排他锁前，必须先取得该表的 IX 锁。</p><div class="table-container"><table><thead><tr><th></th><th>X</th><th>IX</th><th>S</th><th>IS</th></tr></thead><tbody><tr><td>X</td><td>conflict</td><td>conflict</td><td>conflict</td><td>conflict</td></tr><tr><td>IX</td><td>conflict</td><td>兼容</td><td>conflict</td><td>兼容</td></tr><tr><td>S</td><td>conflict</td><td>conflict</td><td>兼容</td><td>兼容</td></tr><tr><td>IS</td><td>conflict</td><td>兼容</td><td>兼容</td><td>兼容</td></tr></tbody></table></div><p>1、意向锁是由InnoDB存储引擎获取行锁之前自己获取的<br>2、意向锁之间都是兼容的，不会产生冲突<br>3、意向锁存在的意义是为了<strong>更高效的获取表锁</strong>（表格中的X和S指的是<strong>表锁</strong>，不是行锁！！！）<br>4、意向锁是表级锁，协调表锁和行锁的共存关系。主要目的是显示事务正在锁定某行或者试图锁定某行。</p><p>当要获取表得X锁时，不需要再检查表中的哪些行锁被(X或者S)占用，只需要快速检查X和S锁即可！</p><h3 id="7-6InnoDB表级锁"><a href="#7-6InnoDB表级锁" class="headerlink" title="7.6InnoDB表级锁"></a>7.6InnoDB表级锁</h3><p>在绝大部分情况下都应该使用行锁，因为事务和行锁往往是选择InnoDB的理由，但个别情况下也使用表级锁；<br>1）事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间等待和锁冲突；<br>2）事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。<br>如：<br>LOCK TABLE user READ；读锁锁表<br>LOCK TABLE user WRITE; 写锁锁表</p><p>事务执行…<br>COMMIT/ROLLBACK; 事务提交或者回滚<br>UNLOCK TABLES; 本身自带提交事务，释放线程占用的所有表锁 </p><h3 id="7-7死锁"><a href="#7-7死锁" class="headerlink" title="7.7死锁"></a>7.7死锁</h3><p>MyISAM 表锁是 deadlock free 的， 这是因为 MyISAM 总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁。但在 InnoDB 中，除单个 SQL 组成的事务外，锁是逐步获得的，即锁的粒度比较小，这就决定了在 InnoDB 中发生死锁是可能的。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_dead_lock <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line">ERROR <span class="number">1213</span> (<span class="number">40001</span>): Deadlock found <span class="keyword">when</span> trying <span class="keyword">to</span> <span class="keyword">get</span> lock; try restarting transaction</span><br></pre></td></tr></table></figure></p><p>1.尽量使用较低的隔离级别</p><p>2.设计合理的索引并尽量使用索引访问数据，使加锁更加准确，减少锁冲突的机会提高并发能力</p><p>3.选择合理的事务大小，小事务发生锁冲突的概率小</p><p>4.不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序</p><p>存取表中的行。这样可以大大减少死锁的机会</p><p>5.尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响</p><p>6.不要申请超过实际需要的锁级别</p><p>7.除非必须，查询时不要显示加锁 </p><h2 id="8-MVCC多版本并发控制"><a href="#8-MVCC多版本并发控制" class="headerlink" title="8.MVCC多版本并发控制"></a>8.MVCC多版本并发控制</h2><p>MVCC是多版本并发控制（Multi-Version Concurrency Control，简称MVCC），是MySQL中基于乐观锁理论实现隔离级别的方式，用于实现已提交读和可重复读隔离级别的实现，也经常称为多版本数据库。MVCC机制会生成一个数据请求时间点的一致性数据快照 （Snapshot)， 并用这个快照来提供一定级别 （语句级或事务级） 的一致性读取。从用户的角度来看，好象是数据库可以提供同一数据的多个版本（系统版本号和事务版本号）。（已提交读和可重复读的底层实现原理）</p><p>Innodb提供了两个读取操作：锁定读(S和X)和非锁定读MVCC提供的快照读=》依赖底层的一个技术=》undo log回滚日志</p><p>undo log回滚日志的注要作用：<br>1、事务发生错误时回滚rollback<br>2、提供了MVCC的非锁定读（快照读）</p><p><img src="https://s1.vika.cn/space/2023/03/31/eb8da3dcd00c4ae19129f7bc58d4d6bd" alt=""></p><p>MVCC多版本并发控制中，读操作可以分为两类：<br>1、快照读（snapshot read）<br>读的是记录的可见版本，不用加锁。如select<br>2、当前读（current read）<br>读取的是记录的最新版本，并且当前读返回的记录。如insert，delete，update，select…lock in share mode/for update<br>MVCC：每一行记录实际上有多个版本，每个版本的记录除了数据本身之外，增加了其它字段<br>DB_TRX_ID：记录当前事务ID<br>DB_ROLL_PTR：指向undo log日志上数据的指针<br><strong>已提交读</strong>：每次执行语句的时候都重新生成一次快照（Read View），每次select查询时。 </p><blockquote><p>已提交读解决了脏读的问题，已提交读通过非锁定读实现，非锁定读是通过MVCC提供的快照读实现的。快照读是事务每一次select都会把查询到的数据拍个快照，这个数据必须是commit而不是prepare的。所以可以解决脏读，但不能解决不可重复读，因为读取的数据已经被其他事务commit了，幻读也是同理，数据已经被其他事务commit了</p></blockquote><p><strong>可重复读</strong>：同一个事务开始的时候生成一个当前事务全局性的快照（Read View），第一次select查询时。（第一次select产生数据快照，而且只产生一次 ），所以可以防止不可重复读；但无法防止幻读，即事务A select后建立快照，事务B插入了和事务A过滤信息相关的数据，这时事务A直接更新该条数据（当前事务是可以看见自己事务修改、更新的数据的）再进行select后会出现该数据<br><strong>快照内容读取原则</strong>：<br>1、版本未提交无法读取生成快照<br>2、版本已提交，但是在快照创建后提交的，无法读取<br>3、版本已提交，但是在快照创建前提交的，可以读取<br>4、当前事务内自己的更新，可以读到</p><h2 id="9-redo-log和undo-log"><a href="#9-redo-log和undo-log" class="headerlink" title="9.redo log和undo log"></a>9.redo log和undo log</h2><h3 id="9-1redo-log"><a href="#9-1redo-log" class="headerlink" title="9.1redo log"></a>9.1redo log</h3><p>redo log：重做日志，用于记录事务操作的变化，确保事务的持久性。redo log是在事务开始后就开始记录，不管事务是否提交都会记录下来，在异常发生时（如数据持久化过程中掉电），InnoDB会使用redo log恢复到掉电前的时刻，保证数据的完整性。<br><img src="https://s1.vika.cn/space/2023/04/02/6263283dfd1b4782a499278fdc0f8adc" alt=""></p><p>undo log 是一种回滚日志，用于记录数据修改的撤销操作。当执行一个事务时，InnoDB 会将事务修改的原始数据记录到 undo log 中。如果事务需要回滚，InnoDB 可以通过 undo log 恢复原始数据。undo log 通常记录在回滚段（rollback segment）中，因此可以支持长事务和多版本并发控制。</p><p>redo log 主要用于恢复数据库的一致性，保证数据的持久性。undo log 主要用于实现事务的回滚和 MVCC 功能，保证数据的隔离性和一致性。两者都是 InnoDB 存储引擎保证事务 ACID 特性的重要技术。</p><p>当事务提交时，InnoDB 会先将 redo log 写入磁盘，然后再将数据写入磁盘，这样可以确保数据的持久性。如果系统崩溃或者重启，InnoDB 会通过重做日志将数据恢复到事务提交时的状态，然后再通过 undo log 回滚未提交的事务。这样可以保证数据的一致性和完整性，从而实现高效的事务管理。</p><p><code>innodb_log_buffer_size</code>默认是16M，就是redo log缓冲区的大小，它随着事务开始，就开始写redolog，如果事务比较大，为了避免事务执行过程中花费过多磁盘IO，可以设置比较大的redo log缓存，节省磁盘IO。<br>InnoDB修改操作数据，不是直接修改磁盘上的数据，实际只是修改Buffer Pool中的数据。InnoDB总是先把Buffer Pool中的数据改变记录到redo log中，用来进行崩溃后的数据恢复。 优先记录redo log，然后再慢慢的将Buffer Pool中的脏数据刷新到磁盘上。<br>innodb_log_group_home_dir指定的目录下的两个文件：ib_logfile0，ib_logfile1，该文件被称作重做日志。<br>buffer pool缓存池：<br>作用：加速读和加速写，直接操作data page，写redo log修改就算完成，有专门的线程去做把buffer pool中的dirty page写入磁盘。<br><img src="https://s1.vika.cn/space/2023/04/02/0567fda77ce042bfaac6d708c69e9b81" alt=""></p><h3 id="9-2undo-log"><a href="#9-2undo-log" class="headerlink" title="9.2undo log"></a>9.2undo log</h3><p>undo log：回滚日志，保存了事务发生之前的数据的一个版本，用于事务执行时的回滚操作，同时也是实现多版本并发控制（MVCC）下读操作的关键技术。</p><h2 id="10-MySQL优化"><a href="#10-MySQL优化" class="headerlink" title="10.MySQL优化"></a>10.MySQL优化</h2><p><img src="https://s1.vika.cn/space/2023/04/02/74fdc47da05f4f57bb64edfb14670589" alt=""></p><h3 id="10-1SQL和索引优化"><a href="#10-1SQL和索引优化" class="headerlink" title="10.1SQL和索引优化"></a>10.1SQL和索引优化</h3><h3 id="10-2应用优化"><a href="#10-2应用优化" class="headerlink" title="10.2应用优化"></a>10.2应用优化</h3><p>除了优化SQL和索引，很多时候，在实际生产环境中，由于数据库服务器本身的性能局限，就必须要对上层的应用来进行一些优化，使得上层应用访问数据库的压力能够减到最小。</p><p><strong>连接池</strong></p><p>应用上一般访问数据库，都是先和MySQL Server创建连接，然后发送SQL语句，Server处理完成后，再把结果通过网络返回给应用，然后关闭和MySQL Server的连接，因此短时间大量的数据库访问，消耗的TCP三次握手和四次挥手所花费的时间就很大了，稍微大一点的项目，我们都会在应用访问数据库的那一层上，添加连接池模块，相当于应用和MySQL Server事先创建一组连接，当应用需要请求MySQL Server时，不需要再进行TCP连接和释放连接了，一般连接池都会维护以下资源：</p><p>1、连接池里面保持固定数量的活跃TCP连接，供应用使用。</p><p>2、如果应用瞬间访问MySQL的量比较大，那么连接池会实时创建更多的连接给应用使用。</p><p>3、当连接池里面的TCP连接一段时间内没有被用到，连接池会释放多余的连接资源，保留它设置的最大空闲连接量就可以了。连接池可以自己实现，也可以用第三方写好的库。</p><p><strong>增加cache缓存层</strong></p><p>业务上增加redis、memcache，一般用缓存把经常访问的数据缓存起来。</p><h3 id="10-3MySQL-Server优化"><a href="#10-3MySQL-Server优化" class="headerlink" title="10.3MySQL Server优化"></a>10.3MySQL Server优化</h3><p>对于MySQL Server端的优化，主要指的就是MySQL Server启动时加载的配置文件的配置项内容的优化（就是那个my.ini或者my.cnf），下面我们看看它的配置文件中有哪些是我们需要重点关注的优化参数。</p><p><strong>MySQL查询缓存</strong></p><p>MySQL的查询缓存是把select查询语句上一次的查询结果记录下来放在缓存当中，下一次再查询相同内容的时候，直接从缓存中取出来就可以了，不用再进行一遍真正的SQL查询。但是当两个select查询中间出现insert，update，delete语句的时候，查询缓存就会被清空。查询缓存适用更新不频繁的表，因为当表更新频繁的话，查询缓存也总是被清空，过多的查询缓存的数据添加和删除，就会影响MySQL的执行效率，还不如每次都从磁盘上查来得快（缓存指的就是一块内存，内存I/O比磁盘I/O快很多）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%query_cache%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> have_query_cache <span class="operator">|</span> YES <span class="operator">|</span> 表示MySQL Server是否支持查询缓存，此处</span><br><span class="line">YES为支持！</span><br><span class="line"><span class="operator">|</span> query_cache_limit <span class="operator">|</span> <span class="number">1048576</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query_cache_min_res_unit <span class="operator">|</span> <span class="number">4096</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query_cache_size <span class="operator">|</span> <span class="number">1048576</span> <span class="operator">|</span> 表示查询缓存的大小，单位为M</span><br><span class="line"><span class="operator">|</span> query_cache_type <span class="operator">|</span> OFF <span class="operator">|</span> 表示目前查询缓存目前未开启</span><br><span class="line"><span class="operator">|</span> query_cache_wlock_invalidate <span class="operator">|</span> OFF <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+---------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>通过show status命令，可以查看MySQL查询缓存的使用状况，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Qcache%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Qcache_free_blocks <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 查询缓存中的空闲内存块的数目</span><br><span class="line"><span class="operator">|</span> Qcache_free_memory <span class="operator">|</span> <span class="number">1031832</span> <span class="operator">|</span> 查询缓存的空闲内存总数</span><br><span class="line"><span class="operator">|</span> Qcache_hits <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Qcache_inserts <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> 被加入到缓存中的查询数目</span><br><span class="line"><span class="operator">|</span> Qcache_lowmem_prunes <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> 因为缺少内存而被从缓存中删除的查询数目</span><br><span class="line"><span class="operator">|</span> Qcache_not_cached <span class="operator">|</span> <span class="number">170</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Qcache_queries_in_cache <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> 在缓存中已注册的查询数目</span><br><span class="line"><span class="operator">|</span> Qcache_total_blocks <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 查询缓存中的块的总数目</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+---------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以通过set命令设置上面的缓存参数开启MySQL查询缓存功能，也可以找到MySQL的配置文件（windows是my.ini，linux是my.cnf），修改query_cache_type参数为1就可以了，然后重启MySQLServer就可以使用了，如下：</p><p><code>query_cache_type=1</code></p><p><code>query_cache_size=10</code></p><p>修改完成，重启MySQL Server，查询缓存生效。</p><p><strong>索引和数据缓存</strong></p><p>主要指的就是innodb_buffffer_pool_size配置项，从名字上就能看到，该配置项是针对InnoDB存储引擎起作用的，这个参数定义了InnoDB 存储引擎的表数据和索引数据的最大内存缓冲区大小。innodb_buffffer_pool_size是同时为数据块和索引块做缓存，这个值设得越高，访问表中数据需要的磁盘 I/O 就越少。</p><p><code>innodb_buffer_pool_size=512M</code></p><p><strong>MySQL线程缓存</strong></p><p>主要指配置文件中thread_cache_size配置项。给大家讲过MySQL Server网络模块采用经典的I/O复用+线程池模型，之所以引入线程池，主要就是为了在业务执行的过程中，不会因为临时创建和销毁线程，造成系统性能降低，因为线程的创建和销毁是很耗费性能的，所以线程池就是在业务使用之前，先创建一组固定数量的线程，等待事件发生，当有SQL请求到达MySQL Server的时候，在线程池中取一个线程来执行该SQL请求就可以了，执行完成后，不销毁线程，而是把线程再归还到线程池中，等待下一次任务的处理（MySQL会根据连接量，自动加大线程池的数量）。</p><p><code>thread_cache_size=10</code></p><p>配置完thread_cache_size，重启MySQL Server服务生效。</p><p><strong>并发连接数量和超时时间</strong></p><p>MySQL Server作为一个服务器，可以设置客户端的最大连接量和连接超时时间，如果数据库连接统计数量比较大，这两个参数的值需要设置大一些。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%connect%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> character_set_connection <span class="operator">|</span> utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> collation_connection <span class="operator">|</span> utf8_general_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> connect_timeout <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> disconnect_on_expired_password <span class="operator">|</span> <span class="keyword">ON</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init_connect <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_connect_errors <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_connections <span class="operator">|</span> <span class="number">151</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_user_connections <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema_session_connect_attrs_size <span class="operator">|</span> <span class="number">512</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+-----------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在配置文件（my.cnf或my.ini）最下面，添加配置：max_connections=2000，然后重启MySQLServer，设置生效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%timeout%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> connect_timeout <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> delayed_insert_timeout <span class="operator">|</span> <span class="number">300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> have_statement_timeout <span class="operator">|</span> YES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_flush_log_at_timeout <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_lock_wait_timeout <span class="operator">|</span> <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_rollback_on_timeout <span class="operator">|</span> OFF <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> interactive_timeout <span class="operator">|</span> <span class="number">28800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> lock_wait_timeout <span class="operator">|</span> <span class="number">31536000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> net_read_timeout <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> net_write_timeout <span class="operator">|</span> <span class="number">60</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> rpl_stop_slave_timeout <span class="operator">|</span> <span class="number">31536000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave_net_timeout <span class="operator">|</span> <span class="number">60</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wait_timeout <span class="operator">|</span> <span class="number">28800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+----------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>MySQL Server对于超时未通信的连接，进行主动关闭操作。设置超时时间，超过设置时间没有请求就主动断开，单位是秒，在配置文件中添加配置：<code>wait_timeout = 600</code>。</p><h2 id="11-MySQL日志"><a href="#11-MySQL日志" class="headerlink" title="11.MySQL日志"></a>11.MySQL日志</h2><blockquote><p>redo log 和 undo log 是事务日志 </p></blockquote><p><img src="https://s1.vika.cn/space/2023/04/03/a2627f8bb9e949b8ace5ec6fa834053e" alt=""></p><p><strong>错误日志</strong></p><blockquote><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><p>mysqld 使用错误日志名 host_name.err(host_name 为主机名) 并默认在参数 DATADIR(数据目录)指定的目录中写入日志文件。</p></blockquote><p><strong>查询日志</strong></p><blockquote><p>查询日志记录了客户端的所有语句。由于上线项目sql特别多，开启查询日志IO太多导致MySQL效率低，只有在调试时才开启，比如通过查看sql发现热点数据进行缓存。</p></blockquote><p><strong>二进制日志</strong></p><blockquote><p>二进制日志(BINLOG)记录了所有的 DDL(数据定义语言)语句和 DML(数据操纵语言) 语句，但是不包括数据查询语句(select)。语句以“事件”的形式保存，它描述了数据的更改过程。 此日志对于灾难时的数据恢复起着极其重要的作用。</p></blockquote><p><strong>两个重要的应用场景：主从复制、数据恢复</strong></p><p>查看binlog：mysql&gt; show binary logs;</p><p>通过mysqlbinlog工具（mysql原生自带的工具）可以快速解析大量的binlog日志文件，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">mysqlbinlog --no-defaults --database=school --base64-output=decode-rows -v --start-datetime=<span class="string">&#x27;2021-05-01 00:00:00&#x27;</span> --stop-datetime=<span class="string">&#x27;2021-05-10 00:00:00&#x27;</span></span></span><br><span class="line">mysql-bin.000001 | more</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用二进制日志恢复数据</span></span><br><span class="line">mysqlbinlog --start-position=775 --stop-position=1410 mysql-bin.000003 | mysql-u root -p</span><br></pre></td></tr></table></figure><p><strong>慢查询日志</strong></p><blockquote><p>MySQL可以设置慢查询日志，当SQL执行的时间超过我们设定的时间，那么这些SQL就会被记录在慢查询日志当中，然后我们通过查看日志，用explain分析这些SQL的执行计划，来判定为什么效率低下，是没有使用到索引？还是索引本身创建的有问题？或者是索引使用到了，但是由于表的数据量太大，花费的时间就是很长，那么此时我们可以把表分成n个小表，比如订单表按年份分成多个小表等。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log <span class="operator">|</span> OFF <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file <span class="operator">|</span> <span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>mysql<span class="operator">/</span>data<span class="operator">/</span>LeideMacBook<span class="operator">-</span>Pro<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>慢查询日志记录了包含所有执行时间超过参数 long_query_time（单位：秒）所设置值的 SQL语句的日志，在MySQL上用命令可以查看，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;long%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这个值是可以修改的，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> long_query_time <span class="operator">=</span> <span class="number">1</span>; #注意，单位是秒</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>mysqldump</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p mytest user ~/user.sql</span><br></pre></td></tr></table></figure><h2 id="12-SQL详细处理流程"><a href="#12-SQL详细处理流程" class="headerlink" title="12.SQL详细处理流程"></a>12.SQL详细处理流程</h2><p><img src="https://s1.vika.cn/space/2023/04/03/4e113c37c9e8478e8703e6b435b3e2dc" alt=""></p><ol><li>客户端请求-&gt;</li><li>连接器（验证用户身份，给予权限） -&gt;</li><li>查询缓存（存在缓存则直接返回，不存在则执行后续操作）-&gt;</li><li>分析器（对SQL进行词法分析和语法分析操作） -&gt; </li><li>优化器（主要对执行的sql优化选择最优的执行方案方法） -&gt; </li><li>执行器（执行时会先看用户是否有执行权限，有才去使用这个引擎提供的接口）-&gt;</li><li>去引擎层获取数据返回（如果开启查询缓存则会缓存查询结果）</li></ol><p><strong>连接器</strong>：管理连接，权限验证</p><p><strong>解析器</strong>：词法以及语法分析</p><p><strong>优化器</strong>：生成执行计划，选择合适索引</p><p><strong>执行器</strong>：操作引擎获取结果</p><p><strong>存储引擎</strong>：存储数据，提供读写接口</p><h2 id="13-MySQL集群"><a href="#13-MySQL集群" class="headerlink" title="13.MySQL集群"></a>13.MySQL集群</h2><p>在实际生产环境中，如果对mysql数据库的读和写都在一台数据库服务器中操作，无论是在安全性、高可用性，还是高并发等各个方面都是不能满足实际需求的，一般要通过主从复制的方式来同步数据，再通过读写分离来提升数据库的并发负载能力。</p><p>1、数据备份 - 热备份&amp;容灾&amp;高可用</p><p>2、读写分离，支持更大的并发</p><p><img src="https://s1.vika.cn/space/2023/04/07/a1936973609844f18363261c01b5f183" alt=""></p><h3 id="13-1-主从复制"><a href="#13-1-主从复制" class="headerlink" title="13.1 主从复制"></a>13.1 主从复制</h3><p><img src="https://s1.vika.cn/space/2023/04/07/d0ee3de1a22248aab40cb63df41ae119" alt=""></p><p>主从复制的流程：两个日志（binlog二进制日志&amp;relay log日志）和三个线程（master的一个线程和</p><p>slave的二个线程）</p><p>1、主库的更新操作写入binlog二进制日志中。</p><p>2、master服务器创建一个binlog转储线程，将二进制日志内容发送到从服务器。</p><p>3、slave机器执行START SLAVE命令会在从服务器创建一个IO线程，接收master的binary log复制到其中继日志 。<br>​    首先slave开始一个工作线程（I/O线程），I/O线程在master上打开一个普通的连接，然后开始binlog dump process，binlog dump process从master的二进制日志中读取事件，如果已经跟上master，它会睡眠并等待master产生新的事件，I/O线程将这些事件写入中继日志。</p><p>4、sql slave thread（sql从线程）处理该过程的最后一步，sql线程从中继日志中读取事件，并重放其中的事件而更新slave机器的数据，使其与master的数据一致。只要该线程与I/O线程保持一致，中继日志通常会位于os缓存中，所以中继日志的开销很小。</p><p><strong>配置命令</strong></p><p>条件：master和slave机器的信息master（centos7）：192.168.131.129</p><p>slave（win10）：192.168.0.6</p><p>保证master和slave之间的网络互通，并且保证3306端口是开放的。</p><p>master配置：</p><p>1、开启二进制日志</p><p>配置log_bin和全局唯一的server-id。</p><p>2、创建一个用于主从库通信用的账号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;mslave&#x27;</span>@<span class="string">&#x27;192.168.131.1&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;1qaz@WSX&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;mslave&#x27;</span>@<span class="string">&#x27;192.168.131.1&#x27;</span> IDENTIFIED <span class="keyword">BY</span></span><br><span class="line"><span class="string">&#x27;1qaz@WSX&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>3、获取binlog的日志文件名和position</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p>slave配置：</p><p>1、配置全局唯一的server-id（涉及修改配置文件，需要重启mysql57服务）</p><p>2、使用master创建的账户读取binlog同步数据（stop slave；start slave）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.131.129&#x27;</span>,</span><br><span class="line">MASTER_PORT<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;mslave&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;1qaz@WSX&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000006&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS<span class="operator">=</span><span class="number">1106</span>;</span><br></pre></td></tr></table></figure><p>3、START SLAVE</p><p>通过show slave status命令查看主从复制状态。show processlist查看master和salve相关线程的运行</p><p>状态。</p><h3 id="13-2-读写分离"><a href="#13-2-读写分离" class="headerlink" title="13.2 读写分离"></a>13.2 读写分离</h3><p>读写分离就是在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，以及提升了服务器安全。</p><p><img src="https://s1.vika.cn/space/2023/04/07/2acaf770cfb541d0adde49f7249f47d9" alt=""></p><p>目前较为常见的MySQL读写分离方式有：</p><ol><li>程序代码内部实现</li><li>引入中间代理层<ul><li>MySQL_proxy</li><li>Mycat</li></ul></li></ol><h2 id="14-MySQL分库分表"><a href="#14-MySQL分库分表" class="headerlink" title="14.MySQL分库分表"></a>14.MySQL分库分表</h2><h3 id="14-1数据库架构演变"><a href="#14-1数据库架构演变" class="headerlink" title="14.1数据库架构演变"></a>14.1数据库架构演变</h3><p>刚开始多数项目用单机数据库就够了，随着服务器流量越来越大，面对的请求也越来越多，我们做了数据库读写分离， 使用多个从库副本（Slave）负责读，使用主库（Master）负责写，master和slave通过主从复制实现数据同步更新，保持数据一致。slave 从库可以水平扩展，所以更多的读请求不成问题。</p><p>但是当用户量级上升，写请求越来越多，怎么保证数据库的负载足够？增加一个Master是不能解决问题的， 因为数据要保存一致性，写操作需要2个master之间同步，相当于是重复了，而且架构设计更加复杂。这时需要用到分库分表（sharding），对写操作进行切分。</p><p><strong>库表问题</strong></p><p><strong>单库太大</strong></p><p>单库处理能力有限、所在服务器上的磁盘空间不足、遇到IO瓶颈，需要把单库切分成更多更小的库</p><p><strong>单表太大</strong></p><p>CURD效率都很低、数据量太大导致索引膨胀、查询超时，需要把单表切分成多个数据集更小的表</p><h3 id="14-2拆分策略"><a href="#14-2拆分策略" class="headerlink" title="14.2拆分策略"></a>14.2拆分策略</h3><p>单个库太大，先考虑是表多还是数据多：</p><ul><li>如果因为表多而造成数据过多，则使用垂直拆分，即根据业务拆分成不同的库</li><li>如果因为单张表的数据量太大，则使用水平拆分，即把表的数据按照某种规则拆分成多张表</li></ul><p><strong>分库分表的原则应该是先考虑垂直拆分，再考虑水平拆分。</strong></p><p><strong>垂直拆分</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- server.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>USERDB1,USERDB2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- schema.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逻辑数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB1&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB2&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 存储节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;node1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mytest1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;node2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mytest2&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库主机 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;node1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;192.168.131.129&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.131.129:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;node2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;192.168.0.6&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.0.6:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>垂直分表</strong></p><p>也就是“大表拆小表”，基于列字段进行。一般是表中的字段较多，将不常用的， 数据较大，长度较长（比如text类型字段）的拆分到“扩展表“。一般是针对几百列的这种大表，也避免查询时，数据量太大造成的“跨页”问题。</p><p><strong>垂直分库</strong></p><p>垂直分库针对的是一个系统中的不同业务进行拆分。比如用户User一个库，商品Product一个库，订单Order一个库， 切分后，要放在多个服务器上，而不是一个服务器上。想象一下，一个购物网站对外提供服务，会有用户，商品，订单等的CRUD。没拆分之前， 全部都是落到单一的库上的，这会让数据库的单库处理能力成为瓶颈。按垂直分库后，如果还是放在一个数据库服务器上， 随着用户量增大，这会让单个数据库的处理能力成为瓶颈，还有单个服务器的磁盘空间，内存，tps等非常吃紧。 所以我们要拆分到多个服务器上，这样上面的问题都解决了，以后也不会面对单机资源问题。</p><p>数据库业务层面的拆分，和服务的“治理”，“降级”机制类似，也能对不同业务的数据分别的进行管理，维护，监控，扩展等。 数据库往往最容易成为应用系统的瓶颈，而数据库本身属于“有状态”的，相对于Web和应用服务器来讲，是比较难实现“横向扩展”的。 数据库的连接资源比较宝贵且单机处理能力也有限，在高并发场景下，垂直分库一定程度上能够突破IO、连接数及单机硬件资源的瓶颈。</p><p><strong>水平拆分</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- server.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>USERDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- schema.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逻辑数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 存储节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;node1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mytest1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;node2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mytest2&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库主机 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;node1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;192.168.131.129&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.131.129:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;node2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;192.168.0.6&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.0.6:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>水平分表</strong></p><p>针对数据量巨大的单张表（比如订单表），按照某种规则（RANGE,HASH取模等），切分到多张表里面去。 但是这些表还是在同一个库中，所以库级别的数据库操作还是有IO瓶颈，不建议采用。</p><p><strong>水平分库分表</strong></p><p>将单张表的数据切分到多个服务器上去，每个服务器具有相应的库与表，只是表中数据集合不同。 水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源等的瓶颈。</p><hr><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-执行一条select语句期间发生了什么"><a href="#1-执行一条select语句期间发生了什么" class="headerlink" title="1. 执行一条select语句期间发生了什么"></a>1. 执行一条select语句期间发生了什么</h3><p>首先一条sql语句的执行流程是 </p><p>连接器-&gt;查询缓存-&gt; 解析SQL-&gt;          执行SQL                    -&gt;存储引擎</p><p>连接器-&gt;查询缓存-&gt;解析器-&gt;预处理器-&gt;优化器-&gt;执行器-&gt;存储引擎</p><p>SQL语句首先进入连接器，连接器首先要经过TCP三次握手（使用数据库连接池的一个原因就是节省tcp握手挥手的损耗），tcp连接成功后就开始进行用户验证，验证成功则获取该用户权限。mysql服务器如果解析到SQL语句是select语句就会首先进入查询缓存查找（8.0后删除了sever层的查询缓存），如果缓存没有命中则进入解析器，解析器会对SQL语句进行词法（判断关键字是否输入正确）和语法分析（语法是否有问题）。解析完SQL后会进入预处理器，主要是检查SQL语句中的表和字段是否存在；然后进入优化器，负责制定SQL语句的执行方案；最后由执行器真正开始执行SQL语句</p><h3 id="2-MySQL-一行记录的存储结构"><a href="#2-MySQL-一行记录的存储结构" class="headerlink" title="2. MySQL 一行记录的存储结构"></a>2. MySQL 一行记录的存储结构</h3><p>在Innodb存储引擎中，一张表的结构是这样的</p><p><img src="https://s1.vika.cn/space/2023/04/26/62560f830d4d44ccb52a9ed7e2428512" alt=""></p><p><strong>表空间由段（segment）、区（extent）、页（page）、行（row）组成</strong></p><p>数据库表中的记录都是<strong>按行</strong>（row）进行存放的；</p><p>InnoDB 的数据是<strong>按「页」</strong>为单位来读写的，默认每个页的大小为 16KB；</p><p> InnoDB 存储引擎是用 B+ 树来组织数据的，B+ 树中<strong>每一层</strong>都是通过<strong>双向链表</strong>连接起来的，当 B+ 树调整树的结构时可能会移动节点导致物理上的空间不是连续的，因此可以采用区分配使页在物理上连续的，在表中数据量大的时候，为某个<strong>索引分配空间</strong>的时候就不再按照页为单位分配了，而是按照<strong>区（extent）为单位分配</strong>。每个区的大小为 1MB，对于 16KB 的页来说，连续的 64 个页会被划为一个区，这样就使得链表中相邻的页的物理位置也相邻，就能使用顺序 I/O 了；</p><p>表空间是由各个段（segment）组成的，段是由多个区（extent）组成的。段一般分为数据段、索引段和回滚段等。</p><ul><li>索引段：存放 B + 树的非叶子节点的区的集合；</li><li>数据段：存放 B + 树的叶子节点的区的集合；</li><li>回滚段：存放的是回滚数据的区的集合</li></ul><p>记录每一行的数据格式Compact ，5.7后默认为Dynamic，下是compact的数据格式</p><p><img src="https://s1.vika.cn/space/2023/04/26/d42383b81a43430cabe8e83c2bea49b4" alt=""></p><p>变长字段是按照逆序排放变长值的长度，提高CPU Cache命中率</p><p>由此可知插入一个null值，是将null列表按逆序对应bit为置为1，不足1字节按1字节填充</p><p>varchar(n) 中 n 最大取值为多少？n表示的是<strong>字符数</strong>，mysql规定除了 TEXT、BLOBs 这种大对象类型之外，其他所有的列（不包括隐藏列和记录头信息）占用的<strong>字节长度</strong>加起来不能超过 65535 个字节（包含了变长字段长度列表」和 「NULL 值列表」）。所以varchar中n的最大取值还要和字符集有关，一个字符占多少字节</p><p>如果一张表只有一个 varchar(n) 字段，且允许为 NULL，字符集为 ascii。varchar(n) 中 n 最大取值为 65532。</p><p>计算公式：65535 - 变长字段字节数列表所占用的字节数 - NULL值列表所占用的字节数 = 65535 - 2 - 1 = 65532。</p><p>如果有多个字段的话，要保证所有字段的长度 + 变长字段字节数列表所占用的字节数 + NULL值列表所占用的字节数 &lt;= 65535。</p><p><strong>行溢出后，MySQL 是怎么处理的？</strong></p><p>一个页可能就存不了一条记录。这个时候就会<strong>发生行溢出，多的数据就会存到另外的「溢出页」中</strong>。真实数据处用 20 字节存储指向溢出页的地址，从而可以找到剩余数据所在的页。</p><p>Compressed 和 Dynamic 这两个行格式和 Compact 非常类似，主要的区别在于处理行溢出数据时有些区别。</p><p>这两种格式采用完全的行溢出方式，记录的真实数据处<strong>不会存储该列的一部分数据</strong>，<strong>只存储 20 个字节的指针来指向溢出页</strong>。而实际的数据都存储在溢出页中，看起来就像下面这样：</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>在二级索引的 B+Tree 就能查询到结果的过程就叫作「覆盖索引」</strong></p><p>主键索引的 B+Tree 的叶子节点存放的是实际数据</p><p>二级索引的 B+Tree 的叶子节点存放的是主键值</p><p>联合索引的非叶子节点用两个字段的值作为 B+Tree 的 key 值</p><p>使用联合索引时，存在<strong>最左匹配原则</strong>，也就是按照最左优先的方式进行索引的匹配</p><p>如果创建了一个 <code>(a, b, c)</code> 联合索引，如果查询条件是以下这几种，就可以匹配上联合索引：</p><ul><li>where a=1；</li><li>where a=1 and b=2 and c=3；</li><li>where a=1 and b=2；</li></ul><p>需要注意的是，因为有查询优化器，所以 a 字段在 where 子句的顺序并不重要。</p><p>但是，如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><ul><li>where b=2；</li><li>where c=3；</li><li>where b=2 and c=3；</li></ul><p>上面这些查询条件之所以会失效，是因为<code>(a, b, c)</code> 联合索引，是先按 a 排序，在 a 相同的情况再按 b 排序，在 b 相同的情况再按 c 排序。所以，<strong>b 和 c 是全局无序，局部相对有序的</strong>，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的。</p><p><strong>范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引</strong>。</p><p>比如：Q1: <code>select * from t_table where a &gt; 1 and b = 2</code>，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？只有a能用到联合索引，<strong>但是在符合 a &gt; 1 条件的二级索引记录的范围里，b 字段的值可能是无序的</strong>。</p><p>Q2: <code>select * from t_table where a &gt;= 1 and b = 2</code>，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？<strong>对于符合 a = 1 的二级索引记录的范围里，b 字段的值是「有序」的</strong>。也就是说，从符合 a = 1 and b = 2 条件的第一条记录开始扫描，而不需要从第一个 a 字段值为 1 的记录开始扫描。</p><p><code>索引下推</code>的<strong>下推</strong>其实就是指将部分上层（服务层）负责的事情，交给了下层（引擎层）去处理。</p><p>，在没有使用ICP的情况下，MySQL的查询：</p><ul><li>存储引擎读取索引记录；</li><li>根据索引中的主键值，定位并读取完整的行记录；</li><li>存储引擎把记录交给<code>Server</code>层去检测该记录是否满足<code>WHERE</code>条件。</li></ul><p>使用ICP的情况下，查询过程：</p><ul><li>存储引擎读取索引记录（不是完整的行记录）；</li><li>判断<code>WHERE</code>条件部分能否用索引中的列来做检查，条件不满足，则处理下一行索引记录；</li><li>条件满足，使用索引中的主键去定位并读取完整的行记录（就是所谓的回表）；</li><li>存储引擎把记录交给<code>Server</code>层，<code>Server</code>层检测该记录是否满足<code>WHERE</code>条件的其余部分。</li></ul><p><strong>索引下推优化</strong>（index condition pushdown)， <strong>可以在联合索引遍历过程中，对联合索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数</strong>。</p><p>什么时候适用索引？</p><ul><li>字段有唯一性限制的，比如商品编码；</li><li>经常用于 <strong><code>WHERE</code> 查询条件</strong>的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。</li><li>经常用于 <strong><code>GROUP BY</code> 和 <code>ORDER BY</code> 的字段</strong>，这样在查询的时候就不需要再去做一次排序了，因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的。</li></ul><p>什么时候不需要创建索引？</p><ul><li><code>WHERE</code> 条件，<code>GROUP BY</code>，<code>ORDER BY</code> 里用不到的字段，起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。</li><li>字段中存在大量重复数据，不需要创建索引</li><li>表数据太少的时候，不需要创建索引；</li><li>经常更新的字段不用创建索引</li></ul><p><strong>几种常见优化索引的方法</strong></p><ol><li>前缀索引顾名思义就是使用某个字段中字符串的前几个字符建立索引。</li></ol><p>​            不过，前缀索引有一定的局限性，例如：</p><ul><li>order by 就无法使用前缀索引；</li><li>无法把前缀索引用作覆盖索引；</li></ul><ol><li><p>覆盖索引是指从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以避免回表的操作。</p></li><li><p>主键索引设置为自增</p></li><li><p>索引列要设置为 NOT NULL 约束</p></li><li><p>防止索引失效</p></li></ol><p><img src="https://s1.vika.cn/space/2023/04/27/2be0d40b52db4627bf967bfec881e1b5" alt=""></p><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>1.<strong>对索引使用左或者左右模糊匹配</strong></p><p><code>like %xx</code> 或者 <code>like %xx%</code> 这两种方式都会造成索引失效</p><p><strong>因为索引 B+ 树是按照「索引值」有序排列存储的，只能根据前缀进行比较。</strong></p><p>2.<strong>对索引使用函数</strong></p><p>因为索引保存的是索引字段的原始值，而不是经过函数计算后的值，自然就没办法走索引了。</p><p>不过，从 MySQL 8.0 开始，索引特性增加了函数索引，即可以针对函数计算后的值建立一个索引，也就是说该索引的值是函数计算后的值，所以就可以通过扫描索引来查询数据。</p><p>3.<strong>对索引进行表达式计算</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> id <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">10</span>; 不能走索引</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="operator">-</span> <span class="number">1</span>  能走索引</span><br></pre></td></tr></table></figure><p>4.<strong>对索引隐式类型转换</strong></p><p>比如说phone字段是vachar类型，但写过滤语句时用where phone = 1212554，这是整数类型默认需要转为varchar类型不能使用索引</p><p><strong>MySQL 在遇到字符串和数字比较的时候，会自动把字符串转为数字，然后再进行比较</strong>。</p><p>前面的例子一中的查询语句，我也跟大家说了是会走全表扫描：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>例子一的查询语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="number">1300000001</span>;</span><br></pre></td></tr></table></figure><p>这是因为 phone 字段为字符串，所以 MySQL 要会自动把字符串转为数字，所以这条语句相当于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="built_in">CAST</span>(phone <span class="keyword">AS</span> signed <span class="type">int</span>) <span class="operator">=</span> <span class="number">1300000001</span>;</span><br></pre></td></tr></table></figure><p>可以看到，<strong>CAST 函数是作用在了 phone 字段，而 phone 字段是索引，也就是对索引使用了函数！而前面我们也说了，对索引使用函数是会导致索引失效的</strong>。</p><p>例子二中的查询语句，我跟大家说了是会走索引扫描：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>例子二的查询语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="operator">=</span> &quot;1&quot;;</span><br></pre></td></tr></table></figure><p>这时因为字符串部分是输入参数，也就需要将字符串转为数字，所以这条语句相当于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="built_in">CAST</span>(&quot;1&quot; <span class="keyword">AS</span> signed <span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>可以看到，索引字段并没有用任何函数，CAST 函数是用在了输入参数，因此是可以走索引扫描的。</p><p>5.<strong>联合索引非最左匹配</strong></p><p><strong>最左匹配原则</strong>，也就是按照最左优先的方式进行索引的匹配。</p><p>如果创建了一个 <code>(a, b, c)</code> 联合索引，如果查询条件是以下这几种，就可以匹配上联合索引：</p><ul><li>where a=1；</li><li>where a=1 and b=2 and c=3；</li><li>where a=1 and b=2；</li></ul><p>需要注意的是，因为有查询优化器，所以 a 字段在 where 子句的顺序并不重要。</p><p>如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><ul><li>where b=2；</li><li>where c=3；</li><li>where b=2 and c=3；</li></ul><p>有一个比较特殊的查询条件：where a = 1 and c = 3  5.6版本后使用索引下推</p><p>6.<strong>WHERE 子句中的 OR</strong></p><p>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</p><p>因为 OR 的含义就是两个只要满足一个即可，因此只有一个条件列是索引列是没有意义的，只要有条件列不是索引列，就会进行全表扫描。</p><h3 id="count-和-count-1-有什么区别？哪个性能最好？"><a href="#count-和-count-1-有什么区别？哪个性能最好？" class="headerlink" title="count(*) 和 count(1) 有什么区别？哪个性能最好？"></a>count(*) 和 count(1) 有什么区别？哪个性能最好？</h3><p>按照性能排序：count(=count(1)&gt;count(主键字段)&gt;count(字段)</p><p><strong>count(主键字段) 执行过程是怎样的</strong></p><p>server 层会循环向 InnoDB 读取一条记录，如果 count 函数指定的参数不为 NULL，那么就会将变量 count 加 1，直到符合查询的全部记录被读完，就退出循环。最后将 count 变量的值发送给客户端。</p><p>如果表里只有主键索引，没有二级索引时，那么，InnoDB 循环遍历聚簇索引，将读取到的记录返回给 server 层，然后读取记录中的 id 值，就会 id 值判断是否为 NULL，如果不为 NULL，就将 count 变量加 1。</p><p>如果表里有二级索引时，InnoDB 循环遍历的对象就不是聚簇索引，而是二级索引。</p><p>这是因为相同数量的二级索引记录可以比聚簇索引记录占用更少的存储空间，所以二级索引树比聚簇索引树小，这样遍历二级索引的 I/O 成本比遍历聚簇索引的 I/O 成本小，因此「优化器」优先选择的是二级索引。</p><p><strong>count(1) 执行过程是怎样的</strong></p><p>表里只有主键索引，没有二级索引时</p><p>InnoDB 循环遍历聚簇索引（主键索引），将读取到的记录返回给 server 层，<strong>但是不会读取记录中的任何字段的值</strong>，因为 count 函数的参数是 1，不是字段，所以不需要读取记录中的字段值。</p><p>如果表里有二级索引时，InnoDB 循环遍历的对象就二级索引了。</p><p><strong>count(*) 执行过程是怎样的</strong></p><p><strong>count(*) 其实等于 count(<code>0</code>)</strong>，也就是说，当你使用 count(<code>*</code>) 时，MySQL 会将 <code>*</code> 参数转化为参数 0 来处理。</p><p><strong>count(字段) 执行过程是怎样的</strong></p><p>name不是索引，普通字段 会采用全表扫描的方式来计数，所以它的执行效率是比较差的。</p><p><strong>如何优化 count(*)</strong></p><p>对一张大表经常用 count(*) 来做统计</p><p><strong>近似值</strong></p><p>可以使用 show table status 或者 explain 命令来表进行估算。执行 explain 命令效率是很高的，因为它并不会真正的去查询</p><p><strong>额外表保存计数值</strong></p><p>想精确的获取表的记录总数，我们可以将这个计数值保存到单独的一张计数表中。</p><p>当我们在数据表插入一条记录的同时，将计数表中的计数字段 + 1。也就是说，在新增和删除操作时，我们需要额外维护这个计数表。 </p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>持久性是通过 redo log （重做日志）来保证的；</li><li>原子性是通过 undo log（回滚日志） 来保证的；</li><li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</li><li>一致性则是通过持久性+原子性+隔离性来保证；</li></ul><p><strong>如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。</strong></p><p><strong>在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。</strong></p><p><strong>在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。</strong></p><p>SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：</p><ul><li><strong>读未提交（read uncommitted）</strong>，指一个事务还没提交时，它做的变更就能被其他事务看到；</li><li><strong>读提交（read committed）</strong>，指一个事务提交之后，它做的变更才能被其他事务看到；</li><li><strong>可重复读（repeatable read）</strong>，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，<strong>MySQL InnoDB 引擎的默认隔离级别</strong>；</li><li><strong>串行化（serializable）</strong>；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；</li></ul><p>这四种隔离级别具体是如何实现的呢？</p><ul><li>对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；</li><li>对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；</li><li>对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 <strong>Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View</strong>。</li></ul><h3 id="Read-View-在-MVCC-里如何工作的"><a href="#Read-View-在-MVCC-里如何工作的" class="headerlink" title="Read View 在 MVCC 里如何工作的"></a>Read View 在 MVCC 里如何工作的</h3><p>Read View 有四个重要的字段：下·</p><ul><li>m_ids ：指的是在创建 Read View 时，当前数据库中「活跃事务」的<strong>事务 id 列表</strong>，注意是一个列表，<strong>“活跃事务”指的就是，启动了但还没提交的事务</strong>。</li><li>min_trx_id ：指的是在创建 Read View 时，当前数据库中「活跃事务」中事务 <strong>id 最小的事务</strong>，也就是 m_ids 的最小值。</li><li>max_trx_id ：这个并不是 m_ids 的最大值，而是<strong>创建 Read View 时当前数据库中应该给下一个事务的 id 值</strong>，也就是全局事务中最大的事务 id 值 + 1；</li><li><p>creator_trx_id ：指的是<strong>创建该 Read View 的事务的事务 id</strong>。</p><p>InnoDB 存储引擎的数据库表，它的聚簇索引记录中都包含下面两个隐藏列：</p></li><li><p>trx_id，当一个事务对某条聚簇索引记录进行改动时，就会<strong>把该事务的事务 id 记录在 trx_id 隐藏列里</strong>；</p></li><li>roll_pointer，每次对某条聚簇索引记录进行改动时，都会把旧版本的记录写入到 undo 日志中，然后<strong>这个隐藏列是个指针，指向每一个旧版本记录</strong>，于是就可以通过它找到修改前的记录。</li></ul><p>在创建 Read View 后，我们可以将记录中的 trx_id 划分这三种情况：</p><p><img src="https://s1.vika.cn/space/2023/05/01/26fc2f8ca2c64b7bb12c3194a478a3aa" style="zoom:67%;" /></p><p>一个事务去访问记录的时候，除了自己的更新记录总是可见之外，还有这几种情况：</p><ul><li><p>如果记录的 trx_id 值小于 Read View 中的 <code>min_trx_id</code> 值，表示这个版本的记录是在创建 Read View <strong>前</strong>已经提交的事务生成的，所以该版本的记录对当前事务<strong>可见</strong>。</p></li><li><p>如果记录的 trx_id 值大于等于 Read View 中的 <code>max_trx_id</code> 值，表示这个版本的记录是在创建 Read View <strong>后</strong>才启动的事务生成的，所以该版本的记录对当前事务<strong>不可见</strong>。</p></li><li><p>如果记录的 trx_id 值在 Read View 的<code>min_trx_id</code>和<code>max_trx_id</code>之间，需要判断 trx_id 是否在 m_ids 列表（Read View可以分为每次拍照和拍一次照）中：</p><ul><li>如果记录的 trx_id <strong>在</strong> <code>m_ids</code> 列表中，表示生成该版本记录的活跃事务依然活跃着（还没提交事务），所以该版本的记录对当前事务<strong>不可见</strong>。</li><li>如果记录的 trx_id <strong>不在</strong> <code>m_ids</code>列表中，表示生成该版本记录的活跃事务已经被提交，所以该版本的记录对当前事务<strong>可见</strong>。</li></ul></li></ul><p><strong>这种通过「版本链」来控制并发事务访问同一个记录时的行为就叫 MVCC（多版本并发控制）。</strong></p><h3 id="可重复读是如何工作的"><a href="#可重复读是如何工作的" class="headerlink" title="可重复读是如何工作的"></a>可重复读是如何工作的</h3><p><strong>可重复读隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View</strong>。</p><h3 id="读提交是如何工作"><a href="#读提交是如何工作" class="headerlink" title="读提交是如何工作"></a>读提交是如何工作</h3><p><strong>读提交隔离级别是在每次读取数据时，都会生成一个新的 Read View</strong>。</p><p>而对于幻读现象，不建议将隔离级别升级为串行化，因为这会导致数据库并发时性能很差。MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了），解决的方案有两种：</p><ul><li>针对<strong>快照读</strong>（普通 select 语句），是<strong>通过 MVCC 方式解决了幻读</strong>，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。</li><li>针对<strong>当前读</strong>（select … for update 等语句），是<strong>通过 next-key lock（记录锁+间隙锁）方式解决了幻读</strong>，因为当执行 select … for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。</li></ul><h3 id="快照读是如何避免幻读的"><a href="#快照读是如何避免幻读的" class="headerlink" title="快照读是如何避免幻读的"></a>快照读是如何避免幻读的</h3><p>可重复读隔离级是由 MVCC（多版本并发控制）实现的，实现的方式是开始事务后（执行 begin 语句后），在执行第一个查询语句后，会创建一个 Read View，<strong>后续的查询语句利用这个 Read View，通过这个 Read View 就可以在 undo log 版本链找到事务开始时的数据，所以事务过程中每次查询的数据都是一样的</strong></p><h3 id="当前读是如何避免幻读的"><a href="#当前读是如何避免幻读的" class="headerlink" title="当前读是如何避免幻读的"></a>当前读是如何避免幻读的</h3><p>MySQL 里除了普通查询是快照读，其他都是<strong>当前读</strong>，比如 update、insert、delete，这些语句执行前都会查询最新版本的数据，然后再做进一步的操作。这很好理解，假设你要 update 一个记录，另一个事务已经 delete 这条记录并且提交事务了，这样不是会产生冲突吗，所以 update 的时候肯定要知道最新的数据。</p><p><strong>Innodb 引擎为了解决「可重复读」隔离级别使用「当前读」而造成的幻读问题，就引出了间隙锁</strong>。</p><p>MySQL InnoDB 引擎的可重复读隔离级别（默认隔离级），根据不同的查询方式，分别提出了避免幻读的方案：</p><ul><li>针对<strong>快照读</strong>（普通 select 语句），是通过 MVCC 方式解决了幻读。</li><li>针对<strong>当前读</strong>（select … for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读。</li></ul><p>但并不能完全防止幻读</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="mysql锁有哪些"><a href="#mysql锁有哪些" class="headerlink" title="mysql锁有哪些"></a>mysql锁有哪些</h3><p><strong>全局锁</strong></p><p>全局锁是怎么用的？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flush tables <span class="keyword">with</span> read lock</span><br><span class="line">unlock tables  释放全局锁</span><br></pre></td></tr></table></figure><blockquote><p>全局锁应用场景是什么？ 全局锁主要应用于做<strong>全库逻辑备份</strong></p><p>加全局锁又会带来什么缺点呢？加上全局锁，意味着整个数据库都是只读状态。这样会造成业务停滞。</p><p>既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？</p></blockquote><p>如果数据库的引擎支持的事务支持<strong>可重复读的隔离级别</strong>，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。</p><p><strong>表级锁</strong></p><p>MySQL 表级锁有哪些？具体怎么用的。</p><ul><li>表锁；</li><li>元数据锁（MDL）;</li><li>意向锁；</li><li>AUTO-INC 锁；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>表级别的共享锁，也就是读锁；</span><br><span class="line">lock tables t_student read;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>表级别的独占锁，也就是写锁；</span><br><span class="line">lock tables t_stuent write;</span><br><span class="line">unlock tables</span><br></pre></td></tr></table></figure><p>不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，<strong>InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁</strong>。</p><p><strong>元数据锁（MDL）</strong></p><p>当我们对数据库表进行操作时，会自动给这个<strong>表加上 MDL</strong>：</p><ul><li>对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>；</li><li>对一张表做结构变更操作的时候，加的是 <strong>MDL 写锁</strong>；</li></ul><p><strong>MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。</strong></p><blockquote><p>MDL 不需要显示调用，那它是在什么时候释放的?</p></blockquote><p>MDL 是在事务提交后才会释放，这意味着<strong>事务执行期间，MDL 是一直持有的</strong>。</p><blockquote><p>为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？</p></blockquote><p>这是因为申请 MDL 锁的操作会形成一个队列，队列中<strong>写锁获取优先级高于读锁</strong>，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。</p><p>所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。</p><p><strong>意向锁</strong></p><ul><li>在使用 InnoDB 引擎的表里对<strong>某些记录</strong>加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；</li><li>在使用 InnoDB 引擎的表里对<strong>某些纪录</strong>加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；</li></ul><p>当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。</p><p><strong>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（lock tables … read）和独占表锁（lock tables … write）发生冲突。</strong></p><p><strong>意向锁的目的是为了快速判断表里是否有记录被加锁</strong>。</p><p><strong>AUTO-INC 锁</strong></p><p>插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 <strong>AUTO-INC 锁</strong>实现的。AUTO-INC 锁是特殊的表锁机制，锁<strong>不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放</strong>。<strong>在插入数据时，会加一个表级别的 AUTO-INC 锁</strong>，然后为被 <code>AUTO_INCREMENT</code> 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。</p><p> 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种<strong>轻量级的锁</strong>来实现自增。</p><p>一样也是在插入数据的时候，会为被 <code>AUTO_INCREMENT</code> 修饰的字段加上轻量级锁，<strong>然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁</strong>。</p><p>但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生<strong>数据不一致的问题</strong>。</p><p>InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。</p><ul><li>当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；</li><li>当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。</li><li>当 innodb_autoinc_lock_mode = 1：<ul><li>普通 insert 语句，自增锁在申请之后就马上释放；</li><li>类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；</li></ul></li></ul><p><strong>当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题</strong>。</p><p><strong>行级锁</strong></p><p>行级锁的类型主要有三类：</p><ul><li>Record Lock，记录锁，也就是仅仅把一条记录锁上；</li><li>Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；</li><li>Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</li></ul><h4 id="Record-Lock"><a href="#Record-Lock" class="headerlink" title="Record Lock"></a>Record Lock</h4><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X</p><h4 id="Gap-Lock"><a href="#Gap-Lock" class="headerlink" title="Gap Lock"></a>Gap Lock</h4><p>Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。</p><p><strong>间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的</strong>。</p><h4 id="Next-Key-Lock"><a href="#Next-Key-Lock" class="headerlink" title="Next-Key Lock"></a>Next-Key Lock</h4><p>Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p><h4 id="插入意向锁"><a href="#插入意向锁" class="headerlink" title="插入意向锁"></a>插入意向锁</h4><p>一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。如果有的话，插入操作就会发生<strong>阻塞</strong>，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个<strong>插入意向锁</strong>，表明有事务想在某个区间插入新记录，但是现在处于等待状态。插入意向锁名字虽然有意向锁，但是它并<strong>不是意向锁，它是一种特殊的间隙锁，属于行级别锁</strong>。</p><h3 id="MySQL-是怎么加行级锁的"><a href="#MySQL-是怎么加行级锁的" class="headerlink" title="MySQL 是怎么加行级锁的"></a>MySQL 是怎么加行级锁的</h3><p><strong>加锁的对象是索引，加锁的基本单位是 next-key lock</strong>，它是由记录锁和间隙锁组合而成的，<strong>next-key lock 是前开后闭区间，而间隙锁是前开后开区间</strong>。</p><p><strong>在能使用记录锁或者间隙锁就能避免幻读现象的场景下， next-key lock 就会退化成记录锁或间隙锁</strong>。</p><h4 id="唯一索引等值查询"><a href="#唯一索引等值查询" class="headerlink" title="唯一索引等值查询"></a>唯一索引等值查询</h4><ul><li>当查询的记录是「存在」的，在索引树上定位到这一条记录后，将该记录的索引中的 next-key lock 会<strong>退化成「记录锁」</strong>。</li><li>当查询的记录是「不存在」的，在索引树找到第一条大于该查询记录的记录后，将该记录的索引中的 next-key lock 会<strong>退化成「间隙锁」</strong>。</li></ul><blockquote><p>「唯一索引」是用「主键索引」，加锁只加在主键索引项上。</p><p>如果对二级索引项加行级锁（如果是唯一索引的二级索引，加锁规则和主键索引的案例相同），而且还会对查询到的记录的主键索引项上加「记录锁」。</p><p>有什么命令可以分析加了什么锁？</p><p><code>select * from performance_schema.data_locks\G;</code></p><p>为什么唯一索引等值查询并且查询记录存在的场景下，该记录的索引中的 next-key lock 会退化成记录锁？</p></blockquote><p>主键具有唯一性，所以<strong>其他事务插入 id = 1 的时候，会因为主键冲突，导致无法插入 id = 1 的新记录</strong>。</p><h4 id="唯一索引范围查询"><a href="#唯一索引范围查询" class="headerlink" title="唯一索引范围查询"></a>唯一索引范围查询</h4><p>当唯一索引进行范围查询时，<strong>会对每一个扫描到的索引加 next-key 锁，然后如果遇到下面这些情况，会退化成记录锁或者间隙锁</strong>：</p><ul><li>情况一：针对「大于等于」的范围查询，因为存在等值查询的条件，那么如果等值查询的记录是存在于表中，那么该记录的索引中的 next-key 锁会<strong>退化成记录锁</strong>。</li><li>情况二：针对「小于或者小于等于」的范围查询，要看条件值的记录是否存在于表中：<ul><li>当条件值的记录不在表中，那么不管是「小于」还是「小于等于」条件的范围查询，<strong>扫描到终止范围查询的记录时，该记录的索引的 next-key 锁会退化成间隙锁</strong>，其他扫描到的记录，都是在这些记录的索引上加 next-key 锁。</li><li>当条件值的记录在表中，如果是「小于」条件的范围查询，<strong>扫描到终止范围查询的记录时，该记录的索引的 next-key 锁会退化成间隙锁</strong>，其他扫描到的记录，都是在这些记录的索引上加 next-key 锁；如果「小于等于」条件的范围查询，扫描到终止范围查询的记录时，该记录的索引 next-key 锁不会退化成间隙锁。其他扫描到的记录，都是在这些记录的索引上加 next-key 锁。</li></ul></li></ul><h4 id="非唯一索引等值查询"><a href="#非唯一索引等值查询" class="headerlink" title="非唯一索引等值查询"></a>非唯一索引等值查询</h4><p>当我们用非唯一索引进行等值查询的时候，<strong>因为存在两个索引，一个是主键索引，一个是非唯一索引（二级索引），所以在加锁时，同时会对这两个索引都加锁，但是对主键索引加锁的时候，只有满足查询条件的记录才会对它们的主键索引加锁</strong>。</p><p>针对非唯一索引等值查询时，查询的记录存不存在，加锁的规则也会不同：</p><ul><li>当查询的记录「存在」时，由于不是唯一索引，所以肯定存在索引值相同的记录，于是<strong>非唯一索引等值查询的过程是一个扫描的过程，直到扫描到第一个不符合条件的二级索引记录就停止扫描，然后在扫描的过程中，对扫描到的二级索引记录加的是 next-key 锁，而对于第一个不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。同时，在符合查询条件的记录的主键索引上加记录锁</strong>。</li><li>当查询的记录「不存在」时，<strong>扫描到第一条不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。因为不存在满足查询条件的记录，所以不会对主键索引加锁</strong>。</li></ul>]]></content>
    
    
    <summary type="html">🥧本文讲述mysql基础知识点以及网上摘抄的知识点</summary>
    
    
    
    <category term="数据库" scheme="https://yanhool.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="mysql" scheme="https://yanhool.github.io/tags/mysql/"/>
    
    <category term="计算机基础" scheme="https://yanhool.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>c++ STL</title>
    <link href="https://yanhool.github.io/posts/20230317d.html"/>
    <id>https://yanhool.github.io/posts/20230317d.html</id>
    <published>2023-03-24T10:19:03.000Z</published>
    <updated>2023-03-24T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c82b7402268e249ef50055d1b16e50e3b16fdbc967a298bc070ca814a10138cc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 文件正在施工中，暂时无法进入！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🥧本文讲述c++ STL</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    
    <category term="算法" scheme="https://yanhool.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://yanhool.github.io/posts/20230324d.html"/>
    <id>https://yanhool.github.io/posts/20230324d.html</id>
    <published>2023-03-24T10:19:03.000Z</published>
    <updated>2023-03-24T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p><strong>区间选点</strong></p><p>给定 <em>N</em> 个闭区间 $[a_i,b_i]$，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。</p><p>输出选择的点的最小数量。</p><p>位于区间端点上的点也算作区间内。</p><blockquote><ol><li>每个区间按照右端点从小到大排序</li><li>先在最小的区间取最右端的点（这样能尽可能覆盖更多区间）</li><li>从前往后依次枚举每个区间<ol><li>如果当前区间包含之前的点则跳过</li><li>否则选择这个区间的最右侧点继续枚举接下来的区间</li></ol></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Range&amp; w)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r &lt; w.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        range[i] = &#123;l ,r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range, range + n);</span><br><span class="line">    <span class="type">int</span> pre = <span class="number">-2e9</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(range[i].l &gt; pre)&#123;</span><br><span class="line">            pre = range[i].r;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>最大不相交区间数量</strong></p><p>给定 <em>N</em> 个闭区间 $[a_i,b_i]$​，请你在数轴上选择若干区间，使得选中的区间之间互不相交（包括端点）。</p><p>输出可选取区间的最大数量。</p><p>和上一题连代码都一模一样</p><p>理解：凡是相交的区间都取一点</p><hr><p>区间分组</p><p>给定 <em>N</em> 个闭区间 $[a_i,b_i]$，请你将这些区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使得组数尽可能小。</p>]]></content>
    
    
    <summary type="html">🥧本文讲解贪心算法</summary>
    
    
    
    <category term="算法" scheme="https://yanhool.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://yanhool.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>nignx内存池源码刨析</title>
    <link href="https://yanhool.github.io/posts/20230322d.html"/>
    <id>https://yanhool.github.io/posts/20230322d.html</id>
    <published>2023-03-22T10:19:03.000Z</published>
    <updated>2023-03-24T02:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nignx源码刨析"><a href="#nignx源码刨析" class="headerlink" title="nignx源码刨析"></a>nignx源码刨析</h1><h2 id="内存池源码刨析"><a href="#内存池源码刨析" class="headerlink" title="内存池源码刨析"></a>内存池源码刨析</h2><blockquote><p>SGI STL二级空间配置器对大于128字节的内存申请采用malloc直接分配，对于小于128字节的内存申请采用内存池进行分配，且对内存池的使用非常彻底，避免了内存碎片。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ngx_palloc.h</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86.</span></span><br><span class="line"><span class="comment"> * On Windows NT it decreases a number of locked pages in a kernel.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NGX_MAX_ALLOC_FROM_POOL  (ngx_pagesize - 1) <span class="comment">// 单次最大分配4095字节</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NGX_DEFAULT_POOL_SIZE    (16 * 1024) <span class="comment">// 默认池子16k大</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NGX_POOL_ALIGNMENT       16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NGX_MIN_POOL_SIZE                                                     \</span></span><br><span class="line"><span class="meta">    ngx_align((sizeof(ngx_pool_t) + 2 * sizeof(ngx_pool_large_t)),            \</span></span><br><span class="line"><span class="meta">              NGX_POOL_ALIGNMENT)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_align(d, a)     (((d) + (a - 1)) &amp; ~(a - 1)) <span class="comment">// 把d调整到临近a的倍数上</span></span></span><br></pre></td></tr></table></figure><p>创建内存池</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ngx_pool_s</span>            <span class="type">ngx_pool_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    u_char               *last;</span><br><span class="line">    u_char               *end;</span><br><span class="line">    <span class="type">ngx_pool_t</span>           *next; <span class="comment">// 下一个内存块</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>            failed;</span><br><span class="line">&#125; <span class="type">ngx_pool_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*ngx_pool_cleanup_pt)</span><span class="params">(<span class="type">void</span> *data)</span></span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ngx_pool_cleanup_s</span>  <span class="type">ngx_pool_cleanup_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ngx_pool_cleanup_s</span> &#123; <span class="comment">// 这头信息也是存储在小内存块上</span></span><br><span class="line">    ngx_pool_cleanup_pt   handler; <span class="comment">// 回调函数指针</span></span><br><span class="line">    <span class="type">void</span>                 *data;<span class="comment">// 需要释放的资源的地址</span></span><br><span class="line">    <span class="type">ngx_pool_cleanup_t</span>   *next; <span class="comment">// next指针   所有的释放资源函数都在一个链表上</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ngx_pool_s</span> &#123;</span><br><span class="line">    <span class="type">ngx_pool_data_t</span>       d;</span><br><span class="line">    <span class="type">size_t</span>                max;</span><br><span class="line">    <span class="type">ngx_pool_t</span>           *current;</span><br><span class="line">    <span class="type">ngx_chain_t</span>          *chain;</span><br><span class="line">    <span class="type">ngx_pool_large_t</span>     *large;</span><br><span class="line">    <span class="type">ngx_pool_cleanup_t</span>   *cleanup; <span class="comment">// 这是一个回调函数，假设内存块中存储的对象有指针变量，指向的一个外部资源，需要通过这个回调函数去释放，防止内存泄漏</span></span><br><span class="line">    <span class="type">ngx_log_t</span>            *log;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ngx_pool_t</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_create_pool</span><span class="params">(<span class="type">size_t</span> size, <span class="type">ngx_log_t</span> *log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">ngx_pool_t</span>  *p; <span class="comment">// 给内存池一个头信息</span></span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">ngx_memalign</span>(NGX_POOL_ALIGNMENT, size, log); <span class="comment">// 开辟内存池 会进行内存对齐</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.last = (u_char *) p + <span class="built_in">sizeof</span>(<span class="type">ngx_pool_t</span>); <span class="comment">// last跳过头信息直接指向内存</span></span><br><span class="line">    p-&gt;d.end = (u_char *) p + size;<span class="comment">// 指向内存池结尾</span></span><br><span class="line">    p-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    size = size - <span class="built_in">sizeof</span>(<span class="type">ngx_pool_t</span>);<span class="comment">// 内存池能使用的容量</span></span><br><span class="line">    p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;</span><br><span class="line"><span class="comment">// 内存池按块分配，每一块的大小，如果开辟的内存池大小小于4095字节，则按照size大小存储，否则按照4095划分，总之一个块最多存4095</span></span><br><span class="line">    p-&gt;current = p;</span><br><span class="line">    p-&gt;chain = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;cleanup = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;log = log;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ngx_palloc</code>从内存池中申请内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_palloc</span><span class="params">(<span class="type">ngx_pool_t</span> *pool, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !(NGX_DEBUG_PALLOC)</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= pool-&gt;max) &#123; <span class="comment">// max为一个页面大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ngx_palloc_small</span>(pool, size, <span class="number">1</span>); <span class="comment">// 1：考虑内存对齐 0：不考虑内存对齐</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ngx_palloc_large</span>(pool, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> ngx_inline <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_palloc_small</span><span class="params">(<span class="type">ngx_pool_t</span> *pool, <span class="type">size_t</span> size, <span class="type">ngx_uint_t</span> align)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="type">ngx_pool_t</span>  *p;</span><br><span class="line"></span><br><span class="line">    p = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        m = p-&gt;d.last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (align) &#123;</span><br><span class="line">            m = <span class="built_in">ngx_align_ptr</span>(m, NGX_ALIGNMENT); <span class="comment">// 和stl的内存对齐代码一样</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="type">size_t</span>) (p-&gt;d.end - m) &gt;= size) &#123; <span class="comment">// 如果可使用内存空间满足size需求</span></span><br><span class="line">            p-&gt;d.last = m + size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p-&gt;d.next; <span class="comment">//如果当前剩余空间不能满足需求就去下一个内存池</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (p);</span><br><span class="line"><span class="comment">// 退出循环表示内存池不够用了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ngx_palloc_block</span>(pool, size); <span class="comment">//创建一个新的内存块~从这里可以看出内存池是由很多个内存块构成的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_palloc_block</span><span class="params">(<span class="type">ngx_pool_t</span> *pool, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="type">size_t</span>       psize;</span><br><span class="line">    <span class="type">ngx_pool_t</span>  *p, *<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    psize = (<span class="type">size_t</span>) (pool-&gt;d.end - (u_char *) pool); <span class="comment">// 计算之前内存块的大小</span></span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">ngx_memalign</span>(NGX_POOL_ALIGNMENT, psize, pool-&gt;log);<span class="comment">// 创建一个新的内存块 </span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> = (<span class="type">ngx_pool_t</span> *) m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span>-&gt;d.end = m + psize;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct &#123;</span></span><br><span class="line"><span class="comment">        u_char               *last;</span></span><br><span class="line"><span class="comment">        u_char               *end;</span></span><br><span class="line"><span class="comment">        ngx_pool_t           *next;</span></span><br><span class="line"><span class="comment">        ngx_uint_t            failed;</span></span><br><span class="line"><span class="comment">&#125; ngx_pool_data_t;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    m += <span class="built_in">sizeof</span>(<span class="type">ngx_pool_data_t</span>); <span class="comment">// m要跳过内存块头信息</span></span><br><span class="line">    m = <span class="built_in">ngx_align_ptr</span>(m, NGX_ALIGNMENT);<span class="comment">// 假设ngx_pool_data_t为13，m = 0，+13后m为13这样内存是不对其的，进行内存对齐后m=16</span></span><br><span class="line">    <span class="keyword">new</span>-&gt;d.last = m + size;<span class="comment">// 先分配size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;d.failed++ &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            pool-&gt;current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.next = <span class="keyword">new</span>; <span class="comment">// 把新的内存块和内存池链接起来</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ngx_pool_large_s</span>  <span class="type">ngx_pool_large_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ngx_pool_large_s</span> &#123;</span><br><span class="line">    <span class="type">ngx_pool_large_t</span>     *next; <span class="comment">// 指向下一个大块内存</span></span><br><span class="line">    <span class="type">void</span>                 *alloc; <span class="comment">//指向大块内存地址，因为这个有信息是存放在小块内存里面的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_palloc_large</span><span class="params">(<span class="type">ngx_pool_t</span> *pool, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>              *p;</span><br><span class="line">    <span class="type">ngx_uint_t</span>         n;</span><br><span class="line">    <span class="type">ngx_pool_large_t</span>  *large;</span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">ngx_alloc</span>(size, pool-&gt;log);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (large = pool-&gt;large; large; large = large-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (large-&gt;alloc == <span class="literal">NULL</span>) &#123; <span class="comment">// alloc在ngx_free后会为空，等于说是把之前的头信息再利用了</span></span><br><span class="line">            large-&gt;alloc = p;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n++ &gt; <span class="number">3</span>) &#123; <span class="comment">// 只找前三个，找不到就算了</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large = <span class="built_in">ngx_palloc_small</span>(pool, <span class="built_in">sizeof</span>(<span class="type">ngx_pool_large_t</span>), <span class="number">1</span>); <span class="comment">// ngx_pool_large_t头信息都存放在小内存块里面，是真的节省   如果小内存块都存满了则会失败</span></span><br><span class="line">    <span class="keyword">if</span> (large == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">ngx_free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;  <span class="comment">// 头插法</span></span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/23/929734adaac043f7acbd772e80bd1187" alt=""></p><center style="font-size:18px;color:#C0C0C0">nignx内存池结构图</center><p><code>ngx_pfree</code>释放内存块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">ngx_int_t</span></span></span><br><span class="line"><span class="function"><span class="title">ngx_pfree</span><span class="params">(<span class="type">ngx_pool_t</span> *pool, <span class="type">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 只释放大块内存</span></span><br><span class="line">    <span class="type">ngx_pool_large_t</span>  *l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">ngx_log_debug1</span>(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">&quot;free: %p&quot;</span>, l-&gt;alloc);</span><br><span class="line">            <span class="built_in">ngx_free</span>(l-&gt;alloc);</span><br><span class="line">            l-&gt;alloc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> NGX_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ngx_reset_pool</code>内存池重置函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">ngx_reset_pool</span><span class="params">(<span class="type">ngx_pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">ngx_pool_t</span>        *p;</span><br><span class="line">    <span class="type">ngx_pool_large_t</span>  *l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先遍历大块内存，因为大块内存的头信息在小块内存中存储，所以只能先遍历大块内存</span></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">ngx_free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool; p; p = p-&gt;d.next) &#123;</span><br><span class="line">        p-&gt;d.last = (u_char *) p + <span class="built_in">sizeof</span>(<span class="type">ngx_pool_t</span>); <span class="comment">// 这里感觉是为了方便偷懒了这样写，因为除了第一个小块内存的头信息大小是ngx_pool_t（因为还要保存内存池信息），后面的小块内存都是ngx_pool_data_t的头信息</span></span><br><span class="line">        p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*可以改写成这样</span></span><br><span class="line"><span class="comment">    // 处理第一块内存</span></span><br><span class="line"><span class="comment">    p = pool;</span></span><br><span class="line"><span class="comment">    p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);</span></span><br><span class="line"><span class="comment">    p-&gt;d.failed = 0;</span></span><br><span class="line"><span class="comment">    // 处理后面的内存</span></span><br><span class="line"><span class="comment">    for (p = p-&gt;d.next; p; p = p-&gt;d.next) &#123;</span></span><br><span class="line"><span class="comment">        p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);</span></span><br><span class="line"><span class="comment">        p-&gt;d.failed = 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    pool-&gt;current = pool;</span><br><span class="line">    pool-&gt;chain = <span class="literal">NULL</span>;</span><br><span class="line">    pool-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小块内存回收方案</p><p>nginx 大块内存分配 =》内存释放 ngx_free 函数<br>nginx 小块内存分配 =》没有提供任何的内存释放函数，实际上，从小块内存的分配方式来看（直接通过<br>last指针偏移来分配内存)，它也没法进行小块内存的回收</p><p>nginx木质：http服务器</p><p>是一个短链接的服务器，客户端（浏览器）发起一个request请求，到达nginx服务器以后，处理完成，nginx给客户瑞返回一个response响应，http服务器就主动断开tcp连接(http 1.1 keep-avlie:60s)</p><p>http服务器(nginx)返回响应以后，需要等待60s, 60s之内客户瑞又发来请求，重置这个时间，否则60s之 内没有客户端发来的响应，nginx就主动断开连接，此时nginx可以调用ngx_reset_pool重置内存池了，等待下一次该客户端的请求。</p><p><code>ngx_pool_cleanup_add</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">ngx_pool_cleanup_t</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_pool_cleanup_add</span><span class="params">(<span class="type">ngx_pool_t</span> *p, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">ngx_pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = <span class="built_in">ngx_palloc</span>(p, <span class="built_in">sizeof</span>(<span class="type">ngx_pool_cleanup_t</span>)); <span class="comment">// 在小内存块山上开辟头信息</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size) &#123; <span class="comment">// 如果资源释放函数需要传具体的size</span></span><br><span class="line">        c-&gt;data = <span class="built_in">ngx_palloc</span>(p, size);</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不需要传size</span></span><br><span class="line">        c-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;handler = <span class="literal">NULL</span>;</span><br><span class="line">    c-&gt;next = p-&gt;cleanup; <span class="comment">// 头插法</span></span><br><span class="line"></span><br><span class="line">    p-&gt;cleanup = c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ngx_log_debug1</span>(NGX_LOG_DEBUG_ALLOC, p-&gt;log, <span class="number">0</span>, <span class="string">&quot;add cleanup: %p&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ngx_destroy_pool</code>删除内存池函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">ngx_destroy_pool</span><span class="params">(<span class="type">ngx_pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">ngx_pool_t</span>          *p, *n;</span><br><span class="line">    <span class="type">ngx_pool_large_t</span>    *l;</span><br><span class="line">    <span class="type">ngx_pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;handler) &#123;</span><br><span class="line">            <span class="built_in">ngx_log_debug1</span>(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">&quot;run cleanup: %p&quot;</span>, c);</span><br><span class="line">            c-&gt;<span class="built_in">handler</span>(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_DEBUG)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * we could allocate the pool-&gt;log from this pool</span></span><br><span class="line"><span class="comment">     * so we cannot use this log while free()ing the pool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="built_in">ngx_log_debug1</span>(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, <span class="number">0</span>, <span class="string">&quot;free: %p&quot;</span>, l-&gt;alloc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool, n = pool-&gt;d.next; <span class="comment">/* void */</span>; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        <span class="built_in">ngx_log_debug2</span>(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">&quot;free: %p, unused: %uz&quot;</span>, p, p-&gt;d.end - p-&gt;d.last);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">ngx_free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool, n = pool-&gt;d.next; <span class="comment">/* void */</span>; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        <span class="built_in">ngx_free</span>(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存池源码移植"><a href="#内存池源码移植" class="headerlink" title="内存池源码移植"></a>内存池源码移植</h2><p><code>ngx_mem_pool.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> u_char = <span class="type">unsigned</span> <span class="type">char</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="type">ngx_uint_t</span> = <span class="type">unsigned</span> <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86.</span></span><br><span class="line"><span class="comment"> * On Windows NT it decreases a number of locked pages in a kernel.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_align(d, a)     (((d) + (a - 1)) &amp; ~(a - 1))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_align_ptr(p, a)                                                   \</span></span><br><span class="line"><span class="meta">    (u_char *) (((uintptr_t) (p) + ((uintptr_t) a - 1)) &amp; ~((uintptr_t) a - 1))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NGX_ALIGNMENT   sizeof(unsigned long)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_memzero(buf, n)       (void) memset(buf, 0, n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">intptr_t</span>        <span class="type">ngx_int_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ngx_pagesize = <span class="number">4096</span>; <span class="comment">// 一个页面的大小</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NGX_MAX_ALLOC_FROM_POOL  = ngx_pagesize - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NGX_DEFAULT_POOL_SIZE  = <span class="number">16</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NGX_POOL_ALIGNMENT   =    <span class="number">16</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NGX_MIN_POOL_SIZE   =                                                  \</span><br><span class="line">    <span class="built_in">ngx_align</span>((<span class="built_in">sizeof</span>(ngx_pool_s) + <span class="number">2</span> * <span class="built_in">sizeof</span>(ngx_pool_large_s)),            \</span><br><span class="line">              NGX_POOL_ALIGNMENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ngx_pool_large_s</span> &#123;</span><br><span class="line">    ngx_pool_large_s     *next; <span class="comment">// 指向下一个大块内存</span></span><br><span class="line">    <span class="type">void</span>                 *alloc; <span class="comment">//指向大块内存地址，因为这个有信息是存放在小块内存里面的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*ngx_pool_cleanup_pt)</span><span class="params">(<span class="type">void</span> *data)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ngx_pool_cleanup_s</span> &#123;</span><br><span class="line">    ngx_pool_cleanup_pt   handler;</span><br><span class="line">    <span class="type">void</span>                 *data;</span><br><span class="line">    ngx_pool_cleanup_s   *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ngx_pool_data_t</span>&#123;</span><br><span class="line">    u_char               *last;</span><br><span class="line">    u_char               *end;</span><br><span class="line">    ngx_pool_s           *next; <span class="comment">// 下一个内存块</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>            failed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ngx_pool_s</span> &#123;</span><br><span class="line">    <span class="type">ngx_pool_data_t</span>       d;</span><br><span class="line">    <span class="type">size_t</span>                max;</span><br><span class="line">    ngx_pool_s           *current;</span><br><span class="line">    ngx_pool_large_s     *large;</span><br><span class="line">    ngx_pool_cleanup_s   *cleanup; <span class="comment">// 这是一个回调函数，假设内存块中存储的对象有指针变量，指向的一个外部资源，需要通过这个回调函数去释放，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ngx_mem_pool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    ngx_pool_s *pool;</span><br><span class="line">    <span class="comment">//小块内存分配</span></span><br><span class="line">    <span class="function"><span class="type">void</span> *<span class="title">ngx_palloc_small</span><span class="params">(<span class="type">size_t</span> size,<span class="type">ngx_uint_t</span> align)</span></span>;</span><br><span class="line">    <span class="comment">//大块内存分配</span></span><br><span class="line">    <span class="function"><span class="type">void</span> *<span class="title">ngx_palloc_large</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">    <span class="comment">//分配新的小块内存池</span></span><br><span class="line">    <span class="function"><span class="type">void</span> *<span class="title">ngx_palloc_block</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ngx_mem_pool</span>(<span class="comment">/* args */</span>);</span><br><span class="line">    ~<span class="built_in">ngx_mem_pool</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="title">ngx_create_pool</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="title">ngx_palloc</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">    <span class="comment">// 和上面的函数一样，但不考虑内存字节对齐 </span></span><br><span class="line">    <span class="function"><span class="type">void</span> * <span class="title">ngx_pnalloc</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">    <span class="comment">//调用的是ngx pa11oc实现内存分配，但是会初始化0</span></span><br><span class="line">    <span class="function"><span class="type">void</span> *<span class="title">ngx_pcalloc</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">    <span class="comment">//释放大块内存</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ngx_pfree</span><span class="params">(<span class="type">void</span> *p)</span></span>;<span class="comment">//这个不考虑内存对齐</span></span><br><span class="line">    <span class="comment">//内存重置函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ngx_reset_pool</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//内存池的销毁函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ngx_destroy_pool</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">//添加回调清理操作函数</span></span><br><span class="line">    <span class="function">ngx_pool_cleanup_s *<span class="title">ngx_pool_cleanup_add</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ngx_mem_pool::<span class="built_in">ngx_mem_pool</span>(<span class="comment">/* args */</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ngx_mem_pool::~<span class="built_in">ngx_mem_pool</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ngx_mem_pool.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/ngx_mem_pool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">ngx_mem_pool::ngx_create_pool</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">    ngx_pool_s  *p;</span><br><span class="line"></span><br><span class="line">    p = (ngx_pool_s*)<span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.last = (u_char *) p + <span class="built_in">sizeof</span>(ngx_pool_s);</span><br><span class="line">    p-&gt;d.end = (u_char *) p + size;</span><br><span class="line">    p-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    size = size - <span class="built_in">sizeof</span>(ngx_pool_s);</span><br><span class="line">    p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;</span><br><span class="line"></span><br><span class="line">    p-&gt;current = p;</span><br><span class="line">    p-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;cleanup = <span class="literal">NULL</span>;</span><br><span class="line">    pool = p;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_palloc</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= pool-&gt;max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ngx_palloc_small</span>(size, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ngx_palloc_large</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 和上面的函数一样，但不考虑内存字节对齐 </span></span><br><span class="line"><span class="function"><span class="type">void</span> * <span class="title">ngx_mem_pool::ngx_pnalloc</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= pool-&gt;max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ngx_palloc_small</span>(size, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ngx_palloc_large</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用的是ngx pa11oc实现内存分配，但是会初始化0</span></span><br><span class="line"><span class="function"><span class="type">void</span> * <span class="title">ngx_mem_pool::ngx_pcalloc</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">    <span class="type">void</span> *p;</span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">ngx_palloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;</span><br><span class="line">        <span class="built_in">ngx_memzero</span>(p, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_palloc_small</span><span class="params">(<span class="type">size_t</span> size, <span class="type">ngx_uint_t</span> align)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    ngx_pool_s  *p;</span><br><span class="line"></span><br><span class="line">    p = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        m = p-&gt;d.last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (align) &#123;</span><br><span class="line">            m = <span class="built_in">ngx_align_ptr</span>(m, NGX_ALIGNMENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="type">size_t</span>) (p-&gt;d.end - m) &gt;= size) &#123;</span><br><span class="line">            p-&gt;d.last = m + size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p-&gt;d.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ngx_palloc_block</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_palloc_block</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="type">size_t</span>       psize;</span><br><span class="line">    ngx_pool_s  *p, *newblock;</span><br><span class="line"></span><br><span class="line">    psize = (<span class="type">size_t</span>) (pool-&gt;d.end - (u_char *) pool);</span><br><span class="line"></span><br><span class="line">    m = (u_char*)<span class="built_in">malloc</span>(psize);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newblock = (ngx_pool_s *) m;</span><br><span class="line"></span><br><span class="line">    newblock-&gt;d.end = m + psize;</span><br><span class="line">    newblock-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    newblock-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    m += <span class="built_in">sizeof</span>(<span class="type">ngx_pool_data_t</span>);</span><br><span class="line">    m = <span class="built_in">ngx_align_ptr</span>(m, NGX_ALIGNMENT);</span><br><span class="line">    newblock-&gt;d.last = m + size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;d.failed++ &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            pool-&gt;current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.next = newblock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_palloc_large</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>              *p;</span><br><span class="line">    <span class="type">ngx_uint_t</span>         n;</span><br><span class="line">    ngx_pool_large_s  *large;</span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (large = pool-&gt;large; large; large = large-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (large-&gt;alloc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            large-&gt;alloc = p;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n++ &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large = (ngx_pool_large_s*)<span class="built_in">ngx_palloc_small</span>(<span class="built_in">sizeof</span>(ngx_pool_large_s), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (large == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_pfree</span><span class="params">(<span class="type">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ngx_pool_large_s  *l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">            l-&gt;alloc = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ngx_pool_cleanup_s *</span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_pool_cleanup_add</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ngx_pool_cleanup_s  *c;</span><br><span class="line"></span><br><span class="line">    c = (ngx_pool_cleanup_s*)<span class="built_in">ngx_palloc</span>(<span class="built_in">sizeof</span>(ngx_pool_cleanup_s));</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size) &#123;</span><br><span class="line">        c-&gt;data = <span class="built_in">ngx_palloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;handler = <span class="literal">NULL</span>;</span><br><span class="line">    c-&gt;next = pool-&gt;cleanup;</span><br><span class="line"></span><br><span class="line">    pool-&gt;cleanup = c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_destroy_pool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ngx_pool_s          *p, *n;</span><br><span class="line">    ngx_pool_large_s    *l;</span><br><span class="line">    ngx_pool_cleanup_s  *c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;handler) &#123;</span><br><span class="line">            c-&gt;<span class="built_in">handler</span>(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool, n = pool-&gt;d.next; <span class="comment">/* void */</span>; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">ngx_mem_pool::ngx_reset_pool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ngx_pool_s        *p;</span><br><span class="line">    ngx_pool_large_s  *l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool; p; p = p-&gt;d.next) &#123;</span><br><span class="line">        p-&gt;d.last = (u_char *) p + <span class="built_in">sizeof</span>(ngx_pool_s);</span><br><span class="line">        p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*可以改写成这样</span></span><br><span class="line"><span class="comment">    // 处理第一块内存</span></span><br><span class="line"><span class="comment">    p = pool;</span></span><br><span class="line"><span class="comment">    p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);</span></span><br><span class="line"><span class="comment">    p-&gt;d.failed = 0;</span></span><br><span class="line"><span class="comment">    // 处理后面的内存</span></span><br><span class="line"><span class="comment">    for (p = p-&gt;d.next; p; p = p-&gt;d.next) &#123;</span></span><br><span class="line"><span class="comment">        p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_data_t);</span></span><br><span class="line"><span class="comment">        p-&gt;d.failed = 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    pool-&gt;current = pool;</span><br><span class="line">    pool-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🥧本文讲述nignx内存管理</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    <category term="源码分析" scheme="https://yanhool.github.io/categories/c/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
    <category term="源码分析" scheme="https://yanhool.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>SGI STL二级空间配置器学习笔记</title>
    <link href="https://yanhool.github.io/posts/20230321d.html"/>
    <id>https://yanhool.github.io/posts/20230321d.html</id>
    <published>2023-03-20T10:19:03.000Z</published>
    <updated>2023-03-20T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><blockquote><p>SGI STL包含了一级空间配置器和二级空间配置器，其中一级空间配置器allocator采用malloc和free来</p><p>管理内存，和C++标准库中提供的allocator是一样的，但其二级空间配置器allocator采用了基于freelist</p><p>自由链表原理的内存池机制实现内存管理。</p></blockquote><p>c++的空间配置其中需要实现以下几个函数：</p><p>allocate:负责给容器开辟内存空间 =&gt; malloc<br>deallocate:负责释放容器内存空间=&gt; free<br>construct:负责给容器构造一个对象=&gt; 定位new实现<br>destroy:负责析构容器的对象 =&gt; p-&gt;~T()</p><p>空间配置器的<strong>核心作用</strong>：分离了对象的内存开辟，和对象构造。没有自己配置空间配置器时，new直接完成了内存空间的开辟和对象的构造，而实现空间配置器后，<code>allocate负</code>责开辟空间，<code>construct负</code>责在开辟的空间上构造对象,也分离了对象的析构和内存的释放</p><p>SGI STL =》两个allocator的实现：一级allocator内存管理malloc/free    二级allocator内存管理：内存池的实现<br>C++STL =》allocator空间配置器</p><p>本文主要剖析内存池的SGI STL实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>, <span class="keyword">class</span> <span class="title class_">_Alloc</span> = __STL_DEFAULT_ALLOCATOR(_Tp) &gt;</span><br><span class="line"><span class="keyword">class</span> vector : <span class="keyword">protected</span> _Vector_base&lt;_Tp, _Alloc&gt; </span><br><span class="line">&#123;...&#125;</span><br><span class="line"><span class="type">void</span> <span class="built_in">push_back</span>(<span class="type">const</span> _Tp&amp; __x) &#123;</span><br><span class="line"><span class="keyword">if</span> (_M_finish != _M_end_of_storage) &#123;</span><br><span class="line">  <span class="built_in">construct</span>(_M_finish, __x);</span><br><span class="line">  ++_M_finish;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  _M_insert_aux(<span class="built_in">end</span>(), __x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_T1</span>, <span class="keyword">class</span> <span class="title class_">_T2</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> _Construct(_T1* __p, <span class="type">const</span> _T2&amp; __value) &#123;</span><br><span class="line">  <span class="keyword">new</span> ((<span class="type">void</span>*) __p) _T1(__value); <span class="comment">//在指针__p指向的内存空间上构造__value</span></span><br><span class="line">    <span class="comment">// 这个操作叫做placement new，就是在指针p所指向的内存空间创建一个T1类型的对象，但是对象的内容是从T2类型的对象转换过来的（调用了T1的构造函数，T1::T1(value)）。</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>STL vector容器默认使用<code>__STL_DEFAULT_ALLOCATOR</code>空间配置器，在<code>push_back</code>中也是在已经开辟的内存中使用<code>construct</code>构造对象。然而跟进<code>construct</code>函数后发现依然用的是全局<code>new</code>函数，全局<code>new</code>函数会在分配的空间的首尾加一些标识记录空间的长度。</p><p>STL容器：底层存储的对象的构造和析构是定义的全局的函数模板Construct和Destroy完成的！</p><p>接下来查看<code>__STL_DEFAULT_ALLOCATOR</code>一级空间配置器，它是由 <code>__STL_USE_STD_ALLOCATORS</code>来控制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">ifndef</span> __STL_DEFAULT_ALLOCATOR</span></span><br><span class="line"><span class="meta">#   <span class="keyword">ifdef</span> __STL_USE_STD_ALLOCATORS</span></span><br><span class="line"><span class="meta">#     <span class="keyword">define</span> __STL_DEFAULT_ALLOCATOR(T) __STL_USE_STD_ALLOCATORS<span class="string">&lt; T &gt;</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#     <span class="keyword">define</span> __STL_DEFAULT_ALLOCATOR(T) alloc</span></span><br><span class="line"><span class="meta">#   <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>查看<code>__STL_USE_STD_ALLOCATORS&lt;T&gt;</code>-&gt;<code>allocator&lt;T&gt;</code>-&gt;<code>alloc</code>-&gt;<code>malloc_alloc</code>-&gt;<code>__malloc_alloc_template&lt;0&gt;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__malloc_alloc_template</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="type">void</span>* __result = <span class="built_in">malloc</span>(__n);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == __result) __result = _S_oom_malloc(__n);</span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> <span class="comment">/* __n */</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(__p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来查看二级空间配置器，从<code>else</code>进入<code>define __STL_DEFAULT_ALLOCATOR(T) alloc</code>进入<code>__default_alloc_template&lt;__NODE_ALLOCATOR_THREADS, 0&gt;</code>其中</p><p><code>__NODE_ALLOCATOR_THREADS</code>表示这是一个线程安全的配置器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> threads, <span class="type">int</span> inst&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__default_alloc_template</span> &#123;</span><br><span class="line">    <span class="comment">/* __n must be &gt; 0      */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__n &gt; (<span class="type">size_t</span>) _MAX_BYTES) &#123;</span><br><span class="line">      __ret = malloc_alloc::<span class="built_in">allocate</span>(__n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      _Obj* __STL_VOLATILE* __my_free_list</span><br><span class="line">          = _S_free_list + _S_freelist_index(__n);</span><br><span class="line">      <span class="comment">// Acquire the lock here with a constructor call.</span></span><br><span class="line">      <span class="comment">// This ensures that it is released in exit or during stack</span></span><br><span class="line">      <span class="comment">// unwinding.</span></span><br><span class="line"><span class="meta">#     <span class="keyword">ifndef</span> _NOTHREADS</span></span><br><span class="line">      <span class="comment">/*REFERENCED*/</span></span><br><span class="line">      _Lock __lock_instance;</span><br><span class="line"><span class="meta">#     <span class="keyword">endif</span></span></span><br><span class="line">      _Obj* __RESTRICT __result = *__my_free_list;</span><br><span class="line">      <span class="keyword">if</span> (__result == <span class="number">0</span>)</span><br><span class="line">        __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">        __ret = __result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __ret;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* __p may not be 0 */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__n &gt; (<span class="type">size_t</span>) _MAX_BYTES)</span><br><span class="line">      malloc_alloc::<span class="built_in">deallocate</span>(__p, __n);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      _Obj* __STL_VOLATILE*  __my_free_list</span><br><span class="line">          = _S_free_list + _S_freelist_index(__n);</span><br><span class="line">      _Obj* __q = (_Obj*)__p;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// acquire lock</span></span><br><span class="line"><span class="meta">#       <span class="keyword">ifndef</span> _NOTHREADS</span></span><br><span class="line">      <span class="comment">/*REFERENCED*/</span></span><br><span class="line">      _Lock __lock_instance;</span><br><span class="line"><span class="meta">#       <span class="keyword">endif</span> <span class="comment">/* _NOTHREADS */</span></span></span><br><span class="line">      __q -&gt; _M_free_list_link = *__my_free_list;</span><br><span class="line">      *__my_free_list = __q;</span><br><span class="line">      <span class="comment">// lock is released here</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-重要类型和变量定义"><a href="#2-重要类型和变量定义" class="headerlink" title="2.重要类型和变量定义"></a>2.重要类型和变量定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内存池的粒度信息</span></span><br><span class="line"><span class="keyword">enum</span> &#123;_ALIGN = <span class="number">8</span>&#125;;<span class="comment">// 以8字节 对齐</span></span><br><span class="line"><span class="keyword">enum</span> &#123;_MAX_BYTES = <span class="number">128</span>&#125;; <span class="comment">// 链表最大存储单位是128字节</span></span><br><span class="line"><span class="keyword">enum</span> &#123;_NFREELISTS = <span class="number">16</span>&#125;; <span class="comment">//整个内存池是由一个长度为16的链表构成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一个内存chunk块的头信息</span></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">_Obj</span> &#123;</span><br><span class="line"><span class="keyword">union</span> <span class="title class_">_Obj</span>* _M_free_list_link;  <span class="comment">// 可以理解为当前节点的next指针</span></span><br><span class="line"><span class="type">char</span> _M_client_data[<span class="number">1</span>]; <span class="comment">/* The client sees this. */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组织所有自由链表的数组，数组的每一个元素的类型是_Obj*，全部初始化为0</span></span><br><span class="line"><span class="type">static</span> _Obj* __STL_VOLATILE _S_free_list[_NFREELISTS];</span><br><span class="line"><span class="comment">// __STL_VOLATILE 是 volatile的宏，表示这个变量的值经常被更改</span></span><br><span class="line"><span class="comment">// Chunk allocation state. 记录内存chunk块的分配情况</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* _S_start_free;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* _S_end_free;</span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> _S_heap_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> __threads, <span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="type">char</span>* __default_alloc_template&lt;__threads, __inst&gt;::_S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> __threads, <span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="type">char</span>* __default_alloc_template&lt;__threads, __inst&gt;::_S_end_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> __threads, <span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="type">size_t</span> __default_alloc_template&lt;__threads, __inst&gt;::_S_heap_size = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/21/102654a064ce4a07879d2598d3e2a6ec" alt=""></p><center style="font-size:18px;color:#C0C0C0">_S_free_list结构图</center><h2 id="3-重要的辅助接口函数"><a href="#3-重要的辅助接口函数" class="headerlink" title="3. 重要的辅助接口函数"></a>3. 重要的辅助接口函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将 __bytes 上调至最邻近的 8 的倍数,作用是为了内存对齐*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> _S_round_up(<span class="type">size_t</span> __bytes) <span class="comment">// 1~8=》8 9~16=》16 17~24=》24 ......</span></span><br><span class="line">&#123; <span class="keyword">return</span> (((__bytes) + (<span class="type">size_t</span>) _ALIGN<span class="number">-1</span>) &amp; ~((<span class="type">size_t</span>) _ALIGN - <span class="number">1</span>)); &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">_ALIGN - 1 = 7 然后强转成size_t 4字节32位而后按位取反</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000111</span></span><br><span class="line"><span class="comment">11111111 11111111 11111111 11111000</span></span><br><span class="line"><span class="comment">假设 __bytes 为6 0110</span></span><br><span class="line"><span class="comment">((__bytes) + (size_t) _ALIGN-1)</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000111  +</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000110 得</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00001001 &amp;</span></span><br><span class="line"><span class="comment">11111111 11111111 11111111 11111000 = </span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00001000 = 8</span></span><br><span class="line"><span class="comment">按位&amp;表示始终把后三位抛弃掉，留下来的始终是8的倍数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*返回 __bytes 大小的chunk块位于 free-list 中的编号*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> _S_freelist_index(<span class="type">size_t</span> __bytes) &#123;</span><br><span class="line"><span class="keyword">return</span> (((__bytes) + (<span class="type">size_t</span>)_ALIGN<span class="number">-1</span>)/(<span class="type">size_t</span>)_ALIGN - <span class="number">1</span>); &#125;</span><br></pre></td></tr></table></figure><h2 id="4-内存池管理函数"><a href="#4-内存池管理函数" class="headerlink" title="4. 内存池管理函数"></a>4. 内存池管理函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分配内存的入口函数</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 负责把分配好的chunk块进行连接，添加到自由链表当中</span></span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* _<span class="title">S_refill</span><span class="params">(<span class="type">size_t</span> __n)</span></span>;</span><br><span class="line"><span class="comment">// 分配相应内存字节大小的chunk块，并且给下面三个成员变量初始化</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* _S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs);</span><br><span class="line"><span class="comment">// 把chunk块归还到内存池</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> __n)</span></span>;</span><br><span class="line"><span class="comment">// 内存池扩容函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> threads, <span class="type">int</span> inst&gt;</span><br><span class="line"><span class="type">void</span>*</span><br><span class="line">__default_alloc_template&lt;threads, inst&gt;::<span class="built_in">reallocate</span>(<span class="type">void</span>* __p, <span class="type">size_t</span> __old_sz, <span class="type">size_t</span> __new_sz);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__n &gt; (<span class="type">size_t</span>) _MAX_BYTES) &#123; <span class="comment">// 需要的内存大于128字节直接内存分配给它，否则从内存池中获取</span></span><br><span class="line">      __ret = malloc_alloc::<span class="built_in">allocate</span>(__n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      _Obj* __STL_VOLATILE* __my_free_list</span><br><span class="line">          = _S_free_list + _S_freelist_index(__n);<span class="comment">// 数组地址+偏移</span></span><br><span class="line">      <span class="comment">// Acquire the lock here with a constructor call.</span></span><br><span class="line">      <span class="comment">// This ensures that it is released in exit or during stack</span></span><br><span class="line">      <span class="comment">// unwinding.</span></span><br><span class="line">    <span class="meta">#     <span class="keyword">ifndef</span> _NOTHREADS</span></span><br><span class="line">      <span class="comment">/*REFERENCED*/</span></span><br><span class="line">      _Lock __lock_instance; <span class="comment">// 栈上对象（因为这是在函数中定义）出作用域(代码块&#123;&#125;)自动析构，锁就自己解开了</span></span><br><span class="line">    <span class="meta">#     <span class="keyword">endif</span></span></span><br><span class="line">      _Obj* __RESTRICT __result = *__my_free_list;</span><br><span class="line">      <span class="keyword">if</span> (__result == <span class="number">0</span>)</span><br><span class="line">        __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">        __ret = __result;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> __ret;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Returns an object of size __n, and optionally adds to size __n free list.*/</span></span><br><span class="line"><span class="comment">/* We assume that __n is properly aligned.                                */</span></span><br><span class="line"><span class="comment">/* We hold the allocation lock.                                         */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> __threads, <span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="type">void</span>*</span><br><span class="line">__default_alloc_template&lt;__threads, __inst&gt;::_S_refill(<span class="type">size_t</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 把 __n * __nobjs 大小的内存块分配好</span></span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs); <span class="comment">// 传的是 __nobjs的引用</span></span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == __nobjs) <span class="keyword">return</span>(__chunk); <span class="comment">// 如果还有一个节点直接把这个节点给它 不做连接了</span></span><br><span class="line">    __my_free_list = _S_free_list + _S_freelist_index(__n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Build free list in chunk */</span></span><br><span class="line">      __result = (_Obj*)__chunk;</span><br><span class="line">      *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">      <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++) &#123;</span><br><span class="line">        __current_obj = __next_obj;</span><br><span class="line">        __next_obj = (_Obj*)((<span class="type">char</span>*)__next_obj + __n); <span class="comment">// 转成char* 是为了做加法，加1走1字节</span></span><br><span class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i) &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span>(__result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/21/f6a38a204f5f47fa8d616368fec67b0a" alt=""></p><center style="font-size:18px;color:#C0C0C0">_S_refill流程图</center><p>接下来看<code>_S_chunk_alloc</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We allocate memory in large chunks in order to avoid fragmenting     */</span></span><br><span class="line"><span class="comment">/* the malloc heap too much.                                            */</span></span><br><span class="line"><span class="comment">/* We assume that size is properly aligned.                             */</span></span><br><span class="line"><span class="comment">/* We hold the allocation lock.                                         */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> __threads, <span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="type">char</span>*</span><br><span class="line">__default_alloc_template&lt;__threads, __inst&gt;::_S_chunk_alloc(<span class="type">size_t</span> __size, </span><br><span class="line">                                                            <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs; <span class="comment">// 8 * 20</span></span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free; <span class="comment">// 默认值为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__bytes_left &gt;= __total_bytes) &#123;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__bytes_left &gt;= __size) &#123; <span class="comment">// 假设之前一直分配的8字节内存，现在突然要分配16字节，如果现在 __bytes_left的容量能够满足的化，会从8字节内存池中给16字节</span></span><br><span class="line">        __nobjs = (<span class="type">int</span>)(__bytes_left/__size); <span class="comment">// 把整个剩余空间都按照__size字节划分了</span></span><br><span class="line">        __total_bytes = __size * __nobjs;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">size_t</span> __bytes_to_get = </span><br><span class="line">  <span class="number">2</span> * __total_bytes + _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>); <span class="comment">// 2 * 160相当于40个node _S_heap_size / 16</span></span><br><span class="line">        <span class="comment">// Try to make use of the left-over piece.</span></span><br><span class="line">        <span class="keyword">if</span> (__bytes_left &gt; <span class="number">0</span>) &#123; <span class="comment">// 之前还有剩余但小于 __size，则把剩余的空间放在能能对齐的地方，比如还剩31字节，则把剩余空间放在专门存储32字节的链表下 </span></span><br><span class="line">            _Obj* __STL_VOLATILE* __my_free_list =</span><br><span class="line">                        _S_free_list + _S_freelist_index(__bytes_left);</span><br><span class="line"></span><br><span class="line">            ((_Obj*)_S_start_free) -&gt; _M_free_list_link = *__my_free_list;</span><br><span class="line">            *__my_free_list = (_Obj*)_S_start_free;</span><br><span class="line">        &#125;</span><br><span class="line">        _S_start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == _S_start_free) &#123; <span class="comment">// 开辟内存失败</span></span><br><span class="line">            <span class="type">size_t</span> __i;</span><br><span class="line">            _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __p;</span><br><span class="line">            <span class="comment">// Try to make do with what we have.  That can&#x27;t</span></span><br><span class="line">            <span class="comment">// hurt.  We do not try smaller requests, since that tends</span></span><br><span class="line">            <span class="comment">// to result in disaster on multi-process machines.</span></span><br><span class="line">            <span class="keyword">for</span> (__i = __size;<span class="comment">// 看当前字节对齐后往后的下挂链表有剩余空间</span></span><br><span class="line">                 __i &lt;= (<span class="type">size_t</span>) _MAX_BYTES;</span><br><span class="line">                 __i += (<span class="type">size_t</span>) _ALIGN) &#123;</span><br><span class="line">                __my_free_list = _S_free_list + _S_freelist_index(__i);</span><br><span class="line">                __p = *__my_free_list;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> != __p) &#123;</span><br><span class="line">                    *__my_free_list = __p -&gt; _M_free_list_link;</span><br><span class="line">                    _S_start_free = (<span class="type">char</span>*)__p;</span><br><span class="line">                    _S_end_free = _S_start_free + __i;</span><br><span class="line">                    <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">                    <span class="comment">// Any leftover piece will eventually make it to the</span></span><br><span class="line">                    <span class="comment">// right free list.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">// 如果8~128字节链表都存满了</span></span><br><span class="line">    _S_end_free = <span class="number">0</span>;<span class="comment">// In case of exception.</span></span><br><span class="line">            _S_start_free = (<span class="type">char</span>*)malloc_alloc::<span class="built_in">allocate</span>(__bytes_to_get);</span><br><span class="line">            <span class="comment">// This should either throw an</span></span><br><span class="line">            <span class="comment">// exception or remedy the situation.  Thus we assume it</span></span><br><span class="line">            <span class="comment">// succeeded.</span></span><br><span class="line">        &#125;</span><br><span class="line">        _S_heap_size += __bytes_to_get;</span><br><span class="line">        _S_end_free = _S_start_free + __bytes_to_get;</span><br><span class="line">        <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">_S_start_free = (<span class="type">char</span>*)malloc_alloc::<span class="built_in">allocate</span>(__bytes_to_get); <span class="comment">// allocate调用的是下面的函数</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="type">void</span>* __result = <span class="built_in">malloc</span>(__n);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == __result) __result = _S_oom_malloc(__n); <span class="comment">//如果依然分配失败，调用_S_oom_malloc</span></span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="type">void</span>*</span><br><span class="line">__malloc_alloc_template&lt;__inst&gt;::_S_oom_malloc(<span class="type">size_t</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">void</span> (* __my_malloc_handler)(); <span class="comment">// 函数指针 假设用户传给一个回调函数，当内存分配失败的时候会调用这个回调函数，该函数可能是释放一些可以释放的内存空间</span></span><br><span class="line">    <span class="type">void</span>* __result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        __my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == __my_malloc_handler) &#123; __THROW_BAD_ALLOC; &#125; <span class="comment">// 如果用户也没设置回调函数 返回错误</span></span><br><span class="line">        (*__my_malloc_handler)(); <span class="comment">// 直到调用回调函数成功</span></span><br><span class="line">        __result = <span class="built_in">malloc</span>(__n);</span><br><span class="line">        <span class="keyword">if</span> (__result) <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配完后该讲释放了<code>deallocate</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* __p may not be 0 */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__n &gt; (<span class="type">size_t</span>) _MAX_BYTES)</span><br><span class="line">      malloc_alloc::<span class="built_in">deallocate</span>(__p, __n);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      _Obj* __STL_VOLATILE*  __my_free_list</span><br><span class="line">          = _S_free_list + _S_freelist_index(__n);</span><br><span class="line">      _Obj* __q = (_Obj*)__p; <span class="comment">// __q指向要归还的节点__p</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// acquire lock</span></span><br><span class="line"><span class="meta">#       <span class="keyword">ifndef</span> _NOTHREADS</span></span><br><span class="line">      <span class="comment">/*REFERENCED*/</span></span><br><span class="line">      _Lock __lock_instance;</span><br><span class="line"><span class="meta">#       <span class="keyword">endif</span> <span class="comment">/* _NOTHREADS */</span></span></span><br><span class="line">      __q -&gt; _M_free_list_link = *__my_free_list;</span><br><span class="line">      *__my_free_list = __q;</span><br><span class="line">      <span class="comment">// lock is released here</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> <code>deallocate</code>函数（扩容）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span> threads, <span class="type">int</span> inst&gt;</span><br><span class="line"><span class="type">void</span>*</span><br><span class="line">__default_alloc_template&lt;threads, inst&gt;::<span class="built_in">reallocate</span>(<span class="type">void</span>* __p,</span><br><span class="line">                                                    <span class="type">size_t</span> __old_sz,</span><br><span class="line">                                                    <span class="type">size_t</span> __new_sz)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __copy_sz;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不在内存池中的数据</span></span><br><span class="line">    <span class="keyword">if</span> (__old_sz &gt; (<span class="type">size_t</span>) _MAX_BYTES &amp;&amp; __new_sz &gt; (<span class="type">size_t</span>) _MAX_BYTES) &#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="built_in">realloc</span>(__p, __new_sz));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_S_round_up(__old_sz) == _S_round_up(__new_sz)) <span class="keyword">return</span>(__p); <span class="comment">// 如果从6字节扩容到7字节，还是在8字节链表下，不用管</span></span><br><span class="line">    __result = <span class="built_in">allocate</span>(__new_sz);</span><br><span class="line">    __copy_sz = __new_sz &gt; __old_sz? __old_sz : __new_sz; <span class="comment">// 看是扩容还是缩容</span></span><br><span class="line">    <span class="built_in">memcpy</span>(__result, __p, __copy_sz);</span><br><span class="line">    <span class="built_in">deallocate</span>(__p, __old_sz);</span><br><span class="line">    <span class="keyword">return</span>(__result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SGI STL二级空间配置器内存池的实现优点：</p><ol><li>对于每一个字节数的chunk块分配，都是给出一部分进行使用，另一部分作为备用，这个备用可以给当前字节数使用，也可以给其它字节数使用。</li><li>对于备用内存池划分完chunk块以后，如果还有剩余的很小的内存块，再次分配的时候，会把这些小的内存块再次分配出去，内存使用非常彻底。</li><li>当指定字节数内存分配失败以后，有一个异常处理的过程，bytes-128字节所有的chunk块进行查看，如果哪个字节数有空闲的chunk块，直接借一个出去。如果上面操作失败，还会调用oom_malloc，用来调用用户传的回调函数</li></ol><h2 id="5-源码移植"><a href="#5-源码移植" class="headerlink" title="5.源码移植"></a>5.源码移植</h2>]]></content>
    
    
    <summary type="html">🥧本文讲述SGI STL二级空间配置器学习笔记</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    <category term="源码分析" scheme="https://yanhool.github.io/categories/c/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
    <category term="源码分析" scheme="https://yanhool.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>红黑树详解</title>
    <link href="https://yanhool.github.io/posts/20230320d.html"/>
    <id>https://yanhool.github.io/posts/20230320d.html</id>
    <published>2023-03-19T10:19:03.000Z</published>
    <updated>2023-03-19T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="1-为什么会有红黑树"><a href="#1-为什么会有红黑树" class="headerlink" title="1.为什么会有红黑树"></a>1.为什么会有红黑树</h2><p>信息社会存储着大量的数据，最初人们进行查找时采用从头到尾的方式遍历，但当数据量逐渐增大时，从头到尾的遍历方式所带来的时间消耗无疑太高了；后来人们对数组数据进行排序，然后通过二分法对数据进行查找，这样无疑会加快搜索速度，但添加数据时需要后移数据，这样的代价也太高了；当然，可以用链表的形式对数据进行存储，通过构建跳表的数据结构对数据进行二分查找（这不是本章的重点）；人们发现可以用二叉搜索数的方式对数据搜索（节点左边的值都小于节点本身，节点右边的值都大于节点本身，假设该树是一颗完全二叉树则节点总数为：$n=1+2+4+…+2^{h-1}=2^h-1$ =》$h=log_2(n+1)$ 可知插入和查找的时间复杂度为$O(log)$），但当节点从小到大插入数据的时候，二叉搜索树就会退化成链表，因此AVL树（平衡二叉树）就诞生了；AVL树的$|height(root-&gt;left) - hegith(root-&gt;right)| &lt;= 1$ 即每个节点左子树高度与右子树高度之差的绝对值小于等于 1，如果插入数据后不满足就要对树进行旋转操作；由于AVL树需要不断的对树进行调整来满足其AVL的性质，所以红黑树就诞生了；RBT是一种自平衡的二叉搜索树，每个节点有一个额外的bit存储空间存储颜色：它的颜色可以是红色或黑色。红黑树(RBT)在插入和删除时需要的旋转次数比AVL树少。与AVL树相比，RBT树的平衡性较差，所以可以得出如果插入删除操作不频繁，但搜索很频繁优先使用AVL树，但如果三者都很频繁则使用红黑树。</p><blockquote><p>AVL树的旋转：LL 直接右旋 LR 先左旋再右旋 RR 直接右旋 RL 先右旋再左旋</p></blockquote><h2 id="2-今天的主角：红黑树"><a href="#2-今天的主角：红黑树" class="headerlink" title="2.今天的主角：红黑树"></a>2.今天的主角：红黑树</h2><blockquote><p>看之前先看一下 <a href="https://www.zhihu.com/question/312327402">红黑树解释-敖丙</a><br>这个人写的明显更好  =￣ω￣=</p></blockquote><p>​        红黑树是基于2-3-4树，由于直接进行不同节点间的转化会造成较大的开销，所以选择以二叉树为基础，在二叉树的属性中加入一个<strong>颜色属性</strong>来表示2-3-4树中不同的节点。2节点对应着红黑树中的黑色节点，而2-3-4树中的非2节点是以<strong>红节点+黑节点</strong>的方式存在，红节点的意义是与黑色父节点结合，表达着2-3-4树中的3，4节点。2-3-4树到红黑树的节点转换。2节点直接转化为黑色节点；3节点这里可以有两种表现形式，左倾红节点(左倾红黑树限制了如果在树中出现了红色节点，那么这个节点必须是左儿子)或者右倾红节点。而4节点被强制<strong>要求</strong>转化为一个黑父带着左右两个红色儿子。</p><p>插入：2-3树的插入。我们的插入操作需要遵循一个<strong>原则</strong>：先将这个元素尝试性地放在<strong>已经存在的节点中</strong>，如果要存放的节点是2节点，那么插入后会变成3节点，如果要存放的节点是3节点，那么插入后会变成4节点（<strong>临时</strong>）。然后，我们对可能生成的临时4节点进行分裂处理，使得临时4节点消失。</p><p>删除：对于2-3树的删除我们主要要考虑待删除元素在2节点这种情况，因为如果待删除元素在3节点，那么可以直接将这个元素删除，而不会破坏2-3树的任何性质（删除这个元素不会引起高度的变化）。当待删除元素在2节点的时候，不断地判断当前节点是否为2节点，如果是，就从它的兄弟节点或者它的父节点借一个元素，使得当前节点由2节点成为一个3节点或者一个临时4节点。</p><p><img src="https://pica.zhimg.com/80/v2-a8c1bad2ca7f54dfbabb192cc0f7d122_720w.webp?source=1940ef5c" style="zoom:80%;" /></p><h3 id="红黑树的一些性质："><a href="#红黑树的一些性质：" class="headerlink" title="红黑树的一些性质："></a>红黑树的一些性质：</h3><ol><li>红黑树是一棵平衡二叉搜索树，其中序遍历单调不减。</li><li>节点是红色或黑色。</li><li>根节点是黑色。</li><li>每个叶节点(也有称外部节点的，目的是将红黑树变为真二叉树，即 NULL 节点，空节点)是黑色的。</li><li>每个红色节点的两个子节点都是黑色。(换句话说，从每个叶子到根的所有路径上不能有两个连续的红色节点)</li><li>从根节点到每个叶子的所有路径都包含相同数目的黑色节点（这个数值叫做黑高度）。</li><li>从根到叶子节点的最长可能路径不多于最短可能路径的两倍长。（最短k个黑色节点连在一起，最长黑红相间2k-1个节点，因为两个红色节点不能连在一起）</li></ol><p>下面一棵树就是红黑树</p><p><img src="https://s1.vika.cn/space/2023/03/19/973d491a93fa4decade22ccee8a804e6" alt="100" style="zoom:50%;" /></p><p>以下则不是红黑树</p><p><img src="https://s1.vika.cn/space/2023/03/19/9dbb7b8066654a60b1d4dc604ba64508" style="zoom:67%;" /></p><p>红黑树的高度最多为$2log_2(n+1)$</p><p>红黑树与二叉搜索树的不同：红黑树是以null值为叶子节点</p><p><img src="https://s1.vika.cn/space/2023/03/19/4d100c50e75744558b53073dcd4bc298" style="zoom:50%;" /></p><p>黑色高度：该节点到叶子节点的黑色节点个数</p><p><img src="https://s1.vika.cn/space/2023/03/19/a980d95dbf3345a48f3863bfc42cf86e" style="zoom:67%;" /></p><h2 id="3-红黑树的平衡操作"><a href="#3-红黑树的平衡操作" class="headerlink" title="3.红黑树的平衡操作"></a>3.红黑树的平衡操作</h2><h3 id="3-1插入"><a href="#3-1插入" class="headerlink" title="3.1插入"></a>3.1插入</h3><p>插入的都是红色节点</p><p>3.1.1被插入的节点是根节点。<br>    直接把此节点涂为黑色。（即插入一颗空树）<br>3.1.2被插入的节点的父节点是黑色。<br>    什么也不需要做。<br>3.1.3被插入的节点的父节点是红色。</p><ol><li>当前节点的祖父节点的另一个子节点（叔叔节点）也是红色。<ol><li>将”父节点”设为黑色。</li><li>将”叔叔节点”设为黑色。</li><li>将”祖父节点”设为”红色”。</li><li>将“祖父节点”设为“当前节点”（红色节点）；即，之后继续对“当前节点“进行操作</li></ol></li><li>叔叔节点是黑色，且当前节点是其父节点的右孩子<ol><li>将”父节点“作为“新的当前节点”。</li><li>以”新的当前节点”为支点进行左旋。</li></ol></li><li>叔叔节点是黑色，且当前节点是其父节点的左孩子<ol><li>将”父节点”设为”黑色”。</li><li>将”祖父节点”设为”红色”。</li><li>以”祖父节点”为支点进行右旋。</li></ol></li></ol><p><img src="https://s1.vika.cn/space/2023/03/19/898cf6866cd74af4b505f3945dff05b0" style="zoom:67%;" /></p><center style="font-size:18px;color:#C0C0C0;text-decoration:underline">插入节点步骤</center><h3 id="3-2-删除操作"><a href="#3-2-删除操作" class="headerlink" title="3.2 删除操作"></a>3.2 删除操作</h3><p>红黑树的删除节点操作，在删除<code>x</code>（假设<code>x</code>只有一个儿子）后会把<code>x</code>的儿子变成<code>x</code>节点的位置，此时给<code>x</code>的儿子节点加上黑色（这时此节点的颜色可能是”红+黑”或者”黑+黑”）;如果<code>x</code>没有儿子，相当于指向NIL，红黑树中NIL是黑色</p><p>3.2.1 x指向一个”红+黑”节点。<br>    将x设为一个”黑”节点即可。<br>3.2.2 x指向根。<br>    将x设为一个”黑”节点即可。<br>3.2.3 “黑+黑”</p><ol><li>x的兄弟节点是红色<ol><li>将x的兄弟节点设为”黑色”。</li><li>将x的父节点设为”红色”。</li><li>对x的父节点进行左旋。</li><li>左旋后，重新设置x的兄弟节点。</li></ol></li><li>x的兄弟节点是黑色，x的兄弟节点的两个孩子都是黑色。<ol><li>将x的兄弟节点设为”红色”。</li><li>设置x的父节点”为”新的x节点”。</li></ol></li><li>x的兄弟节点是黑色；x的兄弟节点的左孩子是红色，右孩子是黑色的。<ol><li>将x兄弟节点的左孩子设为”黑色”。</li><li>将x兄弟节点设为“红色”。</li><li>对x的兄弟节点进行右旋。</li><li>右旋后，重新设置x的兄弟节点。</li></ol></li><li>x的兄弟节点是黑色；x的兄弟节点的右孩子是红色的，x的兄弟节点的左孩子任意颜色。<ol><li>将x父节点颜色赋值给的兄弟节点。</li><li>将x父节点设为”黑色”。</li><li>将x兄弟节点的右子节设为”黑色”。</li><li>对x的父节点进行左旋。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">🥧本文讲述红黑树的原理</summary>
    
    
    
    <category term="算法" scheme="https://yanhool.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://yanhool.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>常用算法模板</title>
    <link href="https://yanhool.github.io/posts/20230315d.html"/>
    <id>https://yanhool.github.io/posts/20230315d.html</id>
    <published>2023-03-15T10:19:03.000Z</published>
    <updated>2023-03-15T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a25d876302cb605a0668bef9e5ce723c3cd9008ef055aba817d3630fa3683413"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 文件正在施工中，暂时无法进入！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🥧本文汇总从网上整理的常用算法模板</summary>
    
    
    
    <category term="算法" scheme="https://yanhool.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://yanhool.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++高级笔记</title>
    <link href="https://yanhool.github.io/posts/20230303d.html"/>
    <id>https://yanhool.github.io/posts/20230303d.html</id>
    <published>2023-03-03T10:19:03.000Z</published>
    <updated>2023-03-25T06:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Test</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function">        :_ma(a)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Test(int)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">const</span> Test&amp; t)</span><br><span class="line">        :_ma(t._ma)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>()&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~Test()&quot;</span> &lt;&lt;  std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    Test&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;operator=()&quot;</span> &lt;&lt;  std::endl;</span><br><span class="line">        _ma = t._ma;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ma;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Test t1;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(t1)</span></span>;</span><br><span class="line">    Test t3 = t1;</span><br><span class="line">    <span class="comment">// Test(20)显示生成划临时对象 生存周期：所在的语句</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       C++编译器对于对象构造的优化：</span></span><br><span class="line"><span class="comment">       用引临时对象生成新对象的时候，</span></span><br><span class="line"><span class="comment">       临时对象就不产生了，直接构造新对象就可以了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Test t4  = <span class="built_in">Test</span>(<span class="number">20</span>);<span class="comment">// 等价于 Test t4(20);</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;-------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    t4 = t2;</span><br><span class="line">    <span class="comment">// 显示生成临时对象</span></span><br><span class="line">    t4 = <span class="built_in">Test</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式生成临时对象</span></span><br><span class="line">    t4 = (Test)<span class="number">30</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;-------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// Test *t5 = &amp;Test(300);  &amp;Test(300)在这条语句结束后被析构， t5成了野指针</span></span><br><span class="line">    <span class="type">const</span> Test  &amp;t6 = <span class="built_in">Test</span>(<span class="number">60</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;-------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test(int)</span></span><br><span class="line"><span class="comment">Test(const Test&amp;)</span></span><br><span class="line"><span class="comment">Test(const Test&amp;)</span></span><br><span class="line"><span class="comment">Test(int)</span></span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"><span class="comment">operator=()</span></span><br><span class="line"><span class="comment">Test(int)</span></span><br><span class="line"><span class="comment">operator=()</span></span><br><span class="line"><span class="comment">~Test()</span></span><br><span class="line"><span class="comment">Test(int)</span></span><br><span class="line"><span class="comment">operator=()</span></span><br><span class="line"><span class="comment">~Test()</span></span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"><span class="comment">Test(int)</span></span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"><span class="comment">~Test()</span></span><br><span class="line"><span class="comment">~Test()</span></span><br><span class="line"><span class="comment">~Test()</span></span><br><span class="line"><span class="comment">~Test()</span></span><br><span class="line"><span class="comment">~Test()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Test</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function">        :_ma(a),_mb(b)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Test(int, int)&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; _mb &lt;&lt;<span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">const</span> Test&amp; t)</span><br><span class="line">        :_ma(t._ma),_mb(t._mb)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;)&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span>&lt;&lt; _mb  &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>()&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~Test()&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; _mb &lt;&lt; <span class="string">&quot;)&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    Test&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)&#123;</span><br><span class="line"></span><br><span class="line">        _ma = t._ma;</span><br><span class="line">        _mb = t._mb;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;operator=()&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; _mb &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ma;</span><br><span class="line">    <span class="type">int</span> _mb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    Test t3 = t2;</span><br><span class="line">    <span class="type">static</span> Test t4 = <span class="built_in">Test</span>(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">    t2=<span class="built_in">Test</span>(<span class="number">40</span>,<span class="number">40</span>);</span><br><span class="line">    t2=(Test)(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//t2 = 60;</span></span><br><span class="line">    Test *p1 = <span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">70</span>,<span class="number">70</span>);</span><br><span class="line">    Test *p2=<span class="keyword">new</span> Test[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//Test*p3= &amp;Test(80,80);</span></span><br><span class="line">    <span class="type">const</span> Test &amp;p4 = <span class="built_in">Test</span>(<span class="number">90</span>,<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">delete</span> p1;</span><br><span class="line">    <span class="keyword">delete</span>[]p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Test <span class="title">t5</span><span class="params">(<span class="number">100</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">Test(int, int)(100,100)</span></span><br><span class="line"><span class="comment">Test(int, int)(20,20)</span></span><br><span class="line"><span class="comment">Test(const Test&amp;)(20,20)</span></span><br><span class="line"><span class="comment">Test(int, int)(30,30)</span></span><br><span class="line"><span class="comment">Test(int, int)(40,40)</span></span><br><span class="line"><span class="comment">operator=()(40,40)</span></span><br><span class="line"><span class="comment">~Test()(40,40)</span></span><br><span class="line"><span class="comment">Test(int, int)(50,10)</span></span><br><span class="line"><span class="comment">operator=()(50,10)</span></span><br><span class="line"><span class="comment">~Test()(50,10)</span></span><br><span class="line"><span class="comment">Test(int, int)(70,70)</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">Test(int, int)(90,90)</span></span><br><span class="line"><span class="comment">~Test()(70,70)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">~Test()(90,90)</span></span><br><span class="line"><span class="comment">~Test()(20,20)</span></span><br><span class="line"><span class="comment">~Test()(50,10)</span></span><br><span class="line"><span class="comment">~Test()(30,30)</span></span><br><span class="line"><span class="comment">~Test()(100,100)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Test</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function">        :_ma(a),_mb(b)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Test(int, int)&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; _mb &lt;&lt;<span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">const</span> Test&amp; t)</span><br><span class="line">        :_ma(t._ma),_mb(t._mb)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;)&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span>&lt;&lt; _mb  &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>()&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~Test()&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; _mb &lt;&lt; <span class="string">&quot;)&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    Test&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)&#123;</span><br><span class="line"></span><br><span class="line">        _ma = t._ma;</span><br><span class="line">        _mb = t._mb;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;operator=()&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; _ma &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; _mb &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _ma;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ma;</span><br><span class="line">    <span class="type">int</span> _mb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getObject</span><span class="params">(Test t)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> value = t.<span class="built_in">getData</span>();</span><br><span class="line">    <span class="function">Test <span class="title">tmp</span><span class="params">(value)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//指向成员方法的指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Test t1;</span><br><span class="line">    Test t2 = <span class="built_in">getObject</span>(t1);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    Test t3 = <span class="built_in">getObject</span>(<span class="built_in">Test</span>(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    t2 = <span class="built_in">getObject</span>(t1);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">Test(const Test&amp;)(10,10)</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">------------</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">------------</span></span><br><span class="line"><span class="comment">Test(const Test&amp;)(10,10)</span></span><br><span class="line"><span class="comment">Test(int, int)(10,10)</span></span><br><span class="line"><span class="comment">operator=()(10,10)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">------------</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment">~Test()(10,10)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>带右值引用参数的拷贝构造和赋值重载函数，又叫<strong>移动构造函数</strong>和<strong>移动赋值函数</strong>，这里的<strong>移动</strong>指的是把临时量的资源移动给了当前对象，临时对象就不持有资源，为nullptr了，实际上没有进行任何的数据移动，没发生任何的内存开辟和数据拷贝。</p><p>综上所述，优化对象需要：</p><p>1.函数参数传递过程中，对象优先按引用传递，不要按值传递</p><p>2.函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象 </p><p>3.接收返回值是对象的函数调用的时候，优先按初始化的方式接收，不要按赋值的方式接收</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;a = <span class="number">20</span>;    <span class="comment">// 右值引用 没名字（临时量） || 没内存  一个右值引用变量本质是左值</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;c = b;    <span class="comment">// 左值引用 有名字 有内存</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;d = <span class="number">20</span>; <span class="comment">// 等价于 int &amp;&amp;d = 20;</span></span><br><span class="line"></span><br><span class="line">std::<span class="built_in">move</span>() <span class="comment">//将左值强制转换成右值引用</span></span><br><span class="line">std::forward() <span class="comment">// 类型的完美转发</span></span><br></pre></td></tr></table></figure><h1 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1><p>智能指针的基本原理，就是利用<strong>栈上的对象出作用域会自动析构</strong>这么一个特点，把资源释放的代码全部放在这个析构函数中执行，就达到了所谓的<strong>智能</strong>指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSmartPtr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CSmartPtr</span>(T *ptr = <span class="literal">nullptr</span>) :<span class="built_in">mptr</span>(ptr) &#123;&#125;</span><br><span class="line">~<span class="built_in">CSmartPtr</span>() &#123; <span class="keyword">delete</span> mptr; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> *mptr; &#125;</span><br><span class="line"><span class="type">const</span> T&amp; <span class="keyword">operator</span>*()<span class="type">const</span> &#123; <span class="keyword">return</span> *mptr; &#125;</span><br><span class="line"></span><br><span class="line">T* <span class="keyword">operator</span>-&gt;() &#123; <span class="keyword">return</span> mptr; &#125;</span><br><span class="line"><span class="type">const</span> T* <span class="keyword">operator</span>-&gt;()<span class="type">const</span> &#123; <span class="keyword">return</span> mptr; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T *mptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CSmartPtr&lt;<span class="type">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="comment">/*其它的代码...*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*由于ptr是栈上的智能指针对象，不管是函数正常执行完，还是运行过程中出现</span></span><br><span class="line"><span class="comment">异常，栈上的对象都会自动调用析构函数，在析构函数中进行了delete</span></span><br><span class="line"><span class="comment">操作，保证释放资源*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）<strong>智能指针体现在把裸指针进行了一次面向对象的封装，在构造函数中初始化资源地址，在析构函数中负责释放资源</strong><br>2）<strong>利用栈上的对象出作用域自动析构这个特点，在智能指针的析构函数中保证释放资源</strong></p><p>不带引用计数的智能指针<strong>auto_ptr，scoped_ptr，unique_ptr</strong>  推荐使用 <strong>unique_ptr</strong></p><p>如果要深入了解unique_ptr，需要先了解C++的右值引用原理 <strong>unique_ptr提供了带右值引用参数的拷贝构造和赋值</strong></p><p>使用 <code>std::move</code> 函数来转移 <code>unique_ptr</code> 的所有权</p><p>带引用计数的智能指针 shared_ptr、weak_ptr</p><p>当允许多个智能指针指向同一个资源的时候，<strong>每一个智能指针都会给资源的引用计数加1，当一个智能指针析构时，同样会使资源的引用计数减1，这样最后一个智能指针把资源的引用计数从1减到0时，就说明该资源可以释放了</strong>，由最后一个智能指针的析构函数来处理资源的释放问题，这就是引用计数的概念。</p><p>“<strong>shared_ptr智能指针的引用计数在哪里存放？</strong>”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面这两个是shared_ptr的成员变量，_Ptr是指向内存资源的指针，_Rep是</span></span><br><span class="line"><span class="comment">指向new出来的计数器对象的指针，该计数器对象包含了资源的一个引用计数器count</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">element_type * _Ptr&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">_Ref_count_base * _Rep&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"><span class="comment">// 当我们创建一个 shared_ptr 对象时，它会动态地分配两块内存：一块用于存储指向对象的指针，另一块用于存储引用计数。</span></span><br></pre></td></tr></table></figure><p>因此，<strong>shared_ptr智能指针的资源引用计数器在内存的heap堆上</strong>。</p><p>shared_ptr 强智能指针：可改变资源的用计数</p><p>weak_ptr 弱智能指针：不可以改变资源的用计数</p><p>weak_ptr需要配合shared_ptr才能使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;MyClass constructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;MyClass destructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;MyClass&gt; sp = std::<span class="built_in">make_shared</span>&lt;MyClass&gt;();</span><br><span class="line">    std::weak_ptr&lt;MyClass&gt; wp = sp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 shared_ptr，如果对象已经被销毁，返回一个空指针</span></span><br><span class="line">    std::shared_ptr&lt;MyClass&gt; sp2 = wp.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (sp2) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;sp2 is valid&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;sp2 is invalid&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置 shared_ptr，销毁对象</span></span><br><span class="line">    sp.<span class="built_in">reset</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 shared_ptr，如果对象已经被销毁，返回一个空指针</span></span><br><span class="line">    sp2 = wp.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (sp2) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;sp2 is valid&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;sp2 is invalid&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>弱智能指针weak_ptr区别于shared_ptr之处在于：</strong></p><ol><li>weak_ptr不会改变资源的引用计数，只是一个观察者的角色，通过观察shared_ptr来判定资源是否存在</li><li>weak_ptr持有的引用计数，不是资源的引用计数，而是同一个资源的观察者的计数</li><li>weak_ptr没有提供常用的指针操作，无法直接访问资源，需要先通过lock方法提升为shared_ptr强智能指针，才能访问资源</li></ol><p>强智能指针循环引用（交叉引用）是什么问题？什么结果？怎么解决？</p><ul><li><p>造成new出来的资源无法释放！！！资源泄露问题！</p></li><li><p>定义对象的时候，用强智能指针；引用对象的地方，使用弱智能指针</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>; <span class="comment">// 前置声明类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">shared_ptr&lt;B&gt; _ptrb; <span class="comment">// 指向B对象的智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">shared_ptr&lt;A&gt; _ptra; <span class="comment">// 指向A对象的智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;<span class="comment">// ptra指向A对象，A的引用计数为1</span></span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;<span class="comment">// ptrb指向B对象，B的引用计数为1</span></span><br><span class="line">ptra-&gt;_ptrb = ptrb;<span class="comment">// A对象的成员变量_ptrb也指向B对象，B的引用计数为2</span></span><br><span class="line">ptrb-&gt;_ptra = ptra;<span class="comment">// B对象的成员变量_ptra也指向A对象，A的引用计数为2</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; <span class="comment">// 打印A的引用计数结果:2</span></span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; <span class="comment">// 打印B的引用计数结果:2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出main函数作用域，ptra和ptrb两个局部对象析构，分别给A对象和</span></span><br><span class="line"><span class="comment">B对象的引用计数从2减到1，达不到释放A和B的条件（释放的条件是</span></span><br><span class="line"><span class="comment">A和B的引用计数为0），因此造成两个new出来的A和B对象无法释放，</span></span><br><span class="line"><span class="comment">导致内存泄露，这个问题就是“强智能指针的交叉引用(循环引用)问题”</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改为-------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>; <span class="comment">// 前置声明类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">weak_ptr&lt;B&gt; _ptrb; <span class="comment">// 指向B对象的弱智能指针。引用对象时，用弱智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">weak_ptr&lt;A&gt; _ptra; <span class="comment">// 指向A对象的弱智能指针。引用对象时，用弱智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义对象时，用强智能指针</span></span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;<span class="comment">// ptra指向A对象，A的引用计数为1</span></span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;<span class="comment">// ptrb指向B对象，B的引用计数为1</span></span><br><span class="line"><span class="comment">// A对象的成员变量_ptrb也指向B对象，B的引用计数为1，因为是弱智能指针，引用计数没有改变</span></span><br><span class="line">ptra-&gt;_ptrb = ptrb;</span><br><span class="line"><span class="comment">// B对象的成员变量_ptra也指向A对象，A的引用计数为1，因为是弱智能指针，引用计数没有改变</span></span><br><span class="line">ptrb-&gt;_ptra = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; <span class="comment">// 打印结果:1</span></span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; <span class="comment">// 打印结果:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出main函数作用域，ptra和ptrb两个局部对象析构，分别给A对象和</span></span><br><span class="line"><span class="comment">B对象的引用计数从1减到0，达到释放A和B的条件，因此new出来的A和B对象</span></span><br><span class="line"><span class="comment">被析构掉，解决了“强智能指针的交叉引用(循环引用)问题”</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/QIANGWEIYUAN/article/details/88562935?spm=1001.2014.3001.5501">深入掌握C++智能指针</a></p><h1 id="绑定器和function函数对象机制"><a href="#绑定器和function函数对象机制" class="headerlink" title="绑定器和function函数对象机制"></a>绑定器和function函数对象机制</h1><p> 绑定器和函数对象operator()</p><p>1.C++ST工中的绑定器</p><p>bindlst:operator()的第一个形参变量绑定成一个确定的值</p><p>bind2nd:operator()的第二个形参变量绑定成一个确定的值</p><p>绑定器+二元函数对象=》一元函数对象</p><hr><p>2.bind和function机制</p><p>绑定器，函数对象，lambda表达式它们只能使用在一条语句中</p><p>函数指针类型：void(*)() 这个表示返回的是指针类型返回值是void，不带形参的函数</p><p>函数类型：void()</p><p>1.用函数类型实例化function</p><p>2.通过function调用operator()函数的时候</p><p>需要根据函数类型传入相应的参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(std::string str)</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello1()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello2</span><span class="params">(std::string str)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello2():&quot;</span>&lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a + b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; func1 = hello1;</span><br><span class="line">    <span class="built_in">func1</span>(); <span class="comment">// func1.operator() =&gt; hello1();</span></span><br><span class="line">    std::function&lt;<span class="type">void</span>(std::string)&gt; func2 = hello2;</span><br><span class="line">    <span class="built_in">func2</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    std::function&lt;<span class="type">int</span>(<span class="type">int</span>,<span class="type">int</span>)&gt; func3 = add;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">func3</span>(<span class="number">2</span>, <span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::function&lt;<span class="type">int</span>(<span class="type">int</span>,<span class="type">int</span>)&gt; func4 = [](<span class="type">int</span> a, <span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a + b;&#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">func4</span>(<span class="number">10</span>, <span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::function&lt;<span class="type">void</span>(Test1*, std::string)&gt; func5 = &amp;Test1::hello;</span><br><span class="line">    Test1 t;</span><br><span class="line">    <span class="built_in">func5</span>(&amp;t, <span class="string">&quot;call Test::hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doShowBooks</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;doShowBooks&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doBorrow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;doBorrow&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doBack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;doBack&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doQueryBooks</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;doQueryBooks&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doLoginOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;doLoginOut&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">    std::map&lt;<span class="type">int</span>, std::function&lt;<span class="type">void</span>()&gt;&gt; m;</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, doShowBooks&#125;);</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">2</span>, doBorrow&#125;);</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">3</span>, doBack&#125;);</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">4</span>, doQueryBooks&#125;);</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">5</span>, doLoginOut&#125;);</span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;-------------------&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;1.查看所有书籍信息&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;2.借书&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;3.还书&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;4.查询书籍&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;5.注销&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;-------------------&quot;</span>&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">        std::cin &gt;&gt; choice;</span><br><span class="line">        <span class="keyword">auto</span> it = m.<span class="built_in">find</span>(choice);</span><br><span class="line">        <span class="keyword">if</span>(it == m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;输入数字无效&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            it-&gt;<span class="built_in">second</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板的完全特例和非完全（部分）特例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面这个是对指针类型提供的部分特例化版本</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;Ty*&gt;</span><br></pre></td></tr></table></figure><p><strong>function函数对象的实现原理</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunc</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> A1&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunc</span>&lt;<span class="built_in">R</span>(A1)&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> PFUNC = <span class="built_in">R</span>(*)(A1);</span><br><span class="line">    <span class="built_in">myfunc</span>(PFUNC p)</span><br><span class="line">        :_func(p)&#123;&#125;</span><br><span class="line">    <span class="function">R <span class="title">operator</span><span class="params">()</span><span class="params">(A1 arg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _func(arg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    PFUNC _func;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> A1&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunc</span>&lt;<span class="built_in">R</span>(A1, A1)&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> PFUNC = <span class="built_in">R</span>(*)(A1, A1);</span><br><span class="line">    <span class="built_in">myfunc</span>(PFUNC p)</span><br><span class="line">        :_func(p)&#123;&#125;</span><br><span class="line">    <span class="function">R <span class="title">operator</span><span class="params">()</span><span class="params">(A1 arg1, A1 arg2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _func(arg1, arg2);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    PFUNC _func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(std::string str)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">myfunc&lt;<span class="title">void</span><span class="params">(std::string)</span>&gt; <span class="title">f1</span><span class="params">(hello)</span></span>;</span><br><span class="line">    <span class="built_in">f1</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="function">myfunc&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>&gt; <span class="title">f2</span><span class="params">(add)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">f2</span>(<span class="number">20</span>, <span class="number">30</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进化版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunc</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... A&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunc</span>&lt;<span class="built_in">R</span>(A...)&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> PFUNC = <span class="built_in">R</span>(*)(A...);</span><br><span class="line">    <span class="built_in">myfunc</span>(PFUNC p)</span><br><span class="line">        :_func(p)&#123;&#125;</span><br><span class="line">    <span class="function">R <span class="title">operator</span><span class="params">()</span><span class="params">(A... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _func(args...);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    PFUNC _func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(std::string str)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">myfunc&lt;<span class="title">void</span><span class="params">(std::string)</span>&gt; <span class="title">f1</span><span class="params">(hello)</span></span>;</span><br><span class="line">    <span class="built_in">f1</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="function">myfunc&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>&gt; <span class="title">f2</span><span class="params">(add)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">f2</span>(<span class="number">20</span>, <span class="number">30</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>bind和function实现线程池</p><p>c++11bind绑定器=&gt;返回的结果还是一个函数对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(std::string str)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//bind是函数模板可以自动推演模板类型参数</span></span><br><span class="line">    std::<span class="built_in">bind</span>(hello,<span class="string">&quot;hello bind!&quot;</span>)();</span><br><span class="line">    std::cout&lt;&lt;std::<span class="built_in">bind</span>(add,<span class="number">10</span>,<span class="number">20</span>)()&lt;&lt;std::endl;</span><br><span class="line">    Test1 t1;</span><br><span class="line">    std::cout&lt;&lt;std::<span class="built_in">bind</span>(&amp;Test1::sum,t1,<span class="number">10</span>,<span class="number">20</span>)()&lt;&lt;std::endl; <span class="comment">// 类的成员方法一定要取地址，全局函数可取可不取</span></span><br><span class="line">    <span class="comment">//参数占位符</span></span><br><span class="line">    <span class="built_in">bind</span>(hello,std::placeholders::_1)(<span class="string">&quot;hello bind 2!&quot;</span>);</span><br><span class="line">    std::cout&lt;&lt;<span class="built_in">bind</span>(add,std::placeholders::_1, std::placeholders::_2)(<span class="number">200</span>,<span class="number">300</span>)&lt;&lt;std::endl;</span><br><span class="line">    </span><br><span class="line">    std::function&lt;<span class="type">void</span>(std::string)&gt; func1 = <span class="built_in">bind</span>(hello, std::placeholders::_1);</span><br><span class="line">    <span class="built_in">func1</span>(<span class="string">&quot;hello function bind1.&quot;</span>);</span><br><span class="line">    <span class="built_in">func1</span>(<span class="string">&quot;hello function bind2.&quot;</span>);</span><br><span class="line">    <span class="built_in">func1</span>(<span class="string">&quot;hello function bind3.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Thread</span>(std::function&lt;<span class="built_in">void</span>()&gt; func)</span><br><span class="line">        :_func(func)&#123;&#125;</span><br><span class="line">    <span class="function">std::thread <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="function">std::thread <span class="title">t1</span><span class="params">(_func)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        std::function&lt;<span class="type">void</span>()&gt; _func;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ThreadPool</span>()&#123;&#125;</span><br><span class="line">    ~<span class="built_in">ThreadPool</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; _pool.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _pool[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">startPool</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            _pool.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Thread</span>(</span><br><span class="line">                std::<span class="built_in">bind</span>(&amp;ThreadPool::runInThread, <span class="keyword">this</span>, i)</span><br><span class="line">                ));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            _handler.<span class="built_in">push_back</span>(_pool[i]-&gt;<span class="built_in">start</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(std::thread &amp;t : _handler)&#123;</span><br><span class="line">            t.<span class="built_in">join</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Thread*&gt; _pool;</span><br><span class="line">    std::vector&lt;std::thread&gt; _handler;</span><br><span class="line">    <span class="comment">// 用runInThread成员方法充当线程函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">runInThread</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;call runInThread! id:&quot;</span> &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ThreadPool pool;</span><br><span class="line">    pool.<span class="built_in">startPool</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>3.lambda表达式 </p><p>lambda:表达式的语法：</p><p>[捕获外部变量]（形参列表）-&gt;返回值{操作代码}；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> func1 =[]()-&gt;<span class="type">void</span> &#123;std::cout &lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;std::endl;&#125;;</span><br><span class="line">    <span class="built_in">func1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[捕获外部变量]</span><br><span class="line"></span><br><span class="line">[]：表示不捕获任何外部变量</span><br><span class="line"></span><br><span class="line">[=]：以传值的方式捕获外部的所有变量</span><br><span class="line"></span><br><span class="line">[&amp;]：以传引用的方式捕获外部的所有变量</span><br><span class="line"></span><br><span class="line">[<span class="keyword">this</span>]: 捕获外部的<span class="keyword">this</span>指针</span><br><span class="line"></span><br><span class="line">[=,&amp;a]：以传值的方式捕获外部的所有变量，但是a变量以传引用的方式捕获</span><br><span class="line"></span><br><span class="line">[a,b]: 以值传递的方式捕获外部变量a和b</span><br><span class="line">[a,&amp;b]: a以值传递捕获，b以传引用的方式捕获</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一、关键字和语法</p><p>auto：可以根据右值推导出右值的类型，然后左边变量的类型也就已知了</p><p> nullptr：给指针专用（能够和整数进行区别）#define NULL 0</p><p>foreach遍历 =》 底层就是通过指针或者迭代器来实现的</p><p>右值引用：move移动语义函数和forward类型完美转发函数</p><p> 模板的一个新特性：typename.·,A表示可变参(类型参数)</p><p>二、绑定器和函数对象</p><p>function:函数对象</p><p>bind:绑定器     bind1st和bind2nd+二元函数对象=》一元函数对象</p><p>lambda表达式</p><p>三、智能指针</p><p>shared_ptr和weak_ptr</p><p>四、容器</p><p>set和map:红黑树O(lgn)</p><p>unordered seti和unordered map:哈希表O(1)</p><p>五、C++语言级别支持的多线程编程 =》 代码可以跨平台</p><p>createThread</p><p>pthread create</p><p>clone </p><p>thread/mutex/condition_variable</p><p>lock_quard/unique_lock</p><p>atomic原子类型基于CAS操作的原子类型线程安全的</p><p>sleep_for </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">handlerA</span><span class="params">(<span class="type">int</span> time)</span></span>&#123;</span><br><span class="line">    <span class="comment">//让子线程睡眠 time s</span></span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(time));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello threadA&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建了一个线程对象传入一个线程函数,新线程就开始运行了</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(handlerA,<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//主线程等待子线程结束,主线程继续往下运行</span></span><br><span class="line">    t1.<span class="built_in">join</span>(); <span class="comment">// t1.detach(); 将子线程设置为分离线程</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;main thread done&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>线程内容：</p><p>一、怎么创建启动一个线程</p><p>std::thread定义一个线程对象，传入线程所需要的线程函数和参数，线程自动开启</p><p>二、子线程如何结束</p><p>子线程函数运行完成，线程就结束了</p><p>三、主线程如何处理子线程</p><p>t.join()：等待t线程结束，当前线程继续往下运行</p><p>t.detach()：把t线程设置为分离线程，主线程结束，整个进程结束，所有子线程都自动结束</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">std::mutex mtx;</span><br><span class="line"><span class="type">int</span> tcount = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sell</span><span class="params">(<span class="type">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//让子线程睡眠 2s</span></span><br><span class="line">    <span class="keyword">while</span>(tcount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        mtx.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(tcount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            tcount--;</span><br><span class="line">            std::cout&lt;&lt;<span class="string">&quot;窗口&quot;</span>&lt;&lt;index&lt;&lt;<span class="string">&quot;：卖出1张票,还剩&quot;</span>&lt;&lt; tcount &lt;&lt; <span class="string">&quot;张票。&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        mtx.<span class="built_in">unlock</span>();</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建了一个线程对象传入一个线程函数,新线程就开始运行了</span></span><br><span class="line">    std::list&lt;std::thread&gt; l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i)&#123;</span><br><span class="line">        l.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(sell, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(std::thread &amp;t : l)&#123;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;所有窗口卖票结束&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++多线程编程-线程间的同步通信机制</p><p>多线程编程两个问题：</p><p>1.线程间的互斥</p><p>竞态条件=》临界区代码段=》保证原子操作 互斥锁mute× 轻量级的无锁实现CAS</p><p>strace ./a.out mutex =pthread_mutex_t</p><p>2.线程间的同步通信</p><p>生产者，消费者线程模型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">std::condition_variable cv; <span class="comment">//定义条件变量，做线程间的同步通信操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lck</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="comment">// que不为空，生产者应该通知消费者去消费，消费完了，再继续生产</span></span><br><span class="line">            <span class="comment">//生产者线程应该进入阻塞状态并且把mtx互斥锁释放掉</span></span><br><span class="line"></span><br><span class="line">            cv.<span class="built_in">wait</span>(lck);</span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * notify_all 通知所有线程</span></span><br><span class="line"><span class="comment">         * notify_one 通知另外的一个线程</span></span><br><span class="line"><span class="comment">         * 通知其它所有的线程，我生产了一个物品，你们赶紧消费吧</span></span><br><span class="line"><span class="comment">         * 其它线程得到该通知，就会从等待状态=》阻塞状态=》获取互斥锁才能继续执行</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;生产者 生产：&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号物品&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lck</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(que.<span class="built_in">empty</span>())&#123;</span><br><span class="line"></span><br><span class="line">            cv.<span class="built_in">wait</span>(lck);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> val = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;消费者 消费：&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号物品&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i)&#123;</span><br><span class="line">        q-&gt;<span class="built_in">put</span>(i);</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i)&#123;</span><br><span class="line">        q-&gt;<span class="built_in">get</span>();</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Queue q;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(producer,&amp;q)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(consumer,&amp;q)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于CAS操作的atomic原子类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> std::atomic_bool isReady = <span class="literal">false</span>; <span class="comment">// volatile防止多线程对变量进行缓存</span></span><br><span class="line"><span class="keyword">volatile</span> std::atomic_int count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">task</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!isReady)&#123;</span><br><span class="line">        std::this_thread::<span class="built_in">yield</span>();  <span class="comment">// 线程出让当前的cPU时间片，等待下一次调度</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::list&lt;std::thread&gt; tlist;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line">        tlist.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(task));</span><br><span class="line">    &#125;</span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">3</span>));</span><br><span class="line">    isReady = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(std::thread &amp;t : tlist)&#123;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p><strong>技术面试过程中回答问题应该注意的事项</strong></p><p>1.当面试官提问问题后，不要着急作答，应该适当停一下，整理一下逻辑思路</p><p>2对于简单问题的回答，尽量不要照本宣科，找准问题回答的角度/层次，争取简单问题回答的比较有亮点</p><p>3对于相对复杂的问题，比较难以阐述的问题，思考上要花一些时间，整理好逻辑思路，以及问题大致描述的顺序。如果是现场面试，最好用纸笔边画边讲：如果是电话面试，回答问题的过程中，需要和面试官经常沟通，不要自顾自的滔滔不绝。</p><p>问题：C++this指针干什么用的？</p><blockquote><p>一个类型=》很多对象=》私有成员变量，共享一套成员方法tes0=&gt;test(&amp;t)</p></blockquote><p>问题：C++的new和delete,什么时候用new[]申请，可以用delete释放？</p><blockquote><p> 如果是自定义类型，而目提供了析构函数，那么用new[]就一定需要四配delete []ptr</p></blockquote><p>问题：C++的static关键字的作用（我从elf结构，链接过程来回答）？</p><blockquote><p><strong>从面相过程</strong>：static可以修饰全变量、函数、局部变量。但被修饰的全局变量和函数只能在当前文件中可见，在符号表中，符号作用域就从globa变成local。staticxiu’shi如果初始化就0或未初始化入<code>.bss</code>段，初始化不为0放入<code>.data</code>段</p><p><strong>从面相对象</strong>：static可以修饰成员变量，修饰成员方法（不再产生this指针了）</p></blockquote><p>问题：C++的继承？</p><blockquote><p>组织类和类之间的关系，常用方法由继承和组合。继承的好处：1.代码复用。2.通过继承，在基类里面给所有派生类可以保留统一的纯虚函数接口，等待派生类进行重写，通过使用多态可以通过基类的指针访问不同派生类的同名覆盖方法</p></blockquote><p>问题：C++的继承多态，空间配置器，vector和ist的区别，map,多重map?</p><blockquote><p>多态：静(编译时期)多态：函数重载和模板和动（运行时期）多态：虚函数指游针/引用指向派生类对象</p><p>空间配置器allocato:给容器使用的，主要作用把对象的内存开辟和对象构造分开，把对象析构和内存释放分开</p><p>vector和Iist的区别：数组和链表，随机访问多（优先级队列基于vector）,Iist适合增加删除多</p><p>map(不允许key重复的)：映射表[key-vue],底层实现红黑树，multimap(允许key重复的)</p><p>红黑树：5个性质，插入3种情况（最多旋转2次），删除（最多旋转3次）4种情况</p></blockquote><p>问题：C++如何防止内存泄露？智能指针详述？</p><blockquote><p>内存泄漏：分配的堆内存（没有名字，只能用指针来指向）没有释放</p><p><a href="https://blog.csdn.net/QIANGWEIYUAN/article/details/88562935?spm=1001.2014.3001.5502">https://blog.csdn.net/QIANGWEIYUAN/article/details/88562935?spm=1001.2014.3001.5502</a></p></blockquote><p>问题：C++如何调用C语言语句？</p><blockquote><p>C和C++生成符号的方式不同，C和C++语言之间的API接口是无法直接调用的，C语言的函数声明必须扩在extern “C”{}</p></blockquote><p>问题：C++什么时候会出现访问越界？</p><blockquote><p>1.访问数组元素越界了</p><p>2.vector容器访问vector<int>vec;vec[2]:</p><p>3.string str;str[2]</p><p>4.array</p><p>5.字符串处理，没有添加八0’字符，导致访问字符串的时候越界了</p><p>6.使用类型强转，让一个大类型（派生类）的指针指向一块小内存（基类对象）了，然后指针蟹引用，访问的内存就越界了！</p></blockquote><p>问题：C++中类的初始化列表？ </p><blockquote><p> 可以指定对象成员变量的初始化方式，尤其是指定成员对象的构造方式；</p></blockquote><p>问题：C和C++的区别？C和C++的内存分布有什么区别？</p><blockquote><p>1.引用</p><p>2.函数重载</p><p>3.new/delete malloc/free</p><p>4.cons其，nline,带默认值参数的函数</p><p>5.模板</p><p>6.类和对象OOP=》设计模式了</p><p>7.STL</p><p>8.异常</p><p>9.智能指针</p><p>10.运算符重载</p><hr><p>没什么区别</p></blockquote><p>问题：int<em>const p和const int</em>p区别？</p><blockquote><p>前者p不可以修改 *p可以修改</p><p>后者p可以修改 *p不能修改</p></blockquote><p>问题：malloci和new区别？</p><blockquote><ol><li>malloc按字节开辟内存new底层也是通过malloc开辟内存，但是还可以提供初始化</li></ol><p>2.malloc开辟内存失败nullpt女new开辟失败，抛出bad alloc类型的异常</p></blockquote><p>问题：map&amp;set容器的实现原理？</p><blockquote><p>set集合，只存储key;map映射表，存储[key,value]键值对，底层数据结构都是红黑树</p></blockquote><p>问题：shared_ptri引用计数存在哪里？</p><blockquote></blockquote><p>问题：STL、map底层、deque底层、vector里的empty0和size()的区别、函数对象？</p><blockquote><p>标准容器=》顺序容器(vector,,deque,list),容器话器stack,queue,priority._queue),关联容器（有序和无序）</p><p>近容器数组，string,bitset</p><p>迭代器</p><p>泛型算法</p><p>函数对象operator()test();test.operator()():sort find_if priority-.queue set map</p></blockquote><p>问题：STL中的迭代器失效的问题？</p><blockquote><p>迭代器是不允许一边读一遍修改的</p><p>当通过迭代器插入一个元素，所有迭代器就都失效了</p><p>当通过迭代器删除一个元素，当前删除位置都后面所有的元素的迭代器就都失效了</p><p>当通过迭代器更新容器元素以后，要及时对迭代器进行更新，insert/erase方法都会返回新位置的迭代器</p></blockquote><p>问题：STL中哪些底层由红黑树实现？</p><blockquote><p>set multiset map multimap</p></blockquote><p>问题：structi和class的区别？</p><blockquote><p>1.默认的继承访问权。class默认的是private,strcut默认的是public。 2.默认访问权限：struct作为数据结构的实现体，它默认的数据访问控制是public的，而class作为对象的实现体，它默认的成员变量访问控制是private的。 3.“class”这个关键字还用于定义模板参数，就像“typename”。但关键字“struct”不用于定义模板参数</p></blockquote><p>问题：vector和list的区别，还有map的底层实现？</p><blockquote></blockquote><p>问题：vector和数组的区别，STL的容器分类，各容器底层实现？</p><blockquote></blockquote><p>问题：编译链接全过程？</p><blockquote><p>预编译、编译、汇编=》二进制可重定向0bj文件*.0</p><p>链接：1.合并段，符号解析2.符号的重定向=&gt;可执行文件</p></blockquote><p>问题：初始化全局变量和未初始化全局变量有什么区别？</p><blockquote><p>.data(初始化，且初始值不为0)  .bss(未初始化，初始化为0)</p></blockquote><p>问题：堆和栈的区别？</p><blockquote><p>堆内存的大小&gt;栈内存</p><p>堆：低地址到高地址</p><p>栈：高地址到低地址， 函数的运行，函数的局部变量都要压栈</p></blockquote><p>问题：构造函数和析构函数可不可以是虚函数，为什么？</p><blockquote><p>虚函数：基类指针指向派生类对象，调用方法时指向的是派生类方法而不是基类方法</p><p>构造函数不能，析构可以</p><p>虚函数必须把函数地址放到虚函数表里面，vfptr存放虚函数表的地址，但vfptr必须初始化对象后才能得到</p></blockquote><p>问题：构造函数和析构函数中能不能抛出异常，为什么？</p><blockquote><p>构造函数不能抛异常，对象创建失败，就不会调用对象的析构函数了 </p><p>析构函数不能抛异常，后面的代码就无法得到执行了</p><p>一般把堆内存用智能指针来替代</p></blockquote><p>问题：宏和内联函数的区别？</p><blockquote><p>#define   .inline</p><p>#define 预编译阶段进行  只是做字符串替换  宏没法调试</p><p>.inline  编译阶段 在函数调用点，通过函数的实参把函数代码展开调用，节省函数调用开销</p><p>#define 可以定义常量、代码块、函数块</p><p>.inline 只是修饰函数</p></blockquote><p>问题：局部变量存在哪里？</p><blockquote><p>存放在栈上 通过ebp指针偏移来访问，不产生符号， .text指令 </p></blockquote><p>问题：拷贝构造函数，为什么传引用而不传值？</p><blockquote><p>传值，实参需要拷贝构造形参，这里操作又会触发拷贝操作，从而无限套娃</p></blockquote><p>问题：内联函数和普通函数的区别（从反汇编角度来回答）？</p><blockquote><p>核心：函数的调用开销</p><p>函数调用要对实参进行压栈 </p><p>push ebp</p><p>Mov ebp,esp</p><p>Sub esp,4Ch</p></blockquote><p>问题：如何实现一个不可以被继承的类？</p><blockquote><p> 派生类的初始化过程：基类构造=》派生类构造   </p><p>方法：基类的构造函数私有化</p></blockquote><p>问题：什么是纯虚函数：为什么要有纯虚函数：虚函数表放在哪里的？</p><blockquote><p>纯虚函数：virtual void func() = 0; 抽象类（不能实例化对象的，可以定义指针和引用）</p><p>一般定义在基类面，基类不代表任何实体，它的主要作用之一就是给所有的派生类保留统一的纯虚函数接口，让派生类进行重写，方便使用多态。</p><p>虚函数表在编译阶段产生！运行时，加载到 <code>.rodata</code>段（只读数据段）</p></blockquote><p>问题：手写单例模式</p><blockquote></blockquote><p>问题：说一下C++中的cons其，const.与static的区别？</p><blockquote><p>const定义的叫常量，它的编译方式是：编译过程中，把出现常量名字的地方，用常量的值进行替换</p><p>consti和static的区别</p><p>面向过程 const:全局变量，局部变量，形参变量    static:全局变量，局部变量</p><p>const:不能修饰函数static：可以修饰函数</p><p>面向对象：</p><p>const:常方法/成员变量  Test<em>this=&gt;const Test </em>this依赖对象</p><p>static:静态方法/成员变量Test*this=&gt;没有了！不依赖于对象通过类作用域访问</p></blockquote><p>问题：四种强制类型转换？</p><blockquote><p>const cast</p><p>static cast</p><p>reinterpret_cast:C风格的类型转换</p><p>ynamic_cast:支持RTT信息识别的类型转换</p></blockquote><p>问题：详细解释deque的底层原理</p><blockquote></blockquote><p>问题：虚函数，多态</p><blockquote><p>一个类=》虚函数=》编译阶段=》该类产生一张虚函数表=》运行时，加载到.rodata</p><p>用指针或者引用=》调用虚函数=》指针访问对象的头四个字节vfptr=》tble中取虚函数的地址，进行动态绑定调用</p><p>多态：设计函数接口的时候，可以都是用基类的指针或者引用来接收不同的派生类对象，功能增加，删除；设计模式</p></blockquote><p>问题：虚析构函数、智能指针</p><blockquote><p>Base *p = new Derive();</p><p>delete p;析构函数的调用，动态绑定</p></blockquote><p>问题：一个类，写了一个构造函数，还写了一个虚构造函数，可不可以，会发生什么？</p><blockquote><p>构造函数不可以写成虚函数</p></blockquote><p>问题：异常机制怎么回事儿？</p><blockquote></blockquote><p>问题：早绑定和晚绑定？ </p><blockquote><p>早绑定(静态绑定)：普通函数的调用，用对象调用虚函数cl编译阶段已经知道调用哪个函数</p><p>晚绑定（动态绑定）：用指针/引用调用虚函数的时候，都是动态绑定p-&gt;vfptr-&gt;vftable-&gt;virtual addr=&gt;call eax(寄存器)</p></blockquote><p>问题：指针和引用的区别（反汇编分析）</p><blockquote><p>指针：可以不初始化，可以有多级指针</p><p>引用：必须初始化，只能有一级引用</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p = &amp;a; <span class="comment">// lea eax,[a]mov dword ptr[ebp-8],eax</span></span><br><span class="line"><span class="type">int</span> &amp;b = a; <span class="comment">// lea eax,[a]mov dword ptr[ebp-0Ch],eax    </span></span><br><span class="line"><span class="comment">// 2、3行汇编代码一模一样，都是先把a的内存地址放到寄存器，再把寄存器的值放到底层4字节变量里面</span></span><br><span class="line"></span><br><span class="line">*p = <span class="number">20</span>;    <span class="comment">//  // mov eax, dword ptr[ebp-8]  mov dword ptr[eax],14H</span></span><br><span class="line">b = <span class="number">20</span>;    <span class="comment">// mov eax, dword ptr[ebp-0Ch]  mov dword ptr[eax],14H</span></span><br><span class="line"><span class="comment">// 这两行汇编也一样</span></span><br></pre></td></tr></table></figure><p>问题：智能指针交叉引用问题怎么解决？</p><blockquote><p> 定义对象的时候用强智能指针shared_ptr，而引用对象的时候用弱智能指针weak_ptr,</p><p>当通过weak_ptri访问对象成员时，需要先调用weak_ptr的lock提升方法，把weak_ptr提升成shared _ptr强智能指针，再进行对象成员调用。</p></blockquote><p>问题：重载的底层实现，虚函数的底层实现</p><blockquote><p>重载，因为C++生成函数符号，是依赖函数名字+参数列表</p><p>编译到函数调用点时，根据函数名字和传入的实参（个数和类型），和某一个函数重载匹配的话，那么就直接调用相应的函数重载版本（静态的多态都是在编译阶段处理的！）</p></blockquote><p>问题：讲一下map的底层实现，avl和rbtree有什么区别？</p><p>问题：你常用哪些STL容器？</p><p>问题：假如map的键是类类型，那么map底层是如何调整的？</p><p>问题：内存泄漏你会怎么处理？</p><p>问题：讲讲智能指针</p><p>问题：如果让你实现一个内存池，要求获取资源和插入资源时间花费0(1)，你会怎么设计？</p><p>问题：编写一个C/C++程序你个人感觉需要注意一些什么？</p><p>问题：讲一下红黑树以及它的特性</p><p>问题：设计模式知道哪些？具体讲一下</p><p>问题：C++设计模式-工厂模式</p><p>问题：讲一下智能指针</p><p>问题：C++中vector和Iist的区别，stack和queue的底层实现，智能指针，C+11特性，迭代器失效的原因以及如何解决？</p><p>问题：输出单例模式工</p><p>问题：智能指针</p><p>问题：解释动多态？</p><p>问题：为什么析构函数要是现成虚析构函数？</p><p>问题：如果构造函数里面抛出异常会发生什么？内存泄漏？怎么解决？</p><p>1、程序的内存布局。从下往上code，rodata，data,bss,堆，栈内核空间</p><p>2、堆和栈的区别</p><p>内存中：堆内存是用户手动开辟和释放的，栈是系统自动开辟和释放的</p><p>数据结构中：堆是一个二叉树。栈是线性表先进后出</p><p>3、函数调用用参数是怎么传递的？</p><p>用汇编行为分析</p><p>4、函数调用的参数什么顺序压栈的？</p><p>从右往左压栈</p><p>5、为什么函数调用的参数要从右往左压栈？</p><p>c++要支持可变参函数,右往左压栈直接ebp+4直接访问变量a  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, ...)</span></span>&#123;&#125;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>6、有一个函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">fun</span><span class="params">(string s1,string s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string tmp s1+s2:</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数里面通过：Istring s=fun(s1,s2);调用，依照代码执行顺序分析一下调用了什么构造函数和顺序以及析构函数的调用顺序。</p><p>拷贝构造s2,s1然后拷贝构造tmp，tmp直接拷贝构造s。析构和构造顺序相反tmp、s1、s2。mian函数结束后析构s。</p><p>如果用临时对象拷贝构造新对象，那么临时对象就不产生了，直接构造新对象就行了</p><p>比如：string s1 = string(“hello world”); == string s1(“hello world”);</p><p>如果我fun函数内写成return s1+s2有什么区别？</p><p>省略了tmp的拷贝和析构</p><p>纯虚函数怎么实现</p><p>virtual void func = 0;纯虚函数一般作用于基类-》抽象类</p>]]></content>
    
    
    <summary type="html">🥧本文讲解c++知识</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++OOP笔记</title>
    <link href="https://yanhool.github.io/posts/20230302d.html"/>
    <id>https://yanhool.github.io/posts/20230302d.html</id>
    <published>2023-03-01T10:19:03.000Z</published>
    <updated>2023-03-25T06:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c-OOP基础知识"><a href="#c-OOP基础知识" class="headerlink" title="c++OOP基础知识"></a>c++OOP基础知识</h1><p><strong>OOP四大特性</strong></p><ul><li><p>抽象</p></li><li><p>封装/隐藏：通过<strong>访问限定符</strong>体现 public protected private</p></li><li><p>继承</p></li><li><p>多态</p></li></ul><hr><p>this指针</p><p>类有很多对象，所有对象都共用一套成员方法，所以对象调用成员方法时会默认传入this指针</p><hr><p>构造函数：自动调用；可以重载</p><p>析构函数：不带参数；不能重载</p><p>数据段.data对象程序启动时构造，程序结束时析构</p><p>heap上：new时构造，delete析构</p><p>stack：进入函数时到定义处构造，函数结束时析构</p><hr><p><strong>深拷贝浅拷贝</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SeqStack <span class="title">s1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">SeqStack s2 = s1; <span class="comment">// 拷贝构造函数，直接内存拷贝</span></span><br></pre></td></tr></table></figure><hr><p><strong>类的各种成员 - 成员方法/变量</strong></p><p><strong>普通的成员方法 =&gt; 编译器会添加一个this形参变量</strong></p><p>1.属于类的作用域</p><p>2.调用该方法时，需要依赖一个对象</p><p>3.可以任意访问对象的私有成员 protected继承 public private</p><p><strong>static静态成员方法 =&gt; 不会生成this形参</strong></p><p>1.属于类的作用域</p><p>2.用类名作用域来调用方法</p><p>3.可以任意访问对象的私有成员，仪限于不依赖对象的成员（只能调用其它的stātic静态成员）</p><p><strong>const常成员方法 =&gt; const CGoods *this</strong></p><p>1.属于类的作用域</p><p>2.调用依赖一个对象，普通对象或者常对象都可以</p><p>3.可以任意访问对象的私有成员，但只能读不能写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="comment">//这两个show属于重载关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 常成员方法 只要是只读操作的成员方法一律实现成const常成员方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span>&#123;&#125; <span class="comment">// 这个会默认对this指针加const修饰</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>指向类成员（成员变量和成员方法）的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;cout &lt;&lt;<span class="string">&quot;call &#x27;Test:func&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="type">static</span> <span class="title">func</span><span class="params">()</span></span>&#123;cout &lt;&lt;<span class="string">&quot;Test:static func&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="type">int</span> ma;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mb;</span><br><span class="line">&#125;；</span><br><span class="line"><span class="type">int</span> Test::mb; <span class="comment">// 静态成员变量必须要在类中初始化</span></span><br><span class="line"><span class="comment">// 指向成员变量的指针</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Test t1;</span><br><span class="line">    Test *t2 = <span class="keyword">new</span> <span class="built_in">Test</span> ();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//inta=10;int*p=&amp;a;*p=30;</span></span><br><span class="line">    <span class="comment">//无法从&quot;int Test::*&quot; 转换为 &quot;int*&quot;</span></span><br><span class="line">    <span class="type">int</span> Test:*p &amp;Test::ma;</span><br><span class="line">    t1.*p=<span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; t1.*p &lt;&lt;endl;</span><br><span class="line">    t2-&gt;*p=<span class="number">30</span>;</span><br><span class="line">    cout &lt;&lt; t2-&gt;*p &lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> *p1=&amp;Test::mb;</span><br><span class="line">    *p1=<span class="number">40</span>;</span><br><span class="line">    cout &lt;&lt;*p1&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">delete</span> t2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指向成员方法的指针</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Test t1;</span><br><span class="line">    Test *t2 = <span class="keyword">new</span> <span class="built_in">Test</span>();</span><br><span class="line">    <span class="comment">// 指向成员方法的指针</span></span><br><span class="line">    <span class="built_in">void</span> (Test::*pfunc)() = &amp;Test::func;</span><br><span class="line">    (t1.*pfunc)();</span><br><span class="line">    (t2-&gt;*pfunc)();</span><br><span class="line">    <span class="comment">// 指向静态成员方法的指针</span></span><br><span class="line">    <span class="built_in">void</span> (*p1)() = &amp;Test::static_func;</span><br><span class="line">    (*p1)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算重载符"><a href="#运算重载符" class="headerlink" title="运算重载符"></a>运算重载符</h1><p>operator++()前置++</p><p>operator++(int)后置++</p><hr><hr><p><strong>深入理解new和delete操作</strong></p><p>new和delete</p><p>1.malloc和new的区别？</p><p>a.mallco按字节开辟内存的；new开辟内存时需要指定类型new int[10]</p><p>所以malloc开辟内存返回的都是void<em> ,      operator new-&gt;int</em></p><p>b.malloc只负责开辟空间，new不仅仅有malloc的功能，可以进行数据的初始化</p><p><code>new int (20); new int [20]() ;int()</code></p><p>c.malloc开辟内存失败返回<strong>nullptr指针</strong>：new抛出的是bad_malloc类型的<strong>异常</strong></p><p>2.free和deletel的区别？</p><p>delete:先调用析构函数然后再free(p);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">    <span class="type">void</span> *p = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">bad_alloc</span>();</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//delete p;调用p指向对象的析构函数、再调用operator delete释放内存空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *ptr)</span></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new和delete能混用吗？c++为什么区分单个元素和数组的内存分配和释放呢?</p><p>  最好不要，内置类型可以。</p><p><img src="https://s1.vika.cn/space/2023/03/25/41aacf57c0da4884bb605356e51a135e" alt=""></p><p>自定义的类类型，有析构函数，为了调用正确的析构函数，那么开辟对象数组的时候会多开辟4个字节，记录对象的个数</p><h1 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h1><p>继承的本质：a.代码的复用 b.</p><p> class B : public A 的意思是A派生了B， B继承了A</p><p>A 基类/父类  B派生类/子类</p><p>两个类之间的关系可以是</p><p>组合： a part of     </p><p>继承:：a kind of</p><p><img src="https://s1.vika.cn/space/2023/03/25/6fb21c5658fe4b47a62c054e75e537a8" alt=""></p><p>总结：</p><p>1.外部只能访问对象public的成员，protected和privatel的成员无法直接访问</p><p>2.在继承结构中，派生类从基类可以继承过来privatel的成员，但是派生类却无法直接访问</p><p>3.protected和private的区别？</p><p>在基类中定义的成员，<strong>想被派生类访问，但是不想被外部访问</strong>那么在基类中，把相关成员定义成<strong>protected</strong>保护的；</p><p>如果派生类和外部都不打算访问，那么在基类中，就把相关成员定义成<strong>private</strong>私有的。 </p><p>默认的继承方式是什么？</p><p>要看派生类是用class定义的，还是struct定义的？</p><p>class定义派生类，默认继承方式就是private私有的</p><p>struct定义派生类，默认继承方式就是public公有的</p><hr><p>派生类从基类继承的成员变量该如何初始化呢？<strong>必须通过调用基类的构造函数来初始化从基类继承来的成员！</strong></p><p>1.派生类从继承可以继承来所有的成员（变量和方法），除过构造函数和析构函数</p><p> 派生类怎么初始化从基类继承来的成员变量呢？</p><p> 解答：通过调用基类相应的构造函数来初始化</p><p>派生类的构造函数和析构函数，负责初始化和清理派生类部分</p><p>派生类从基类继承来的成员的初始化和清理由基类的构造和析构函数来负责</p><p>派生类对象构造和析构的过程是：</p><p>1.派生类调用基类的构造函数，初始化从基类继承来的成员</p><p>2.调用派生类自己的构造函数，初始化派生类自己特有的成员</p><p>….派生类对象的作用域到期了</p><p>3.调用派生类的析构函数，释放派生类成员可能占用的外部资源（堆内存，文件）</p><p>4.调用基类的析构函数，释放派生类内存中，从基类继承来的成员可能占用的外部资源（堆内存，文件）</p><hr><p><strong>重载、隐藏和覆盖</strong></p><p> 1.重载关系</p><p>组函数要重载，必须处在同一个作用域当中；而且函数名字相同，参数列表不同</p><p>2.隐藏（作用域的隐藏）的关系</p><p>在继承结构当中，派生类的同名成员，把基类的同名成员给隐藏调用了</p><hr><p> 1.把继承结构，也说成从上（基）到下（派生类）的结构</p><p>2.</p><p>基类对象-&gt;派生类对象                  Y</p><p>派生类对象-&gt;基类对象                  N</p><p>基类指针（引用）-&gt;派生类对象    Y</p><p>派生类指针（引用）-&gt;基类对象    N</p><hr><p><strong>虚函数，静态绑定和动态绑定</strong> </p><p>一个类添加虚函数对类的影响</p><p>总结一：</p><p>一个类里面定义了虚函数，那么编译阶段，编译器给这个类类型产生一个唯一的vftabl  e虚函数表，虚函数表中主要存储的内容就是TTI指针和虚函数的地址。当程序运行时，每一张虚函数表都会加载到内存的.rodata区，<strong>这张虚函数表就是vftable</strong>。</p><p><img src="https://s1.vika.cn/space/2023/03/25/e26a79363216492d8ca45a87f92b192b" alt=""></p><p>总结二：</p><p>一个类里面定义了函数数，那么这个类定义的对象1其运行时，内存中开始部分，多存储一个vfptr虚函数指针，指向相应类型的虚函数表vftable。一个类型定义的n个对象，它们的额vfptr指向的都是同一张虚函数表</p><p> 总结三：</p><p>个类里面虚函数的个数，不影响对象内存大小(vfptr)，影响的是虚函数表的大小</p><p> 总结四：</p><p>如果派生类中的方法，和基类继承来的某个方法，返回值、函数名、参数列表都相同，而且基类的方法是virtual虚函数，那么派生类的这个方法，自动处理成虚函数</p><p>静态绑定和动态绑定</p><p>pb-&gt;Base Base::show  如果发现show是普通函数，编译时期就进行静态绑定 call Base::show</p><p>pb-&gt;Base Base::show  如果发现show是虚函数，运行时期就进行动态绑定</p><p>mov eax,dword ptr[pb]      // 先把vfptr指针存储寄存器</p><p>mov ecx,dword ptr[eax]    // 在虚函数表中找到虚函数地址并给ecx寄存器</p><p>call ecx</p><hr><p>Derive d; Base *pb = &d;</p><p>pb的类型：Base-&gt;有没有虚函数</p><p>如果Base没有虚函数，<em>pb识别的就是编译时期的类型 </em>pb&lt;=&gt;Base类型</p><p>如果Base有虚函数，*pb识别的就是运行时期的类型RTTI类型</p><p>pb-&gt;d(vfptr)-&gt;Derive vftable</p><p>class Derive</p><hr><p>问题一：哪些函数不能实现成虚函数？</p><p>虚函数依赖：</p><p>1.虚函数能产生地址，存储在vftable当中：</p><p>2.对象必须存在(vfptr-&gt;vftable-&gt;虚函数地址)</p><p>构造函数</p><p>1.virtual+构造函数No!</p><p>构造函数中（调用的任何函数，都是静态绑定的）调用虚函数，也不会发生静态绑定派生类对象构造过程1.先调用的是基类的构造函数2.才调用派生类的构造函数</p><p>2.static静态成员方法No! 静态成员方法是属于类本身的，而不是属于类的任何一个对象的。</p><p>问题二：虚析构函数</p><p>什么时候把基类的析构函数必须实现成虚函数？</p><p>基类的指针（引用）指向堆上new出来的派生类对象的时候，delete pb(基类的指针)，它调用析构函数的时候，必须发生动态绑定，否则会导致派生类的析构函数无法调用</p><p>虚函数和动态绑定问题：是不是虚函数的调用一定就是动态绑定？肯定不是的！</p><p>在类的构造函数当中，调用虚函数，也是静态绑定（构造函数中调用其它函数（虚），不会发生动态绑定，因为在调用虚函数之前，对象的构造函数尚未执行完毕，对象的类型还不能被确定。因此，编译器不能根据对象的实际类型来确定应该调用哪个虚函数，只能使用静态绑定，即调用类自身定义的虚函数，而不是派生类覆盖的虚函数。</p><p>静态绑定用对象本身调用虚函数，是静态绑定</p><p>动态绑定（必须由指针调用虚函数）</p><hr><p><strong>多态到底是什么</strong></p><p>如何解释多态？</p><p>静态（编译时期）的多态：函数重载、模板（函数模板和类模板）</p><p>动态（运行时期）的多态：</p><p>在继承结构中，基类指针（引用）指向派生类对象，通过该指针（引用）调用同名覆盖方法（虚函数），基类指针指向哪个派生类对象，就会调用哪个派生类对象的同名覆盖方法，称为多态</p><p>多态底层是通过动态绑定来实现的，pbase-》访问谁的vfptr-》继续访问谁的vftable =》当然调用的是对应的派生类对象的方法了</p><hr><p><strong>抽象类和普通类</strong></p><p>拥有纯虚函数的类叫抽象类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>抽象类不能再实例化对象了，但是可以定义指针和引用变量</p><p>一般把基类往往设计成抽象类，因为定义基类的初衷，并不是为了让它去抽象化某个实体的类型，而是刚开始我们讲过的原因，如下：<br>1.基类给所有派生类提供公共的属性（成员变量）和方法（成员函数），通过继承达到代码复用的目的。<br>2.基类可以给所有派生类提供统一的纯虚函数接口，派生类通过函数重写，达到多态调用的目的。</p><hr><p><strong>虚基类和虚继承</strong></p><p>Class B: virtual public A   则A是虚基类</p><p>多重继承</p><p>菱形继承问题</p><p><img src="https://s1.vika.cn/space/2023/03/25/84e616c4169d4425839d4c4de8070027" alt=""></p><p>虚基类来解决菱形继承的问题</p><hr><p><strong>c++的四种类型转换</strong></p><p>const_cast：去掉常量属性的一个类型转换</p><p>static_cast：提供编译器认为安全的类型转换</p><p>reinterpret_cast：类似于C风格的强制类型转换</p><p>dynamic_cast：主要用在继承结构中，可以支持RTTI类型识别的上下转换 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *pl = (<span class="type">int</span>*)&amp;a;</span><br><span class="line"><span class="type">int</span> *p2 = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;a);</span><br></pre></td></tr></table></figure><p>dynamic_cast:如果有需求要求某个特定类型必须调用特定方法可以用dynamic_cast转换</p>]]></content>
    
    
    <summary type="html">🥧本文讲解c++OOP基础知识</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++基础知识笔记</title>
    <link href="https://yanhool.github.io/posts/20230301d.html"/>
    <id>https://yanhool.github.io/posts/20230301d.html</id>
    <published>2023-03-01T10:19:03.000Z</published>
    <updated>2023-04-08T13:26:50.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="1-虚拟地址空间的布局"><a href="#1-虚拟地址空间的布局" class="headerlink" title="1. 虚拟地址空间的布局"></a>1. 虚拟地址空间的布局</h2><p>程序的指令都存放在虚拟内存的代码段(<code>.text</code>)</p><p>常量字符串存放在只读数据段(<code>.rodata</code>)</p><p>数据放在数据段(<code>.data</code>和<code>.bss</code>)，其中 <code>.data</code> 存放初始化不为0的数据， <code>.bss</code>存放未初始化或初始化为0的数据</p><p>全局变量产生符号，放在<code>.data</code>和<code>.bss</code>；普通局部变量不是符号，而是指令，运行时在<code>stack</code>上分配弓箭，放在<code>.text</code>；静态局部变量也产生符号</p><p><img src="https://s1.vika.cn/space/2023/03/25/4d6575ef452e4386ae751fb83aa0af50" alt=""></p><p>每一个进程的<strong>用户空间是私有</strong>的，但<strong>内核空间是共享</strong>的！！！进程通信的匿名管道通信，就是在内核空间中开辟一块内存，这样这几个进程都能看见。</p><hr><h2 id="2-函数调用堆栈过程"><a href="#2-函数调用堆栈过程" class="headerlink" title="2. 函数调用堆栈过程"></a>2. 函数调用堆栈过程</h2><p><img src="https://s1.vika.cn/space/2023/03/25/fc5e9853b65442dc9420ccd36782ef2b" alt=""></p><p>esp存放当前栈帧栈顶的地址，ebp存放栈底的地址 。</p><p>函数压栈时，形参时从右往左压，因为这样第一个形参的肯定是位于栈顶的，能方便的获取第一个形参</p><p>call sum：干两件事情 1.把这行指令的下一行指令的地址压栈 0x08124458（因为sum函数执行完后得知道接下来执行什么）2.调用sum函数</p><p>在调用函数的一开始，会把ebp的地址0x0018ff40压入栈顶</p><p>函数结束之后：ebp的地址赋给esp ，然后对出栈且把值赋给ebp，这样ebp又重新指向main函数栈底</p><hr><h2 id="3-C-的编译和链接原理"><a href="#3-C-的编译和链接原理" class="headerlink" title="3. C++的编译和链接原理"></a>3. C++的编译和链接原理</h2><p><img src="https://s1.vika.cn/space/2023/03/25/1d590851346640f8909cb408bb121518" alt=""></p><p><code>#pragma lib</code>：指定在在程序运行时需要链接的库，因此是在链接阶段执行</p><p><code>#pragma link</code>：设置入口函数，<code>main</code>函数是程序默认入口函数。</p><p>除此之外的 <code>#</code>靠头都在预编译阶段处理</p><p>汇编：把程序代码转为特定平台的机器码</p><p><code>*.o</code>文件格式<img src="https://s1.vika.cn/space/2023/03/25/625dca047e5e48008168b461b6d6e1fe" alt=""></p><p><code>.text</code>:已编译程序的机器代码。<br><code>.rodata</code>：只读数据，比如<code>printf</code>语句中的格式串和开关语句的跳转表。<br><code>.data</code>：已初始化的全局C变量gy局部C变量在运行时保存在栈中，既不出现在，<code>.data</code>节中，也不出现在<code>.bss</code>节中。<br><code>.bss</code>：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。</p><p><code>.symtab</code>:一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译程序才能得到符号表信息。实际上，每个可重定位目标文件在，<code>.symtab</code>中都有一张符号表。然而，和编译器中的符号表不同，<code>.symtab</code>符号表不包含局部变量的条目。</p><p>编译过程中，符号是不分配虚拟地址的。而是在链接过程中。因为，编译过程中有些符号编译器都不知道在哪，更无从谈起分配了。</p><hr><p>使用<code>gcc -c main.cpp sum.cpp</code>生成<code>main.o sum.o</code>二进制可重定向文件</p><p>符号表：可以用<code>objdump -t main.o</code>查看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> gdata;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> data = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = gdata;</span><br><span class="line"><span class="type">int</span> b = data;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">sum</span>(a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">main.o:     file format elf64-x86-64</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SYMBOL TABLE:</span></span><br><span class="line"><span class="comment">0000000000000000 l    df *ABS*0000000000000000 main.cpp</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .text0000000000000000 .text</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .data0000000000000000 .data</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .bss0000000000000000 .bss</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .note.GNU-stack0000000000000000 .note.GNU-stack</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .eh_frame0000000000000000 .eh_frame</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .comment0000000000000000 .comment</span></span><br><span class="line"><span class="comment">0000000000000000 g     O .data0000000000000004 data</span></span><br><span class="line"><span class="comment">0000000000000000 g     F .text0000000000000033 main</span></span><br><span class="line"><span class="comment">0000000000000000         *UND*0000000000000000 gdata</span></span><br><span class="line"><span class="comment">0000000000000000         *UND*0000000000000000 _GLOBAL_OFFSET_TABLE_</span></span><br><span class="line"><span class="comment">0000000000000000         *UND*0000000000000000 _Z3sumii</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解释：其中l是local，g是global，在链接阶段，编译器只能看见g字段。静态变量都是l，普通变量都是g</span></span><br><span class="line"><span class="comment">所以可以在多个文件定义变量名相同的静态变量</span></span><br><span class="line"><span class="comment">*UND*：gdata和sum都产生符号（gdata、_Z3sumii），使用了它们但不知道怎么定义的就标识为*UND*，是符号的引用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// sum.cpp</span></span><br><span class="line"><span class="type">int</span> gdata = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum.o:     file format elf64-x86-64</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SYMBOL TABLE:</span></span><br><span class="line"><span class="comment">0000000000000000 l    df *ABS*0000000000000000 sum.cpp</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .text0000000000000000 .text</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .data0000000000000000 .data</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .bss0000000000000000 .bss</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .note.GNU-stack0000000000000000 .note.GNU-stack</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .eh_frame0000000000000000 .eh_frame</span></span><br><span class="line"><span class="comment">0000000000000000 l    d  .comment0000000000000000 .comment</span></span><br><span class="line"><span class="comment">0000000000000000 g     O .data0000000000000004 gdata</span></span><br><span class="line"><span class="comment">0000000000000000 g     F .text0000000000000014 _Z3sumii</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>g++ -c main.cpp -g</code> + <code>objdump -S main.o</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">main.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;main&gt;:</span><br><span class="line"></span><br><span class="line">extern int gdata;</span><br><span class="line">int sum(int, int);</span><br><span class="line">int data = 20;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">   0:55                   push   %rbp</span><br><span class="line">   1:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">   4:48 83 ec 10          sub    $0x10,%rsp</span><br><span class="line">int a = gdata;</span><br><span class="line">   8:8b 05 00 00 00 00    mov    0x0(%rip),%eax        # e &lt;main+0xe&gt;</span><br><span class="line">   e:89 45 f4             mov    %eax,-0xc(%rbp)</span><br><span class="line">int b = data;</span><br><span class="line">  11:8b 05 00 00 00 00    mov    0x0(%rip),%eax        # 17 &lt;main+0x17&gt;</span><br><span class="line">  17:89 45 f8             mov    %eax,-0x8(%rbp)</span><br><span class="line">int ret = sum(a, b);</span><br><span class="line">  1a:8b 55 f8             mov    -0x8(%rbp),%edx</span><br><span class="line">  1d:8b 45 f4             mov    -0xc(%rbp),%eax</span><br><span class="line">  20:89 d6                mov    %edx,%esi</span><br><span class="line">  22:89 c7                mov    %eax,%edi</span><br><span class="line">  24:e8 00 00 00 00       callq  29 &lt;main+0x29&gt;</span><br><span class="line">  29:89 45 fc             mov    %eax,-0x4(%rbp)</span><br><span class="line">return 0;</span><br><span class="line">  2c:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  31:c9                   leaveq </span><br><span class="line">  32:c3                   retq</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自己定义的全局变量data，和引用其他文件的gdata，符号的地址都为0</span>      </span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">      </span><br><span class="line"> sum.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;_Z3sumii&gt;:</span><br><span class="line">int gdata = 10;</span><br><span class="line">int sum(int a, int b)&#123;</span><br><span class="line">   0:55                   push   %rbp</span><br><span class="line">   1:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">   4:89 7d fc             mov    %edi,-0x4(%rbp)</span><br><span class="line">   7:89 75 f8             mov    %esi,-0x8(%rbp)</span><br><span class="line"></span><br><span class="line">return a + b;</span><br><span class="line">   a:8b 55 fc             mov    -0x4(%rbp),%edx</span><br><span class="line">   d:8b 45 f8             mov    -0x8(%rbp),%eax</span><br><span class="line">  10:01 d0                add    %edx,%eax</span><br><span class="line">&#125;</span><br><span class="line">  12:5d                   pop    %rbp</span><br><span class="line">  13:c3                   retq</span><br><span class="line">      </span><br><span class="line">     </span><br></pre></td></tr></table></figure><hr><p><strong>链接过程</strong></p><ol><li>所有.o文件段的合并符号表合并后，进行符号解析。符号表合并:<code>.text</code>&lt;=&gt;<code>.text</code> <code>.data</code> &lt;=&gt;<code>.data</code> <code>.bss</code> &lt;=&gt;<code>.bss</code>。 符号解析：所有对符号的引用（*UND*）都要找到该符号定义的地方。解析成功后就给所有符号分配虚拟地址</li><li>符号的重定位：在之前编译阶段，对于符号的引用都是给0地址，现在每个符号都有虚拟地址了，就需要给这些0地址替换</li></ol><p>要求：独立说出 c/c++编译链接原理</p><hr><h2 id="4-基础知识"><a href="#4-基础知识" class="headerlink" title="4.基础知识"></a>4.基础知识</h2><p>形参带默认值的函数，默认值只能从右向左给。</p><p><strong>inline内联函数</strong></p><p>直接把内联函数代码在调用处展开，即不会产生函数调用，效率更高了。</p><p>​            但不是所有inline都会被编译器视为内联函数，如递归</p><hr><p><strong>函数重载</strong></p><p>1.C++为什么支持函数重载，C语言不支持函数重载</p><ul><li><p>C++代码产生函数符号的时候，函数名+参数列表类型组成的！</p></li><li><p>C代码产生函数符号的时候，函数名来决定！</p></li></ul><p>2.函数重载需要注意些什么？</p><p>一组函数要称得上重载，一定先是处在同一个作用域当中的。 返回值相不相同不影响重载</p><p>3.C++和c语言代码之间如何互相调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Const 的用法</strong></p><p>const 怎么理解？</p><p>const 修饰的变量不能够再作为左值！！！初始化完成后，值不能被修改！！！</p><p>c++的 const 必须初始化的，叫常量</p><p>c和c++中const的区别是什么？<br>const的编译方式不同，c中，const就是当作一个变量来编译生成指令的。<br>C++中，所有出现const常量名字的地方，都被常量的初始化替换了！！！</p><p><img src="https://s1.vika.cn/space/2023/03/25/6e21f41e86064157a09c5aec27ab0a13" alt=""></p><p><strong>指针和引用的区别</strong></p><p>引用是一个更安全的指针</p><p>1.引用必须初始化，指针可以不初始化 （引用初始化时，右边必须是一个可以取地址的变量，即 int &amp;b = 0;是非法的）</p><p>2.引用只有一级引用没有多级引用；指针有多级指针</p><p>3.定义一个用变量，和定义一个指针变量，其编指令是一模一样的；通过用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> *p = a;</span><br><span class="line"><span class="comment">// int &amp;q = a;  引用错误的写法</span></span><br><span class="line"><span class="built_in">int</span> (&amp;q)[<span class="number">5</span>] = a;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; std::endl; <span class="comment">// 8</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(q) &lt;&lt; std::endl; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p><strong>左值引用和右值引用</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>; </span><br><span class="line">    <span class="type">int</span> &amp;b = a; *<span class="comment">// 定义一个左值引用变量* b = 20; *// 通过左值引用修改引用内存的值* </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 这条mov指令把10放到a的内存中</span></span><br><span class="line"><span class="number">00354218</span>  mov         dword ptr [a],<span class="number">0</span>Ah  </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">/* 下面的lea指令把a的地址放入eax寄存器</span></span><br><span class="line"><span class="comment">   mov指令把eax的内容放入b内存里面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">0035421F</span>  lea         eax,[a]  </span><br><span class="line"><span class="number">00354222</span>  mov         dword ptr [b],eax </span><br><span class="line"> </span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">/* 下面的mov指令把b内存的值放入eax寄存器（就是a的地址）</span></span><br><span class="line"><span class="comment">   mov指令再把20放入eax记录的地址的内存里面（就是把20赋值给a）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">00354225</span>  mov         eax,dword ptr [b]  </span><br><span class="line"><span class="number">00354228</span>  mov         dword ptr [eax],<span class="number">14</span>h</span><br></pre></td></tr></table></figure><p><strong>定义一个左值引用在汇编指令上和定义一个指针是没有任何区别的</strong>定义一个引用变量int &amp;b=a，是必须初始化的，因为指令上需要把右边a的地址放入一个b的内存里面（相当于定义了一个指针的内存），当给引用变量b赋值时，指令从b里面取出a的地址，并把20写入该地址，也就是a的内存中（相当于给指针解引用赋值），所以也说，使用引用变量时，汇编指令会做一个指针自动解引用的操作。</p><p><strong>所以在汇编指令层面，引用和指针的操作没有任何区别</strong>！</p><p>左值，有内存，有名字，值可以修改</p><p>右值，没内存，没名字</p><p>右值引用：Int &amp;&amp;c = 20; 和 const int &amp;c = 20;汇编代码完全一样</p><p>但&amp;&amp;c可以修改引用的值而const无法修改</p><p>右值引用变量只能引用右值，一个右值引用变量本身是一个左值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> &amp;&amp;b = <span class="number">20</span>; <span class="comment">// 底层指令上是一模一样的，没有任何区别，不同的是，通过右值引用变量，可以进行读操作，也可以进行写操作。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp;&amp;c = <span class="number">20</span>; <span class="comment">// 专门用来引用右值类型，在指令上，可以自动产生临时变量，然后直接引用临时变量</span></span><br><span class="line"><span class="type">int</span> &amp;&amp;e = c; <span class="comment">// 错误的 </span></span><br><span class="line"><span class="comment">//右值引用变量只能引用右值，一个右值引用变量本身是一个左值</span></span><br></pre></td></tr></table></figure><p><strong>有地址的用左值引用，没有地址的用右值引用；有变量名字的用左值引用，没有变量名字的（比如临时量没有名字）用右值引用</strong>。</p><p><strong>引用折叠</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">//int &amp;&amp;c = a; // 错误，无法将左值a绑定到右值引用c</span></span><br><span class="line"><span class="comment">//int &amp;&amp;d = b; // 错误，无法将左值b绑定到右值引用d</span></span><br><span class="line"><span class="type">int</span> &amp;&amp;e = <span class="number">20</span>;  <span class="comment">// 正确，20是一个右值(没地址没名字)，可以绑定到右值引用e上</span></span><br><span class="line"><span class="comment">//int &amp;&amp;f = e; // 错误，无法将左值e绑定到右值引用f，因为e有名字，有地址，本身也是左值</span></span><br><span class="line"><span class="type">int</span> &amp;g = e;    <span class="comment">// 正确，e本身有名字，有地址，是一个左值，可以被g引用</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用折叠的概念主要用在函数模板类型参数的推导中，如下面的函数模板：</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T&amp;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;01 val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">T tmp = val;</span><br><span class="line">tmp++;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;02 val:&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; tmp:&quot;</span> &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="type">int</span> &amp;&amp;c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(10):&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">// 10是右值，引用类型是int&amp;&amp;，T&amp;&amp;推导过程是int&amp;&amp;+&amp;&amp;折叠成int&amp;&amp;，所以T是int，下同</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(a):&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">func</span>(a);<span class="comment">// a是左值，不可能用右值引用来引用，所以func推导T为int&amp;，那么T&amp;&amp;-&gt;int&amp;+&amp;&amp;折叠成int&amp;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(std::move(a)):&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">func</span>(std::<span class="built_in">move</span>(a)); <span class="comment">// std::move(a)是把a转成右值类型，右值引用类型是int&amp;&amp;，所以func推导T为int</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(b):&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">func</span>(b);<span class="comment">// b是左值，不可能用右值引用来引用，所以func推导T为int&amp;，那么T&amp;&amp;-&gt;int&amp;+&amp;&amp;折叠成int&amp;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(c):&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">func</span>(c);<span class="comment">// c是左值，不可能用右值引用来引用，所以func推导T为int&amp;，那么T&amp;&amp;-&gt;int&amp;+&amp;&amp;折叠成int&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码运行打印如下：</span></span><br><span class="line"><span class="comment">func(10): //T tmp = val; T是int</span></span><br><span class="line"><span class="comment">01 val:10</span></span><br><span class="line"><span class="comment">02 val:10 tmp:11</span></span><br><span class="line"><span class="comment">func(a): //T tmp = val; T是int&amp;</span></span><br><span class="line"><span class="comment">01 val:10</span></span><br><span class="line"><span class="comment">02 val:11 tmp:11</span></span><br><span class="line"><span class="comment">func(std::move(a)): //T tmp = val; T是int</span></span><br><span class="line"><span class="comment">01 val:11</span></span><br><span class="line"><span class="comment">02 val:11 tmp:12</span></span><br><span class="line"><span class="comment">func(b): //T tmp = val; T是int&amp;</span></span><br><span class="line"><span class="comment">01 val:11</span></span><br><span class="line"><span class="comment">02 val:12 tmp:12</span></span><br><span class="line"><span class="comment">func(c): //T tmp = val; T是int&amp;</span></span><br><span class="line"><span class="comment">01 val:10</span></span><br><span class="line"><span class="comment">02 val:11 tmp:11</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>const、一级指针、引用的结合使用</strong></p><p>const修饰的量常出现儿的错误是：<br>1.常量不能再作为左值《= 直接修改常量的值<br>2.不能把常量的地址泄露给一个普通的指针或者普通的引用变量《=可以间接修改常量的值</p><p>const修饰离他最近的类型<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>*p = &amp;a; =&gt; *p=<span class="number">20</span> p=&amp;b</span><br><span class="line"><span class="comment">//可以任意指向不同的int类型的内存，但是不能通过指针间接修改指向的内存的值</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span>* p;<span class="comment">//和上面等价，因为*不是类型，所以const还是修饰int</span></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;a; =&gt;p = &amp;b *p = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//这个指针现在是常量，不能再指向其它内存，但是可以通过指针解引用修改指向的内存的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//总结const和指针的类型转换公式：</span></span><br><span class="line"><span class="type">int</span>*      &lt;=     <span class="type">const</span> <span class="type">int</span>*      <span class="comment">//是错误的！</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>*   &lt;=    <span class="type">int</span>*          <span class="comment">//是可以的！</span></span><br><span class="line"><span class="comment">//在二级指针中是错误的</span></span><br><span class="line"><span class="type">int</span>** &lt;=  <span class="type">const</span> <span class="type">int</span>** <span class="comment">//是错误的！</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>**  &lt;=   <span class="type">int</span>** <span class="comment">//是错误的！</span></span><br><span class="line"><span class="comment">//下面是const和一级指针的结合 （看const的右 侧）</span></span><br><span class="line"><span class="type">int</span>**   &lt;=   <span class="type">int</span>*<span class="type">const</span>*  <span class="comment">//是错误的！</span></span><br><span class="line"><span class="type">int</span>*<span class="type">const</span>*  &lt;=   <span class="type">int</span>**  <span class="comment">//是可以的</span></span><br></pre></td></tr></table></figure><br>const如果右边没有指针<em>的话，const是不参与类型的，即`int</em> const == int*`</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在内存0x0018ff44处写一个4字节的10</span></span><br><span class="line"><span class="type">int</span> *&amp;&amp;p = (<span class="type">int</span>*)<span class="number">0x0018ff44</span> <span class="comment">//0x0018ff44 是常量也就是说是右值</span></span><br><span class="line">p = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🥧本文讲解c++基础知识</summary>
    
    
    
    <category term="c++" scheme="https://yanhool.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法与外挂标签写法汇总</title>
    <link href="https://yanhool.github.io/posts/20131023d.html"/>
    <id>https://yanhool.github.io/posts/20131023d.html</id>
    <published>2022-08-09T10:19:03.000Z</published>
    <updated>2022-10-23T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Markdown语法自带格式"><a href="#1-Markdown语法自带格式" class="headerlink" title="1.Markdown语法自带格式"></a>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块"><a href="#1-1-代码块" class="headerlink" title="1.1 代码块"></a>1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题"><a href="#1-2-多级标题" class="headerlink" title="1.2 多级标题"></a>1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式"><a href="#1-3-文字样式" class="headerlink" title="1.3 文字样式"></a>1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用"><a href="#1-4-引用" class="headerlink" title="1.4 引用"></a>1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p> Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>….</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线"><a href="#1-5-分割线" class="headerlink" title="1.5 分割线"></a>1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以"><a href="#1-6-列表-跟空格都可以" class="headerlink" title="1.6 列表(*,+,-跟空格都可以)"></a>1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表"><a href="#1-6-1-无序列表" class="headerlink" title="1.6.1 无序列表"></a>1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表"><a href="#1-6-2-有序列表" class="headerlink" title="1.6.2 有序列表"></a>1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片"><a href="#1-7-图片" class="headerlink" title="1.7 图片"></a>1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式"><a href="#1-9-公式" class="headerlink" title="1.9 公式"></a>1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><script type="math/tex; mode=display">\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Butterfly外挂标签"><a href="#2-Butterfly外挂标签" class="headerlink" title="2.Butterfly外挂标签"></a>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text"><a href="#2-1-行内文本样式-text" class="headerlink" title="2.1 行内文本样式 text"></a>2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span"><a href="#2-2-行内文本-span" class="headerlink" title="2.2 行内文本 span"></a>2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p"><a href="#2-3-段落文本-p" class="headerlink" title="2.3 段落文本 p"></a>2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note"><a href="#2-4-引用note" class="headerlink" title="2.4 引用note"></a>2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table></div><p>2.外部icon</p><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><br>2.<code>modern</code>样式<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip"><a href="#2-5-上标标签-tip" class="headerlink" title="2.5 上标标签 tip"></a>2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima"><a href="#2-6-动态标签-anima" class="headerlink" title="2.6 动态标签 anima"></a>2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>   1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><br>3.On hover（当鼠标悬停时显示动画）<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><br>4.On parent hover（当鼠标悬停在父级元素时显示动画）<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox"><a href="#2-7-复选列表-checkbox" class="headerlink" title="2.7 复选列表 checkbox"></a>2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio"><a href="#2-8-单选列表-radio" class="headerlink" title="2.8 单选列表 radio"></a>2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline"><a href="#2-9-时间轴-timeline" class="headerlink" title="2.9 时间轴 timeline"></a>2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link"><a href="#2-10-链接卡片-link" class="headerlink" title="2.10 链接卡片 link"></a>2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns"><a href="#2-11-按钮-btns" class="headerlink" title="2.11 按钮 btns"></a>2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></p><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard"><a href="#2-12-github卡片-ghcard" class="headerlink" title="2.12 github卡片 ghcard"></a>2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><div class="table-container"><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><p>2.仓库信息卡片</p><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage"><a href="#2-13-github徽标-ghbdage" class="headerlink" title="2.13 github徽标 ghbdage"></a>2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object><p>3.拓展参数，支持shields的API的全部参数内容</p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites"><a href="#2-14-网站卡片-sites" class="headerlink" title="2.14 网站卡片 sites"></a>2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage"><a href="#2-15-行内图片-inlineimage" class="headerlink" title="2.15 行内图片 inlineimage"></a>2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image"><a href="#2-16-单张图片-image" class="headerlink" title="2.16 单张图片 image"></a>2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><br>2.指定宽度<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><br>3.指定宽度并添加描述：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><br>4.设置占位背景色：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio"><a href="#2-17-音频-audio" class="headerlink" title="2.17 音频 audio"></a>2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video"><a href="#2-18-视频-video" class="headerlink" title="2.18 视频 video"></a>2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><br>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery"><a href="#2-19-相册-gallery" class="headerlink" title="2.19 相册 gallery"></a>2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>2.gallery 相册<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><div class="table-container"><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table></div><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding"><a href="#2-20-折叠框-folding" class="headerlink" title="2.20 折叠框 folding"></a>2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><br><!-- tab 参数配置 --></p><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab"><a href="#2-21-分栏-tab" class="headerlink" title="2.21 分栏 tab"></a>2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem"><a href="#2-22-诗词标签-poem" class="headerlink" title="2.22 诗词标签 poem"></a>2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon"><a href="#2-23-阿里图标-icon" class="headerlink" title="2.23 阿里图标 icon"></a>2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow"><a href="#2-24-特效标签wow" class="headerlink" title="2.24 特效标签wow"></a>2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><br>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><br>3.slideInRight动画效果，持续5s，延时5s<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><br>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress"><a href="#2-25-进度条-progress" class="headerlink" title="2.25  进度条 progress"></a>2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation"><a href="#2-26-注释-notation" class="headerlink" title="2.26 注释 notation"></a>2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble"><a href="#2-27-气泡注释-bubble" class="headerlink" title="2.27 气泡注释 bubble"></a>2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span>&lt;/span&gt;，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局”，用来为盒状模型提供最大的灵活性”</span>&lt;/span&gt;，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span>&lt;/span&gt;，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span>&lt;/span&gt;写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span>&lt;/span&gt;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference"><a href="#2-28-引用文献-reference" class="headerlink" title="2.28 引用文献 reference"></a>2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，Butterfly主题<span class="hidden-anchor" id="referto_[3]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[7]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[8]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[9]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示"><a href="#2-29-PDF展示" class="headerlink" title="2.29 PDF展示"></a>2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件"><a href="#2-30-Hexo-tag-map-插件" class="headerlink" title="2.30 Hexo-tag-map 插件"></a>2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="table-container"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table></div><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div>&lt;/div&gt;<script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><br></p><p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><br></p><p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><br></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块"><a href="#2-31-隐藏块" class="headerlink" title="2.31 隐藏块"></a>2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">🥧本文汇总Markdown格式以及外挂标签在网页端的渲染效果，可作为文档进行查询</summary>
    
    
    
    <category term="杂项" scheme="https://yanhool.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="Markdown" scheme="https://yanhool.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://yanhool.github.io/posts/20221023d.html"/>
    <id>https://yanhool.github.io/posts/20221023d.html</id>
    <published>2022-08-09T10:19:03.000Z</published>
    <updated>2023-03-13T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="1-背包问题"><a href="#1-背包问题" class="headerlink" title="1. 背包问题"></a>1. 背包问题</h2><p>背包问题：有 $N$ 个物品和一个容量为 $V$ 的背包，已知第 $i$ 个物品的价值为 $w_i$ 体积为 $v_i(i∈1$~$N)$，问怎么装在能使背包的总价值最大</p><p><img src="https://s1.vika.cn/space/2023/03/12/bc5ebe6ab01e4f5db6f8e891bfec7120" style="zoom:100%;" /></p><h3 id="1-1-01背包问题"><a href="#1-1-01背包问题" class="headerlink" title="1.1 01背包问题"></a>1.1 01背包问题</h3><p>01背包问题：每件物品只有1个所以最多只能用1次</p><blockquote><p>有 $N$件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。<br>第 i 件物品的体积是 $v_i$，价值是 $w_i$。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];    <span class="comment">//f(i, j)前i个物品且体积不超过j的最大价值</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; v[i]) f[i][j] = f[i - <span class="number">1</span>][j]; <span class="comment">// 如果第i个物品塞不进背包</span></span><br><span class="line">            <span class="keyword">else</span> f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - v[i]] + w[i]); <span class="comment">// 决策：是装第i个物品的价值最大还是不装第i个物品的价值最大  </span></span><br><span class="line">            <span class="comment">//f[i - 1][j - v[i]] + w[i] 是同时减去第i个物品,最大的依旧是最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>首先要提到一个==<strong>滚动数组</strong>==的概念。</p><p>一维数组：</p><p>比如斐波那契数列$f(n)=f(n-1)+f(n-2)$,一般我们可以拿一个一维数组来存，但我们可以发现当我们求一个斐波那契数时只需要知道他前面两个数即可无需知道所有，因此我们可以用来个变量来代替数组。</p><p>二维数组：</p><p>假设<code>dp[0][0] = 1</code></p><p><code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code>，我们可以看下表</p><div class="table-container"><table><thead><tr><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>1</td><td></td><td></td><td></td></tr><tr><td>1</td><td></td><td></td></tr></tbody></table></div><p>我们现在从第3行开始计算1+2=3，此时2就不再需要了可以删掉，以此类推</p><p><img src="https://s1.vika.cn/space/2023/03/12/909010b5f4064f8188559be75b5453d1" alt=""></p><p>因此我们的二维数组可以优化为1维数组，这样就减少了空间复杂度。</p><p>通过观察我们发现<code>f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i]);</code></p><p><code>f[i]</code>只需要计算<code>f[i-1]</code></p><p>将状态<code>f[i][j]</code>优化到一维<code>f[j]</code>，实际上只需要做一个等价变形。</p><p><code>f[j]</code>:有 $N$ 个物品，背包容量 $j$ 下的最优解。</p><p>先给出代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N];    </span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v[i]; j --)&#123; <span class="comment">// 逆序</span></span><br><span class="line">            <span class="comment">// 优化前 if(j &lt; v[i]) f[i][j] = f[i - 1][j];  </span></span><br><span class="line">          <span class="comment">//  f[j] = f[j];            // 优化后，该行自动成立，可省略。</span></span><br><span class="line">       <span class="comment">// else    </span></span><br><span class="line">            <span class="comment">// 优化前 f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i]);  </span></span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的状态转移方程为<code>f[j] = max(f[j], f[j - v[i]] + w[i]);</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = v[i]; j &lt;= m; j ++)&#123;</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>j-v[i]</code>严格小于<code>j</code>的，且<code>j</code>是越来越大的，所以<code>j-v[i]</code>也越来越大，但<code>f[j-v[i]]</code>还是在<code>f[j]</code>之前先算出来的就是说<code>f[j-v[i]]</code>更新过了（按照循环顺序，小的先计算），所以此时的<code>f[j-v[i]]</code>是第 $i$ 层算出来的（即<code>f[i-1][j]</code>被更新成<code>f[i][j]</code>），那么<code>f[j] = max(f[j], f[j - v[i]] + w[i])</code>就成了<code>f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i])</code>可正确的应该是<code> f[i - 1][j - v[i]]</code>(应为我们这一项算的是包含第i个物品的最大价值)。如果我们逆序的话，<code>j-v[i]</code>首先还是小于<code>j</code>,但我们这是逆序意思就是还没被更新过，存的就是上一层的<code>j-v[i]</code>，所以是现算<code>f[j]</code>后算<code>f[j-v[i]]</code>此时<code>f[j - v[i]]</code>等价于二维的<code>f[i - 1][j - v[i]</code></p><p><strong>第二种理解方式</strong></p><p>在二维情况下，状态<code>f[i][j]</code>是由上一轮 $i-1$ 的状态得来的，<code>f[i][j]</code>与<code>f[i - 1][j]</code>是独立的。而优化到一维后，如果我们还是正序，则有==f[较小体积]更新到f[较大体积]==，则有可能本应该用第$i-1$轮的状态却用的是第$i$轮的状态。</p><p>例如，一维状态第$i$轮对体积为 3 的物品进行决策，则<code>f[7]</code>由<code>f[4]</code>更新而来，这里的<code>f[4]</code>正确应该是<code>f[i - 1][4]</code>，但从小到大枚举$j$这里的<code>f[4]</code>在第i轮计算却变成了<code>f[i][4]</code>。当逆序枚举背包容量j时，我们求<code>f[7]</code>同样由<code>f[4]</code>更新，但由于是逆序，这里的<code>f[4]</code>还没有在第i轮计算，所以此时实际计算的<code>f[4]</code>仍然是<code>f[i - 1][4]</code>。</p><p>简单来说，一维情况正序更新状态f[j]需要用到前面计算的状态已经被「污染」，逆序则不会有这样的问题。</p><h3 id="1-2-完全背包问题"><a href="#1-2-完全背包问题" class="headerlink" title="1.2 完全背包问题"></a>1.2 完全背包问题</h3><p>完全背包问题：每件物品有无限个且可用无限次</p><blockquote><p>有 $N$ 种物品和一个容量是 $V$ 的背包，每种物品都有无限件可用。</p><p>第 $i$ 种物品的体积是 $v_i$，价值是 $w_i$。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p></blockquote><p>此时我们的$f(i,j)$可划分为</p><p><img src="https://s1.vika.cn/space/2023/03/12/5a6c5443e0a74e0a95d5b29bc3a06e6d" alt=""></p><p>因此状态转移方程为$f(i,j)=max(f(i-1,j),f(i-1,j-k<em>v[i])+k</em>w[i])$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k * v[i] &lt;= j; k ++)&#123;</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化一</strong></p><p>我们不妨把式子展开</p><p>$f(i,j)=max(f(i-1,j),f(i-1,j-v_i)+w_i,f(i-1,j-2v_i)+2w_i,…)$</p><p>$f(i,j-v_i)=max(f(i-1,j-v_i),f(i-1,j-2v_i)+w_i,…)$</p><p>由此可知$f(i,j-v_i)+w$等于$f(i,j)$后半段,最后得</p><p>$f(i,j)=max(f(i-1,j),f(i-1,j-v_i)+w)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= v[i]) f[i][j] = <span class="built_in">max</span>(f[i][j], f[i][j-v[i]] + w[i]);</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接着优化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = v[i]; j &lt;= m; j ++)&#123;</span><br><span class="line">                <span class="comment">// f[j] = f[j];等价消去</span></span><br><span class="line">            <span class="comment">// if(j&gt;=v[i]) 我们可以直接让j从v[i]开始</span></span><br><span class="line">            <span class="comment">// f[i][j] = max(f[i][j], f[i][j-v[i]] + w[i]);</span></span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j-v[i]] + w[i]);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            右边的f[j]是上一行的f[j]已经更新了所以是f[i][j],且j-v[i] &lt; j所以f[j-v[i]]在f[j]之前就更新了所以是f[i][j-v[i]],符合上式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-多重背包问题"><a href="#1-3-多重背包问题" class="headerlink" title="1.3 多重背包问题"></a>1.3 多重背包问题</h3><p>多重背包问题：每个物品数量为$s_i$个</p><blockquote><p>有 N 种物品和一个容量是 $V$ 的背包。</p><p>第 i 种物品最多有 $s_i$ 件，每件体积是 $v_i$，价值是 $w_i$ 。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p></blockquote><p>和完全背包问题可以一样的分析，这里就直接贴代码了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> v[N], w[N], s[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k ++)&#123;</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - v[i] * k] + w[i] * k);</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>我们先来看看它是否能和完全背包问题一样进行优化。</p><p>状态转移方程$f[i][j] = max(f[i][j], f[i - 1][j - v[i] <em> k] + w[i] </em> k)$</p><p>$f[i][j] = max(f[i-1][j],f[i-1][j-v[i]]+w[i],f[i-1][j-2<em>v[i]]+2</em>w[i],…,f[i-1][j-s[i]<em>v[i]]+s[i]</em>w[i])$</p><p>$f[i][j-v[i]] = max(f[i-1][j-v[i]],f[i-1][j-2<em>v[i]]+w[i],f[i-1][j-3</em>v[i]]+2<em>w[i],…,f[i-1][j-(s[i]+1)</em>v[i]]+s[i]*w[i])$</p><p>我们发现不仅多了$w[i]$,更要命的是多了$f[i-1][j-(s[i]+1)<em>v[i]]+s[i]</em>w[i]$,所以我们不能要上面那样优化。</p><p><strong>二进制优化</strong></p><p>比如我有 $s=1023$ 个物品，其实我们不需要遍历所有，可以先分成几组，比如第一组有 $1$ 个物品，第二组  $2$ 个物品，第三组  $4$ 个物品，最后一组  $512$ 个物品，$1,2,4,8,16,…,512$，然后$1,2$ 组成 $0-3$ , $3$ 和 $4$ 可以组成 $0-7$ ，所以我们就把 $1023$ 个物品映射到了 $10$ 组当中。因为每个组只能选一次，我们就可以把问题看成 $01$ 背包问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12010</span>, M = <span class="number">2010</span>;    <span class="comment">// N = 1000 * log2000</span></span><br><span class="line"><span class="type">int</span> f[M];</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a, b, s;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt;= s)&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            v[cnt] = a * k;</span><br><span class="line">            w[cnt] = b * k;</span><br><span class="line">            s -= k;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">            v[cnt] = a * s;</span><br><span class="line">            w[cnt] = b * s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n = cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v[i]; j -- )</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-分组背包问题"><a href="#1-4-分组背包问题" class="headerlink" title="1.4 分组背包问题"></a>1.4 分组背包问题</h3><p>分组背包问题：有N组(比如水果组(苹果、橘子)，蔬菜组(小白菜、黄瓜))，每组物品有若干个，且每一组只能选一个物品。</p><p>完全背包问题是==<strong>第 $i$ 个</strong>物品选几个==</p><p>分组背包问题是==<strong>第 $i$ 组</strong>物品哪个==</p><p>状态计算：$f(i,j)$可以划分为第 i 个组选 0, 1, 2, …, n 个，第 i 组不选表示为 $f(i-1,j)$ ，选第 k 个表示为 $f(i-1,j-v[i,k])+w[i,k]$</p><blockquote><p>有 $N$ 组物品和一个容量是 $V$ 的背包。</p><p>每组物品有若干个，同一组内的物品最多只能选一个。<br>每件物品的体积是 $v<em>{ij}$，价值是 $w</em>{ij}$，其中 $i$ 是组号，$j$ 是组内编号。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>输出最大价值。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> v[N][N], w[N][N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; s[i]; k ++)&#123;</span><br><span class="line">            cin &gt;&gt; v[i][k] &gt;&gt; w[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= <span class="number">0</span>; j --)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; s[i]; k ++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (v[i][k] &lt;= j) f[j] = <span class="built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-线性DP"><a href="#2-线性DP" class="headerlink" title="2. 线性DP"></a>2. 线性DP</h2><h3 id="2-1-数字三角形"><a href="#2-1-数字三角形" class="headerlink" title="2.1 数字三角形"></a>2.1 数字三角形</h3><blockquote><p>给定一个如下图所示的数字三角形，从顶部出发，在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点，一直走到底层，要求找出一条路径，使路径上的数字的和最大。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="attribute">7</span></span><br><span class="line">   <span class="attribute">3</span>   <span class="number">8</span></span><br><span class="line"> <span class="attribute">8</span>   <span class="number">1</span>   <span class="number">0</span></span><br><span class="line"><span class="attribute">2</span>   <span class="number">7</span>   <span class="number">4</span>   <span class="number">4</span></span><br><span class="line"><span class="attribute">4</span>   <span class="number">5</span>   <span class="number">2</span>   <span class="number">6</span>   <span class="number">5</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="https://s1.vika.cn/space/2023/03/12/389114b18e984b6f9d5c6ae2cd3c5301" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j ++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j ++)&#123;</span><br><span class="line">            f[i][j] = -INF;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j ++)&#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j], f[i - <span class="number">1</span>][j] + a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="type">int</span> res = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) res = <span class="built_in">max</span>(res, f[n][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-最长上升子序列"><a href="#2-2-最长上升子序列" class="headerlink" title="2.2 最长上升子序列"></a>2.2 最长上升子序列</h3><blockquote><p>给定一个长度为 $N$ 的数列，求数值严格单调递增的子序列的长度最长是多少。</p></blockquote><p><img src="https://s1.vika.cn/space/2023/03/12/4a3427823c614c5c975adef4843ffd63" alt=""></p><p>其中 $f(i)$ 的划分，为 $0$ 时，也就是 $i$ 的最长子序列就是其本身长度 $1$ ，为 $1$ 时就是 $0$ ~ $i-1$ 的某个数的为倒数第二个 ，以此类推。</p><p>$f(i)=max(f(j)+1),a_j&lt;a_i,j=0,1,…,i-1$ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        f[i] = <span class="number">1</span>;<span class="comment">// z</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[i])&#123;</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res, f[i]);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; f[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化版本（贪心思想）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> q[N]; <span class="comment">// 存放所有长度下 不同数字结尾的最长上升子序列的最小值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>; <span class="comment">// 当前的最大长度</span></span><br><span class="line">    q[<span class="number">0</span>] = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = len;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid] &lt; a[i]) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="built_in">max</span>(len, r + <span class="number">1</span>);</span><br><span class="line">        q[r + <span class="number">1</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-最长公共子序列"><a href="#2-3-最长公共子序列" class="headerlink" title="2.3 最长公共子序列"></a>2.3 最长公共子序列</h3><blockquote><p>给定两个长度分别为 $N$ 和 $M$ 的字符串 $A$ 和 $B$，求既是 $A$ 的子序列又是 $B$ 的子序列的字符串长度最长是多少。</p></blockquote><p><img src="https://s1.vika.cn/space/2023/03/12/b39ea0113e124ab0afcd51955183eb59" alt=""></p><p>$f(0,0)$ 表示不包含第一序列的第i个字母和第二序列的第j个字母；$f(0,1)$ 表示不包含第一序列的第i个字母且包含第二序列的第j个字母；以此类推。</p><p>$f(0,0)$ 可以表示为 $f[i-1,j-1]$ ，$f(1,1)$ 可以表示为 $f[i-1,j-1]+1$ 。</p><p>中间两个不好表示，不能表示为 $f[i-1,j]$ 和 $f[i,j-1]$ ，这是包含上述两种情况的，但我们可以发现  $max(f[i-1,j])$ 肯定&gt;= 01，而我们要找到的是全局最大值， 因此我们可以用  $f[i-1,j]$ 代替。</p><p>$f(i,j)=max(f(i-1,j),f(i,j-1),f(i-1,j-1)+1)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">char</span> f1[N], f2[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, f1 + <span class="number">1</span>, f2 + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (f1[i] == f2[j]) f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n][m]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-编辑距离"><a href="#2-3-编辑距离" class="headerlink" title="2.3 编辑距离"></a>2.3 编辑距离</h3><blockquote><p>给定两个字符串 $A$ 和 $B$，现在要将 $A$ 经过若干操作变为 $B$，可进行的操作有：</p><ol><li>删除–将字符串 $A$ 中的某个字符删除。</li><li>插入–在字符串 $A$ 的某个位置插入某个字符。</li><li>替换–将字符串 $A$ 中的某个字符替换为另一个字符。</li></ol><p>现在请你求出，将 $A$ 变为 $B$ 至少需要进行多少次操作。</p></blockquote><p><img src="https://s1.vika.cn/space/2023/03/15/485569e4b31c49d28d4c5f5381da0fa1" alt=""></p><p>删除：a[1~i-1]和b[1~j]匹配，<code>f[i-1,j]+1</code> 其中1表示删除操作+1</p><p>增加：a[i]和b[j-1]已经匹配了，只要再加一个字母就完全匹配了，<code>f[i,j-1]+1</code></p><p>替换：a[i-1]和b[j-1]已经完全匹配了，把a最后一个字母改成b最后一个字母就完全匹配了，<code>f[i-1,j-1]+ (1 or 0)</code> 0 表示a和b不用修改就已经相等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[N];</span><br><span class="line"><span class="type">char</span> b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;n, a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;m, b + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 初始化边界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i ++ ) f[<span class="number">0</span>][i] = i; <span class="comment">// 当a为空字符时，a和b匹配只有添加b长度的字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++ ) f[i][<span class="number">0</span>] = i; <span class="comment">// 当b为空字符时，a和b匹配只有删除a长度的字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )&#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i<span class="number">-1</span>][j], f[i][j<span class="number">-1</span>]) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[j]) f[i][j] = <span class="built_in">min</span>(f[i][j], f[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">else</span> f[i][j] = <span class="built_in">min</span>(f[i][j], f[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>给定 <em>n</em>个长度不超过 1010 的字符串以及 <em>m</em> 次询问，每次询问给出一个字符串和一个操作次数上限。</p><p>对于每次询问，请你求出给定的 <em>n</em>个字符串中有多少个字符串可以在上限操作次数内经过操作变成询问给出的字符串。</p><p>每个对字符串进行的单个字符的插入、删除或替换算作一次操作。</p><p><strong>输入格式</strong></p><p>第一行包含两个整数 <em>n</em> 和 <em>m</em>。</p><p>接下来 <em>n</em>行，每行包含一个字符串，表示给定的字符串。</p><p>再接下来 m 行，每行包含一个字符串和一个整数，表示一次询问。</p><p>字符串中只包含小写字母，且长度均不超过 1010。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>, M = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">char</span> str[M][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">edit_distance</span><span class="params">(<span class="type">char</span> a[], <span class="type">char</span> b[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> la = <span class="built_in">strlen</span>(a + <span class="number">1</span>), lb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lb; i ++ ) f[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= la; i ++ ) f[i][<span class="number">0</span>] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= la; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lb; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] != b[j]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[la][lb];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str[i] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> s[N];</span><br><span class="line">        <span class="type">int</span> limit;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, s + <span class="number">1</span>, &amp;limit);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">edit_distance</span>(str[i], s) &lt;= limit)</span><br><span class="line">                res ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="3-区间DP"><a href="#3-区间DP" class="headerlink" title="3. 区间DP"></a>3. 区间DP</h2><p>状态表示是某一个区间</p><h3 id="3-1-石子合并"><a href="#3-1-石子合并" class="headerlink" title="3.1 石子合并"></a>3.1 石子合并</h3><blockquote><p>设有 N 堆石子排成一排，其编号为 $1，2，3，…，N$。</p><p>每堆石子有一定的质量，可以用一个整数来描述，现在要将这 N 堆石子合并成为一堆。</p><p>每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。</p><p>例如有 $4$ 堆石子分别为 <code>1 3 5 2</code>， 我们可以先合并 $1、2$ 堆，代价为 $4$，得到 <code>4 5 2</code>， 又合并 1，2 堆，代价为 9，得到 <code>9 2</code> ，再合并得到 1，总代价为 $4+9+11=24$；</p><p>如果第二步是先合并 2，3堆，则代价为 7，得到 <code>4 7</code>，最后一次合并代价为 11，总代价为 4+7+11=22。</p><p>问题是：找出一种合理的方法，使总的代价最小，输出最小代价。</p></blockquote><p><img src="https://s1.vika.cn/space/2023/03/12/db1fbdde91e443f3b660bfdc8203d154" alt=""></p><p>合并第i堆和第j堆肯定是要合并两个相邻堆，因此我们可以分为左堆1个右堆k-1个或者左堆2个右堆k-2个（其中 k = j - i + 1），以此类推。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">409</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, x[N], f[N][N], a[N];</span><br><span class="line"><span class="type">int</span> Min = INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios :: <span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);<span class="comment">//读入优化 </span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//读入优化 </span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x[i];<span class="comment">//输入石子个数</span></span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + x[i];<span class="comment">//前缀和 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>;len &lt; n;++ len)<span class="comment">//枚举len</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j;i &lt;= n - len;++ i)<span class="comment">//枚举左端点</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = i + len;<span class="comment">//计算右端点</span></span><br><span class="line">            f[i][j] = INF;<span class="comment">//初始化f[i][j]</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = i;k &lt; j;++ k)<span class="comment">//枚举k</span></span><br><span class="line">                f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k + <span class="number">1</span>][j] + a[j] - a[i - <span class="number">1</span>]);<span class="comment">//直接计算</span></span><br><span class="line">            <span class="keyword">if</span>(len == n - <span class="number">1</span>) Min = <span class="built_in">min</span>(Min, f[i][j]);<span class="comment">//计算答案</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(Min != INF) cout &lt;&lt; Min &lt;&lt; endl;<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;<span class="comment">//注意特判没有合并的情况</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-计数类DP"><a href="#4-计数类DP" class="headerlink" title="4. 计数类DP"></a>4. 计数类DP</h2><blockquote><p>一个正整数 n 可以表示成若干个正整数之和，形如：$n=n_1+n_2+…+n_k，$其中 $ n_1≥n_2≥…≥n_k,k≥1$。</p><p>我们将这样的一种表示称为正整数 n的一种划分。</p><p>现在给定一个正整数 n，请你求出 n共有多少种不同的划分方法。 不考虑数字的顺序  比如 4= 1 + 2 + 1 = 1+1+2 是一样的 </p><p>由于答案可能很大，输出结果请对 $10^9+7 $取模。</p></blockquote><p>可以把这道题看出一个完全背包问题，其中 <em>n</em> 当成一个体积为 <em>n</em> 的背包，里面装的物品的体积是 <em>1~n</em></p><p><img src="https://s1.vika.cn/space/2023/03/15/a407a7a689fc49faad4f0ea903f93e69" alt=""></p><p>选 0 个 <code>f[i-1,j]</code>，选 k 个<code>f[i-1, j - k*i]</code></p><p><code>f[i][j] = f[i - 1][j] + f[i][j - i]</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j ++ )</span><br><span class="line">            f[j] = (f[j] + f[j - i]) % mod;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种想法</p><p><img src="https://s1.vika.cn/space/2023/03/17/8fa283ff70f64960a1fe8366ea526bb4" alt=""></p><p>其中最小值大于1的情况是，首先j个数都是大于1的，当同时减去1时，j个数依旧是大于等于1的，因此可以等价于<code>f[i-j,j]</code></p><p><code>f[i,j]=f[i-1,j-1]+f[i-j,j]</code> 且 <code>ans = f[n,1]+f[n,2]+...+f[n,n]</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j ++ )</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] + f[i - j][j]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) res = (res + f[n][i]) % mod;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-数位统计DP"><a href="#5-数位统计DP" class="headerlink" title="5. 数位统计DP"></a>5. 数位统计DP</h2><hr><h2 id="6-状态压缩DP"><a href="#6-状态压缩DP" class="headerlink" title="6. 状态压缩DP"></a>6. 状态压缩DP</h2><hr><h2 id="7-树形DP"><a href="#7-树形DP" class="headerlink" title="7. 树形DP"></a>7. 树形DP</h2><hr><h2 id="8-记忆化搜索"><a href="#8-记忆化搜索" class="headerlink" title="8. 记忆化搜索"></a>8. 记忆化搜索</h2><hr>]]></content>
    
    
    <summary type="html">🥧本文汇总动态规划的常见题型</summary>
    
    
    
    <category term="算法" scheme="https://yanhool.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://yanhool.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="c++" scheme="https://yanhool.github.io/tags/c/"/>
    
  </entry>
  
</feed>
